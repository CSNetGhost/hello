# ****************************************************************************
# CUI//REL TO USA ONLY
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

#
# Test the SENSOR_FREQUENCY_CHANGED event using a WSF_RADAR_SENSOR configured to support
# multiple active modes with multiple beams per mode:
#  - This test was adapted from core/wsf/test_mission/auto_sensor/test_sensor_freq_changed_event_mm.txt
#  - Much of the code that implements this event is shared by mission and engage, but engage has its
#    own event output formatting code that is tested here.
#  - randomize_radar_frequencies feature enabled to trigger SENSOR_FREQUENCY_CHANGED event at startup
#  - Event output that captures SENSOR_FREQUENCY_CHANGED and SIMULATION_STARTING events in a file
#  - See the parse_event_file script below for test case details
#
include_once ../utility_test_functions.txt

end_time 100 sec

script_variables
   bool allTestsPassed = true;   // any failure turns it false
   int sensorEventCount = 0;     // count of SENSOR_FREQUENCY_CHANGED events
   Array<string> modeOneFreqStr =
   {
      "Beam: 1 Frequency Id: 0 Frequency: 200 MHz",
      "Beam: 2 Frequency Id: 0 Frequency: 210 MHz",
      "Beam: 3 Frequency Id: 0 Frequency: 220 MHz"
   };
   Array<string> modeTwoFreqStr =
   {
      "Beam: 1 Frequency Id: 0 Frequency: 300 MHz",
      "Beam: 2 Frequency Id: 0 Frequency: 310 MHz",
      "Beam: 3 Frequency Id: 0 Frequency: 320 MHz"
   };
   Array<string> modeThreeFreqStr =
   {
      "Beam: 1 Frequency Id: 0 Frequency: 400 MHz",
      "Beam: 2 Frequency Id: 0 Frequency: 410 MHz",
      "Beam: 3 Frequency Id: 0 Frequency: 420 MHz"
   };
   string evtFile = "test_sensor_freq_changed_mm.testout_r1_t1_s1_i1.evt";
end_script_variables

event_output
   flush_output true
   enable SENSOR_FREQUENCY_CHANGED
   enable SIMULATION_STARTING
end_event_output

randomize_radar_frequencies enable

# ****************************************************************************
# Define the system types (movers, sensors, weapons, etc.)
# ****************************************************************************

radar_signature FIGHTER_RADAR_SIGNATURE
   constant 10 m^2
end_radar_signature

# ****************************************************************************
#                     Early Warning Radar
# ****************************************************************************

antenna_pattern EW_RADAR_ANTENNA
  rectangular_pattern
     peak_gain           35 dB
     minimum_gain       -20 dB
     azimuth_beamwidth   5 deg
     elevation_beamwidth 45 deg
end_antenna_pattern

sensor EW_RADAR WSF_RADAR_SENSOR
   #show_calibration_data
   update_interval                    1.0 sec

   selection_mode multiple
   # initial_mode setting added at platform level for ew_radar_1

   mode_template
      frame_time                      10.0 sec

      beam 1
         one_m2_detect_range          100.0 nm
         maximum_range                120 nm

         antenna_height               6.0 m

         scan_mode                    azimuth
         azimuth_scan_limits         -180 deg 180 deg


         transmitter
            antenna_pattern            EW_RADAR_ANTENNA
            beam_tilt                  10.0 deg
            power                      1000.0 kw
            frequency                  200 mhz
            pulse_width                25 usec
            pulse_repetition_interval  1250 usec
            internal_loss              2 db
         end_transmitter

         receiver
            beam_tilt                  10.0 deg
            bandwidth                  2.0 mhz
            noise_power                -160 dBw  # will be calibrated for 1 m^2
            internal_loss              7 dB
         end_receiver

         # Swerling detector
         swerling_case                 1
         probability_of_false_alarm    1.0e-6
         number_of_pulses_integrated   32
      end_beam

      beam 2
         one_m2_detect_range          100.0 nm
         maximum_range                120 nm

         antenna_height               6.0 m

         scan_mode                    azimuth
         azimuth_scan_limits         -180 deg 180 deg


         transmitter
            antenna_pattern            EW_RADAR_ANTENNA
            beam_tilt                  10.0 deg
            power                      1000.0 kw
            frequency                  210 mhz
            pulse_width                25 usec
            pulse_repetition_interval  1250 usec
            internal_loss              2 db
         end_transmitter

         receiver
            beam_tilt                  10.0 deg
            bandwidth                  2.0 mhz
            noise_power                -160 dBw  # will be calibrated for 1 m^2
            internal_loss              7 dB
         end_receiver

         # Swerling detector
         swerling_case                 1
         probability_of_false_alarm    1.0e-6
         number_of_pulses_integrated   32
      end_beam

      beam 3
         one_m2_detect_range          100.0 nm
         maximum_range                120 nm

         antenna_height               6.0 m

         scan_mode                    azimuth
         azimuth_scan_limits         -180 deg 180 deg


         transmitter
            antenna_pattern            EW_RADAR_ANTENNA
            beam_tilt                  10.0 deg
            power                      1000.0 kw
            frequency                  220 mhz
            pulse_width                25 usec
            pulse_repetition_interval  1250 usec
            internal_loss              2 db
         end_transmitter

         receiver
            beam_tilt                  10.0 deg
            bandwidth                  2.0 mhz
            noise_power                -160 dBw  # will be calibrated for 1 m^2
            internal_loss              7 dB
         end_receiver

         # Swerling detector
         swerling_case                 1
         probability_of_false_alarm    1.0e-6
         number_of_pulses_integrated   32
      end_beam

      required_pd                   0.5

      hits_to_establish_track       3 5   # 3 of last 5 scans to establish track
      hits_to_maintain_track        1 3   # 1 of last 3 scans to maintain  track

      reports_range
      reports_bearing
   end_mode_template

   mode one
   end_mode

   mode two
      beam 1
         transmitter
            frequency                  300 mhz
         end_transmitter
      end_beam
      beam 2
         transmitter
            frequency                  310 mhz
         end_transmitter
      end_beam
      beam 3
         transmitter
            frequency                  320 mhz
         end_transmitter
      end_beam
   end_mode

   mode three
      beam 1
         transmitter
            frequency                  400 mhz
         end_transmitter
      end_beam
      beam 2
         transmitter
            frequency                  410 mhz
         end_transmitter
      end_beam
      beam 3
         transmitter
            frequency                  420 mhz
         end_transmitter
      end_beam
   end_mode

end_sensor

# ****************************************************************************
# Define the platform types
# ****************************************************************************

platform_type TRACKER_TYPE WSF_PLATFORM
   icon Ground_Radar
   side blue

   mover WSF_GROUND_MOVER end_mover

   sensor ew_radar_1 EW_RADAR
      on
      processor track_manager
      ignore_same_side
   end_sensor

   sensor ew_radar_2 EW_RADAR
      processor track_manager
      ignore_same_side
   end_sensor

   processor track_manager WSF_TRACK_PROCESSOR
   end_processor
end_platform_type

platform_type LAUNCHER_TYPE WSF_PLATFORM
   icon F-18E
   side blue
   mover WSF_AIR_MOVER end_mover
   radar_signature FIGHTER_RADAR_SIGNATURE
end_platform_type

platform_type TARGET_TYPE WSF_PLATFORM
#   icon F-18E
   side red
   mover WSF_AIR_MOVER end_mover
   radar_signature FIGHTER_RADAR_SIGNATURE
end_platform_type

# Event file entries may consist of multiple lines, indicated by a trailing
# backslash to show continuation.  This script reads a complete event entry
# from the specified file and returns the entry as a string.
script string read_event_entry(FileIO evFile)
   string eventEntry = "";
   while (!evFile.Eof())
   {
       eventEntry += evFile.Readln();
       if (eventEntry.EndsWith("\\"))
       {
          eventEntry = eventEntry.Substring(0,-1);
          continue; 
       }
       break; // no continuation, event entry is complete
   }
   return eventEntry;
end_script

# Parse the event file to verify expected contents:
# - SENSOR_FREQUENCY_CHANGED events for each mode showing initial 'randomize_radar_frequencies' assignments (T=0)
# - SIMULATION_STARTING event (T=0)
# - No additional SENSOR_FREQUENCY_CHANGED events because electronic warfare is not configured
#
# Sim runtime activity:
# --> Test cases for ew_radar_1:
# --> T=0, initial frequency settings
#
# ==> Test cases for ew_radar_2:
# ==> T=0, initial frequency settings
#
script bool parse_event_file(string fileName)
   FileIO evFile = FileIO();
   bool ok = evFile.Open(fileName, "in");
   AssertTrueMessage(ok, "failed to open event file");
   if (ok)
   {
      bool simStart = false;
      while (!evFile.Eof())
      {
         string eventEntry = read_event_entry(evFile);
#         writeln("Event text: '", eventEntry, "'");  // uncomment for debugging

         if (eventEntry.Contains("SIMULATION_STARTING"))
         {
            simStart = true;
         }
         else if (eventEntry.Contains("SENSOR_FREQUENCY_CHANGED"))
         {
            sensorEventCount += 1;

            // Each event entry starts with a timestamp that is used to match up expected event contents
            if (eventEntry.StartsWith("0.000"))
            {
               if (eventEntry.Contains("tracker Sensor: ew_radar_1 Mode: one") ||
                   eventEntry.Contains("tracker Sensor: ew_radar_2 Mode: one"))
               {
                  for (int i = 0; i < 3; i = i + 1)
                  {
                     string errStr = "Expected T=" + eventEntry.Substring(0,6) + " event to report '" + modeOneFreqStr[i] + "'";
                     ok = AssertTrueMessage(eventEntry.Contains(modeOneFreqStr[i]), errStr) && ok;
                  }
               }
               else if (eventEntry.Contains("tracker Sensor: ew_radar_1 Mode: two") ||
                        eventEntry.Contains("tracker Sensor: ew_radar_2 Mode: two"))
               {
                  for (int i = 0; i < 3; i = i + 1)
                  {
                     string errStr = "Expected T=" + eventEntry.Substring(0,6) + " event to report '" + modeTwoFreqStr[i] + "'";
                     ok = AssertTrueMessage(eventEntry.Contains(modeTwoFreqStr[i]), errStr) && ok;
                  }
               }
               else if (eventEntry.Contains("tracker Sensor: ew_radar_1 Mode: three") ||
                        eventEntry.Contains("tracker Sensor: ew_radar_2 Mode: three"))
               {
                  for (int i = 0; i < 3; i = i + 1)
                  {
                     string errStr = "Expected T=" + eventEntry.Substring(0,6) + " event to report '" + modeThreeFreqStr[i] + "'";
                     ok = AssertTrueMessage(eventEntry.Contains(modeThreeFreqStr[i]), errStr) && ok;
                  }
               }
               else
               {
                  writeln(TEST_FAIL_STATEMENT, " ", "Unexpected platform, sensor or mode in SENSOR_FREQUENCY_CHANGED event at T=", eventEntry.Substring(0,6));
                  ok = false;
               }
               // Verify that all T=0 events come after the simulation starts for engage
               string errStr = "Expected T=" + eventEntry.Substring(0,6) + " event to occur after SIMULATION_STARTING event";
               ok = AssertTrueMessage(simStart, errStr) && ok;
            }
            else
            {
               writeln(TEST_FAIL_STATEMENT, " ", "Unexpected SENSOR_FREQUENCY_CHANGED event at T=", eventEntry.Substring(0,6));
               ok = false;
            }
         }
      }
      evFile.Close();
   }
   return ok;
end_script

run
   event_output_file_base_name test_sensor_freq_changed_mm.testout

   output
     event_output true
   end_output
end_run

observer
    enable SIMULATION_COMPLETE
end_observer

// SIMULATION_COMPLETE observer:  Parse event files to check for expected content
script void SimulationComplete()

   writeln("+++ Validate event output +++");
   allTestsPassed = parse_event_file(evtFile) && allTestsPassed;
   allTestsPassed = AssertEqualsMessage(6, sensorEventCount, "Wrong number of SENSOR_FREQUENCY_CHANGED events in evt file") && allTestsPassed;

   if (allTestsPassed)
   {
      writePass(true);
   }
end_script
