# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

end_time 1 hours

platform test-tangent WSF_PLATFORM
   empty_mass 100 kg

   add mover WSF_INTEGRATING_SPACE_MOVER
      eccentricity 0.0
      semi_major_axis 8000 km
      inclination 1 deg
      raan 0 deg

      maneuvering simple
         maximum_acceleration 2 g
      end_maneuvering

      mission_sequence
         maneuver tangent
            execute_at relative_time 100 s
            delta_v 100.0 m/s
         end_maneuver
      end_mission_sequence

      integrator prince_dormand_45
         tolerance 1.0e-11
      end_integrator

      dynamics
         term earth_monopole
            egm96
         end_term
      end_dynamics
   end_mover

   execute at_time 30 min absolute
      WsfSpaceMover mover = ((WsfSpaceMover)PLATFORM.Mover());
      WsfOrbitalManeuver maneuver = WsfTangentManeuver.Construct(WsfOrbitalEventCondition.NONE(), 100.0);
      bool result = mover.ExecuteManeuver(maneuver);
      if(result){
         writeln("tangent: true");
      } else {
         writeln("tangent: false");
      }
   end_execute
end_platform

script_variables
   double sSpeed = 0.0;
   int sNumCompleted = 0;
end_script_variables

script void OrbitalManeuverInitiated(WsfPlatform        aPlatform,
                                     WsfSpaceMover      aSM,
                                     WsfOrbitalManeuver aManeuver)
   writeln(TIME_NOW / 60.0, "; begin ", aManeuver.ManeuverType());
   sSpeed = aSM.Platform().Speed();
end_script

script void OrbitalManeuverCompleted(WsfPlatform        aPlatform,
                                     WsfSpaceMover      aSM,
                                     WsfOrbitalManeuver aManeuver)
   writeln(TIME_NOW / 60.0, "; end ", aManeuver.ManeuverType());
   double newSpeed = aSM.Platform().Speed();
   double deltaSpeed = newSpeed - sSpeed;
   writeln("NewSpeed ", newSpeed, " initial: ", sSpeed, " delta:", deltaSpeed);
   if ((deltaSpeed < 99.99) || (deltaSpeed > 100.01))
   {
      writeln("-FAIL-");
   }
   sNumCompleted += 1;
end_script

script void SimulationComplete()
   if (sNumCompleted != 2)
   {
      writeln("-FAIL- ", sNumCompleted);
   }
   else
   {
      writeln("-PASS-");
   }
end_script

observer
   enable ORBITAL_MANEUVER_INITIATED OrbitalManeuverInitiated
   enable ORBITAL_MANEUVER_COMPLETED OrbitalManeuverCompleted
   enable SIMULATION_COMPLETE
end_observer
