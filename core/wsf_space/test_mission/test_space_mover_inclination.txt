# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

end_time 6 hours

script_debug_writes disable

script_variables
   double sTol = 0.001;
   int    sNumCompleted = 0;
   int    mNumInitiated = 0;
   bool   mTestFailed = false;
end_script_variables

platform_type TEST-INCLINATION WSF_PLATFORM

   script_variables
      double mInclination1 = 0;
      double mInclination2 = 0;
      int    mNumCompleted = 0;
   end_script_variables

   icon satellite
   side blue
   mover WSF_SPACE_MOVER
      semi_major_axis 7000 km
      eccentricity 0.0
      inclination 0.0 deg    
      raan 30 deg
      argument_of_periapsis 40 deg  
   end_mover

   execute at_time 1 hr absolute
      WsfSpaceMover mover = ((WsfSpaceMover)PLATFORM.Mover());
      WsfOrbitalManeuver inclinationManeuver = WsfChangeInclination.Construct(
         WsfOrbitalEventCondition.AT_ASCENDING_NODE(), mInclination2);
      bool result = mover.ExecuteManeuver(inclinationManeuver);
      if(result){
         writeln_d("Change inclination: true");
      } else {
         writeln_d("Change inclination: false");
      }
      static int platformNum = 0;
      platformNum += 1;
      writeln_d("Scheduling maneuver # ", platformNum);

   end_execute

end_platform_type

platform_type TEST-INCLINATION-1 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.0;
   end_script_variables
   edit mover
      inclination 0 deg
      eccentricity 0.0
   end_mover
end_platform_type

platform_type TEST-INCLINATION-2 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.0;
   end_script_variables
   edit mover
      inclination 30 deg
      eccentricity 0.0
   end_mover
end_platform_type

platform_type TEST-INCLINATION-3 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.0;
   end_script_variables
   edit mover
      inclination 120 deg
      eccentricity 0.0
   end_mover
end_platform_type

platform_type TEST-INCLINATION-4 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.0;
   end_script_variables
   edit mover
      inclination 180 deg
      eccentricity 0.0
   end_mover
end_platform_type


platform_type TEST-INCLINATION-5 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.1;
   end_script_variables
   edit mover
      inclination 0 deg
      eccentricity 0.1
   end_mover
end_platform_type

platform_type TEST-INCLINATION-6 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.1;
   end_script_variables
   edit mover
      inclination 30 deg
      eccentricity 0.1
   end_mover
end_platform_type

platform_type TEST-INCLINATION-7 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.1;
   end_script_variables
   edit mover
      inclination 120 deg
      eccentricity 0.1
   end_mover
end_platform_type

platform_type TEST-INCLINATION-8 TEST-INCLINATION
   script_variables
      double mEccentricity = 0.1;
   end_script_variables
   edit mover
      inclination 180 deg
      eccentricity 0.1
   end_mover
end_platform_type


on_initialize
   // create combinations for inclination changes.
   // Initial change is to a start inclination (input-based).
   // Final change is to an end inclination (script-based).
   // Inner loop is changing the initial conditions
   for (int start = 0; start <= 180; start = start + 30)
   {
      for (int end = 0; end <= 180; end = end + 30)
      {
         for (int i = 1; i <= 8; i = i + 1)
         {
            string platform_type = write_str("TEST-INCLINATION-",i);
            WsfPlatform p = WsfSimulation.CreatePlatform(platform_type);
            string si = "script_variables " + 
                        "mInclination1 = " + (string)start + "; " +
                        "mInclination2 = " + (string)end   + "; " +
                        "end_script_variables";
            p.ProcessInput(si);
            string inputManeuver = "mission_sequence maneuver change_inclination inclination " + (string)start + " deg execute_at descending_node end_maneuver end_mission_sequence";
            p.ProcessInput(inputManeuver);
            string name = "test-inclination-" + (string)i + ":" + (string)start + "-" + (string)end;
            WsfSimulation.AddPlatform(p, name);
            static int platformNum = 0;
            platformNum += 1;
            writeln_d("Platform ", platformNum, " created.");         
         }
      }   
   }
end_on_initialize

script void OrbitalManeuverInitiated(WsfPlatform        aPlatform,
                                     WsfSpaceMover      aSM,
                                     WsfOrbitalManeuver aManeuver)
   mNumInitiated += 1;
   writeln_d(TIME_NOW / 60.0, "; begin ", aManeuver.ManeuverType());
end_script

script void OrbitalManeuverCompleted(WsfPlatform        aPlatform,
                                     WsfSpaceMover      aSM,
                                     WsfOrbitalManeuver aManeuver)
   writeln_d(TIME_NOW / 60.0, "; end ", aManeuver.ManeuverType());
   writeln_d(aSM.Inclination());
   double newInc = aSM.Inclination();
   double newEcc = aSM.Eccentricity();
   

   if (aPlatform->mNumCompleted == 0)
   {
      if ((newInc < (aPlatform->mInclination1 - sTol)) || (newInc > (aPlatform->mInclination1 + sTol)))
      {
         writeln("-FAIL- Inclination not achieved after first maneuver for platform ", aPlatform.Name());
         mTestFailed = true;
      }
      if ((newEcc < (aPlatform->mEccentricity - sTol)) || (newEcc > (aPlatform->mEccentricity + sTol)))
      {
         writeln("-FAIL- Eccentricity does not match after first maneuver for platform ", aPlatform.Name());
         mTestFailed = true;
      }
   }
   else if (aPlatform->mNumCompleted == 1)
   {
      if ((newInc < (aPlatform->mInclination2 - sTol)) || (newInc > (aPlatform->mInclination2 + sTol)))
      {
         writeln("-FAIL- Inclination not achieved after second maneuver for platform ", aPlatform.Name());
         mTestFailed = true;
      }
      if ((newEcc < (aPlatform->mEccentricity - sTol)) || (newEcc > (aPlatform->mEccentricity + sTol)))
      {
         writeln("-FAIL- Eccentricity does not match after second maneuver for platform ", aPlatform.Name());
         mTestFailed = true;
      }      
   }
   aPlatform->mNumCompleted += 1;
   sNumCompleted += 1;
end_script

script void SimulationComplete()
   if (sNumCompleted != mNumInitiated)
   {
      writeln("-FAIL- Not all maneuvers completed ", sNumCompleted, " ", mNumInitiated);
   }
   else if (mTestFailed)
   {
      writeln("-FAIL- One or more tests failed");
   }
   else
   {
      writeln("-PASS-");
   }
end_script

observer
   enable ORBITAL_MANEUVER_INITIATED OrbitalManeuverInitiated
   enable ORBITAL_MANEUVER_COMPLETED OrbitalManeuverCompleted
   enable SIMULATION_COMPLETE
end_observer

#event_pipe file inclination.aer
#end_event_pipe
