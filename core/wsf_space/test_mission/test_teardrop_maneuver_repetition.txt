# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# This test performs teardrop maneuvers with various parameters and tests the
# resulting performance. In particular, the RIC positions at the point of closest
# approach (POCA), and the two times when the teardrop relative orbit crosses
# itself.

start_date jan 20 2021
start_time 12:00:00.000
end_time 6 hr

include utils.txt

platform_type TEST_SAT WSF_PLATFORM
   empty_mass 1 kg

   mover WSF_INTEGRATING_SPACE_MOVER
      integrator prince_dormand_78
         error_criterion L_infinity
         tolerance 1.0e-9
      end_integrator

      dynamics
         term earth_monopole
         end_term
      end_dynamics
   end_mover
end_platform_type

platform chief TEST_SAT
   edit mover
      eccentricity 0.0
      inclination 35 deg
      raan 0 deg
      argument_of_periapsis 0 deg
      revs_per_day 12
      true_anomaly 0 deg
   end_mover
end_platform

// These must match those in the maneuver in tear_fixed
script_variables
   double gR_POCA = -10.0;
   double gPeriod = 30.0 * 60.0;
   double gT_POCA = 60.0 * 60.0;
   double gReps   = 5;
   int    gExecutions = 0;
end_script_variables

platform tear_fixed TEST_SAT
   edit mover
      eccentricity 0.1
      inclination 36 deg
      raan 359 deg
      argument_of_periapsis 90 deg
      revolutions_per_day 12
      true_anomaly 268 deg

      mission_sequence
         maneuver teardrop
            delta_time 10 min
            period 30 min
            radial_offset_at_poca -10 m
            time_to_poca 1 hr
            target_platform chief
            repetitions 5
         end_maneuver
      end_mission_sequence
   end_mover
end_platform

script void TestAtPOCA(string aPlatformName)
   WsfPlatform plat = WsfSimulation.FindPlatform(aPlatformName);
   WsfSpaceMover mover = (WsfSpaceMover)plat.Mover();

   WsfPlatform chief = WsfSimulation.FindPlatform("chief");
   WsfSpaceMover chiefMover = (WsfSpaceMover)chief.Mover();
   Vec3 ricOffset = chiefMover.RIC(plat);

   ExpectDouble(ricOffset.X(), gR_POCA, 1.0e-4, "R at POCA matches expectation: " + aPlatformName);
   ExpectDouble(ricOffset.Y(), 0.0, 1.0e-4, "I at POCA matches expectation: " + aPlatformName);
   ExpectDouble(ricOffset.Z(), 0.0, 1.0e-7, "C at POCA matches expectation: " + aPlatformName);
end_script

script void CollectAtFirstCrossing(string aPlatformName)
   WsfPlatform chief = WsfSimulation.FindPlatform("chief");
   WsfSpaceMover mover = (WsfSpaceMover)chief.Mover();
   WsfPlatform plat = WsfSimulation.FindPlatform(aPlatformName);
   Array<Object> args = {aPlatformName, mover.RIC(plat), 1};

   WsfSimulation.ExecuteAtTime(TIME_NOW + gPeriod, "TestAtSecondCrossing", args);
end_script

script void TestAtSecondCrossing(string aPlatformName, Vec3 aCrossingPosRIC, int aRepetition)
   WsfPlatform chief = WsfSimulation.FindPlatform("chief");
   WsfSpaceMover mover = (WsfSpaceMover)chief.Mover();
   WsfPlatform plat = WsfSimulation.FindPlatform(aPlatformName);
   Vec3 posRIC = mover.RIC(plat);

   ExpectDouble(posRIC.X(), aCrossingPosRIC.X(), 1.0e-3, "Crossing RIC position R for " + aPlatformName);
   ExpectDouble(posRIC.Y(), aCrossingPosRIC.Y(), 1.0e-2, "Crossing RIC position I for " + aPlatformName);
   ExpectDouble(posRIC.Z(), aCrossingPosRIC.Z(), 1.0e-7, "Crossing RIC position C for " + aPlatformName);

   gExecutions += 1;

   if (aRepetition < gReps)
   {
      Array<Object> args = {aPlatformName, aCrossingPosRIC, aRepetition + 1};
      WsfSimulation.ExecuteAtTime(TIME_NOW + gPeriod, "TestAtSecondCrossing", args);
   }
end_script

script void BeginTestSequence(WsfPlatform aPlatform, WsfSpaceMover aMover, WsfOrbitalManeuver aManeuver)
   if (aManeuver.ManeuverType() == "MATCH_VELOCITY")
   {
      // setup test a POCA
      Array<Object> testArgs = {aPlatform.Name()};
      WsfSimulation.ExecuteAtTime(TIME_NOW + gT_POCA, "TestAtPOCA", testArgs);

      // setup collection before POCA
      Array<Object> collectArgs = {aPlatform.Name()};
      WsfSimulation.ExecuteAtTime(TIME_NOW + gT_POCA - gPeriod / 2.0,
                                  "CollectAtFirstCrossing",
                                  collectArgs);
   }
end_script

script void TestCount()
   ExpectInt(gExecutions, gReps, "Did not test the crossing the correct number of times");
end_script

observer
   enable ORBITAL_MANEUVER_COMPLETED BeginTestSequence
   enable SIMULATION_COMPLETE TestCount
end_observer
