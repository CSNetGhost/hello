# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

script_variables
   double sTol = 0.1;
   int sNumCompleted = 0;
end_script_variables

platform target WSF_PLATFORM
   empty_mass 1 kg
   
   add mover WSF_INTEGRATING_SPACE_MOVER
      semi_major_axis 20000 km
      eccentricity 0.2
      inclination  2 deg
      mean_anomaly 2 deg
      argument_of_periapsis 0 deg
      raan 0 deg
      
      integrator prince_dormand_45
         tolerance 1.0e-11
      end_integrator
      
      dynamics
         term earth_monopole
            egm96
         end_term
      end_dynamics
   end_mover
end_platform

platform chaser-input WSF_PLATFORM
   empty_mass 100 kg

   add mover WSF_INTEGRATING_SPACE_MOVER
      semi_major_axis 20000 km
      eccentricity 0.2
      inclination  0 deg
      mean_anomaly 1 deg
      argument_of_periapsis 0 deg
      raan 0 deg

      mission_sequence
         maneuver rendezvous
            target
               platform target
            end_target
            optimize_time
            maximum_time 2000.0 s
            maximum_delta_v 2000.0 m/s
            execute_at relative_time 310 s
            tolerance 1.0e-9
         end_maneuver
      end_mission_sequence

      integrator prince_dormand_45
         tolerance 1.0e-11
      end_integrator

      dynamics
         term earth_monopole
            egm96
         end_term
      end_dynamics
   end_mover
end_platform

script void OrbitalManeuverInitiated(WsfPlatform        aPlatform,
                                     WsfSpaceMover      aSM,
                                     WsfOrbitalManeuver aManeuver)
   writeln(TIME_NOW, "; begin ", aManeuver.ManeuverType());
end_script

script void CheckIntercept(WsfPlatform aPlatform)
   bool pass = true;
   Vec3 loc1 = aPlatform.LocationECI();
   Vec3 loc2 = WsfSimulation.FindPlatform("target").LocationECI();
   Vec3 deltaDistance = Vec3.Subtract(loc2, loc1);
   double ddist = deltaDistance.Magnitude();
   Vec3 vel1 = aPlatform.VelocityECI();
   Vec3 vel2 = WsfSimulation.FindPlatform("target").VelocityECI();
   if (ddist > sTol)
   {
      writeln("-FAIL- distance too large: ", ddist);
      pass = false;
   }
   Vec3 deltaVel = Vec3.Subtract(vel2, vel1);
   double dvelMag = deltaVel.Magnitude();
   if (dvelMag > sTol)
   {
      writeln("-FAIL- speed too large: ", dvelMag);
      pass = false;
   }
   if (pass)
   {
      writeln("-PASS- ", aPlatform.Name(), ": ddist ", ddist, " dvelMag: ", dvelMag);
   }
end_script

script void OrbitalManeuverCompleted(WsfPlatform        aPlatform,
                                     WsfSpaceMover      aSM,
                                     WsfOrbitalManeuver aManeuver)
   writeln(TIME_NOW, "; end ", aManeuver.ManeuverType());
   sNumCompleted += 1;
   if (aManeuver.Type() == "RENDEZVOUS")
   {
      CheckIntercept(aPlatform);
   }
end_script

script void SimulationComplete()
   if (sNumCompleted != 3)
   {
      writeln("-FAIL- ", sNumCompleted);
   }
   else
   {
      writeln("-PASS-");
   }
end_script

observer
   enable ORBITAL_MANEUVER_INITIATED OrbitalManeuverInitiated
   enable ORBITAL_MANEUVER_COMPLETED OrbitalManeuverCompleted
   enable SIMULATION_COMPLETE
end_observer

start_date jun 24 2016
start_time 12:00:00
end_time 1000 s
