.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

Initial Orbital Elements Methods
================================

This set of methods provides access to the initial orbital elements used to
define the platform.

.. method:: Calendar InitialEpoch()

   Return the epoch of the initial orbital elements.

.. method:: double InitialArgumentOfPeriapsis()

   Return the argument of periapsis in degrees of the initial orbital elements.

.. method:: double InitialEccentricity()

   Return the eccentricity of the initial orbital elements.

.. method:: double InitialInclination()

   Return the inclination in degrees of the initial orbital elements.

.. method:: double InitialMeanAnomaly()

   Return the mean anomaly in degrees of the initial orbital elements.

.. method:: double InitialMeanMotion()

   Return the mean motion in degrees per second of the initial orbital
   elements.

.. method:: double InitialRAAN()

   Return the RAAN in degrees of the initial orbital elements.

.. method:: double InitialSemiMajorAxis()

   Return the semi-major axis in meters of the initial orbital elements.

.. method:: double InitialTrueAnomaly()

   Return the true anomaly in degrees of the initial orbital elements.

.. method:: WsfGeoPoint InitialPositionLLA()

   Return the initial LLA position.

.. method:: Vec3 InitialPositionECI()

   Return the initial ECI position.

.. method:: Vec3 InitialPositionWCS()

   Return the initial WCS position.

.. method:: Vec3 InitialVelocityECI()

   Return the initial ECI velocity.

.. method:: Vec3 InitialVelocityWCS()

   Return the initial WCS velocity.

.. method:: double InitialHeading()

   Return the initial heading in degrees, computed from the initial velocity of the satellite:

   .. math::

      \theta = \arctan{V_e / V_n}

   where:

      * :math:`V_e` is the "East" component of the satellite's initial NED velocity vector
      * :math:`V_n` is the "North" component of the satellite's initial NED velocity vector
