.. ****************************************************************************
.. CUI//REL TO USA ONLY
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

.. _antenna_pattern.alarm_pattern:

ALARM Antenna Pattern File
**************************

.. parsed-literal::

 antenna_pattern *<pattern-name>*
    alarm_pattern
       file_ *<file-name>*
       gain_correction_ <db-ratio-value>

       # `Common Commands`_

       :command:`antenna_pattern.minimum_gain` <db-ratio-value>
       polarization_  [horizontal|vertical|default]
       :command:`antenna_pattern.gain_adjustment` <db-ratio-value>
       :command:`antenna_pattern.gain_adjustment_table` ... end_antenna_pattern.gain_adjustment_table
    end_alarm_pattern
 end_antenna_pattern

Defines a pattern using an ALARM antenna pattern definition file.

.. block:: antenna_pattern.alarm_pattern

.. command:: file <file-name>

   The name of the file containing the antenna pattern definition. :command:`file_path` processing will be applied to the value.

.. command:: gain_correction <db-ratio-value>

   An synonym for the :command:`antenna_pattern.gain_adjustment` command.

.. command:: polarization [horizontal|vertical|default]

   Provide a polarization to match one or more polarizations specified in the antenna pattern file.  This input is only necessary if polarizations are specified in the antenna pattern file; otherwise it should be omitted.

.. _antenna_pattern.genap_pattern:

GENAP Pattern
*************

.. parsed-literal::

 antenna_pattern *<pattern-name>*
    genap_pattern
       peak_gain <db-ratio-value>
       aperture_shape [ rectangular | elliptical | circular ]
       azimuth_distribution [ uniform | cosine | bw/sll ]
       azimuth_beamwidth <angle-value>
       azimuth_exponent [ 1 .. 4 ]
       azimuth_side_lobe_level <*db-ratio of 15 db to 55 db*>
       elevation_distribution [ uniform | cosine | bw/sll | cosecant ]
       elevation_beamwidth <angle-value>
       elevation_exponent [ 1 .. 4 ]
       elevation_side_lobe_level <*db-ratio of 15 db to 55 db*>
       elevation_cosecant_limit <angle-value>
       elevation_beamwidth <angle-value>

       # `Common Commands`_

       :command:`antenna_pattern.minimum_gain` <db-ratio-value>
       :command:`antenna_pattern.gain_adjustment` <db-ratio-value>
       :command:`antenna_pattern.gain_adjustment_table` ... end_gain_adjustment`table
 end_antenna_pattern

The general antenna GENAP pattern is derived from the Technical Radar Analysis and Modeling TRAMS radar analysis system. It allows definition an antenna pattern using several different methods.

.. block:: antenna_pattern.genap_pattern

.. _antenna_pattern.complex_esa_pattern:

Complex Electronic Steered/Scanned Array Pattern
************************************************

This is an extension to the base :ref:`antenna_pattern.esa_pattern` to include edge angle modifications and array subdivision for multiple beamforming applications requiring array subdivision.

.. parsed-literal::

 antenna_pattern *<pattern-name>*
    complex_esa_pattern
       ... :ref:`Base ESA Commands <antenna_pattern.esa_pattern>` ...
       ... `Common Commands`_ ...

       edge_angle_x_ <angle-value>
       edge_angle_y_ <angle-value>
       array_subdivision_table_ ... end_subdivision_table
 end_antenna_pattern

The complex electronic steered/scanned array antenna pattern is an MxN array defined in the x-y plane (x is in the azimuth direction, y is in the elevation direction).

.. note::

   Beam steering loss is accounted for by default and can be modified by the input commands provided for in the :ref:`Antenna_commands` section.

.. note::

   This antenna pattern is generated by looping over all the elements to sum each element's contribution and phasing information. Therefore it has an N^2 computational complexity and may not be suitable when performance is a concern, for example in applications with realtime constraints.

.. This makes the following commands part of antenna_pattern.complex_esa_pattern, not global


.. block:: antenna_pattern.complex_esa_pattern

**Edge Angle Pictorial Description**

.. figure:: ./images/edgeangles.jpg

.. command:: edge_angle_x <angle-value>

   The element rotational shift about the Z-axis with respect to the x-axis. See Edge Angle Pictorial above.

   **Default:** 0 degrees

.. command:: edge_angle_y <angle-value>

   The element rotational shift about the Z-axis with respect to the y-axis with angle specified from the x-axis.
   See Edge Angle Pictorial above.

   **Default:** 90 degrees

.. command:: array_subdivision_table  ... end_array_subdivision_table
   :block:

   This block defines the X and Y subdivision ratios as a function of the beam count. When the system has multiple beams
   defined then the array is subdivided per the ratios in the table. Format is as follows:

   .. parsed-literal::
    array_subdivision_table
       beam_count_ 1 <x-ratio> <y-ratio>
       beam_count_ 2 <x-ratio> <y-ratio>
       ...
       beam_count_ N <x-ratio> <y-ratio>
    end_array_subdivision_table

   .. command:: beam_count  <beam-count-integer-value> <x-ratio> <y-ratio>

      Specifies the beam count and ratios to apply in the x & y direction respectively. The array length and/or number of elements will be divided by this ratio. The <beam-count-integer-value> should be in the range [1, 2, .., N] in increasing order. The ratios must be greater than 0.0 and less than or equal to 1.0 .

   .. note::
      Currently this functionality is only available in :model:`WSF_RF_JAMMER` systems with multiple beams defined.

   .. note::
      A value for each beam count that the system can create should be accounted for in the 'beam_count' table.

   **Default:** No array subdividing

.. _antenna_pattern.element_esa_pattern:

Element Electronic Steered/Scanned Array (ESA) Pattern
******************************************************

This is an extension to the base :ref:`antenna_pattern.esa_pattern` to allow for input of the element locations and associated distribution weightings of each element.

.. parsed-literal::

 antenna_pattern *<pattern-name>*
    element_esa_pattern
       ... :ref:`Base ESA Commands <antenna_pattern.esa_pattern>` ...
       ... `Common Commands`_ ...

       aperture_efficiencies_ <efficiency-value-x real-value> <efficiency-value-y real-value>
       aperture_efficiency_ <real-value>
       average_element_spacing_x_ <length-value>
       average_element_spacing_y_ <length-value>
       element_locations_ ... end_element_locations
 end_antenna_pattern

The element electronic steered/scanned array antenna pattern is a user-defined array in the [x, y, z] plane (x is in the azimuth direction, y is in the elevation direction and z is in the depth direction, per the right hand rule).

.. note::
   Beam steering loss is accounted for by default and can be modified by the input commands provided for in the :ref:`Antenna_commands` section.

.. note::
   This antenna pattern is generated by looping over all the elements to sum each element's contribution and phasing information. Therefore it has an N^2 computational complexity and may not be suitable when performance is a concern, for example in applications with realtime constraints.

.. block:: antenna_pattern.element_esa_pattern

.. command:: aperture_efficiencies <real-value> <real-value>

   Specifies the value for the aperture efficiencies for the horizontal and vertical (x-y) planes respectively, from 0 to 1.

   **Default:** 1

.. command:: aperture_efficiency <real-value>

   Specifies the single value for the aperture efficiency in the horizontal and vertical (x-y) plane from 0 to 1.

   **Default:** 1

.. command:: average_element_spacing_x <length-value>

   The average horizontal element spacing for the array. Requires number_elements_x_ OR length_x_ to be defined.

.. command:: average_element_spacing_y <length-value>

   The average vertical element spacing for the array. Requires number_elements_y_ OR length_y_ to be defined.

.. command:: element_locations  ... end_element_locations
   :block:

   A list/table of the element locations and associated weight of the element. Formatting is as follows::

    element_locations
      <element-location-x-1> <element-location-y-1> <element-location-z-1> <element-phi-1> <element-theta-1> <distribution-weighting-value-1>
      <element-location-x-2> <element-location-y-2> <element-location-z-2> <element-phi-2> <element-theta-2> <distribution-weighting-value-2>
      ...
      <element-location-x-N> <element-location-y-N> <element-location-z-N> <element-phi-N> <element-theta-N> <distribution-weighting-value-N>
    end_element_locations

* **<element-location-x>**, **<element-location-y>** and **<element-location-z>**: Each is :argtype:`length-value` and specifies the element location with respect to the center of the array at (x,y,z) = (0,0,0).
* **<element-phi>** and **<element-theta>**: Each is :argtype:`angle-value` and are used in the calculation of the element normal direction from the array's reference normal.
* **<distribution-weighting-value>**: A :argtype:`real-value` that specifies the distribution weighting value for the specified location/element. Similar to the distribution type of the base ESA pattern, but it is specified instead of calculated for this type of pattern.
