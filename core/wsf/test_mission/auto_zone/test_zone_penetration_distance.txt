# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# Test of simple zone penetration distance (actually tests underlying intersect mesh geometry).

script void TestPenetration(WsfZone     aZone,
                            WsfGeoPoint p1,
                            WsfGeoPoint p2,
                            bool        shouldPenetrate)
   static int sTestNum = 1;
   double penetration = aZone.PenetrationDistance(p1, p2);
   bool didPenetrate = (penetration > 0.0);
   if (didPenetrate == shouldPenetrate)
   {
      write(" (-PASS-)");
   }
   else
   {
      write(" (-FAIL-)");
   }
   writeln(" Penetration ", sTestNum, ": ", penetration);
   sTestNum += 1;
end_script

script void TestCircular()
      WsfZone c = WsfZone.FindZone("circular");
      WsfGeoPoint p40 = WsfGeoPoint.Construct(44.8, -90.00, 6000.0);
      WsfGeoPoint p41 = WsfGeoPoint.Construct(45.2, -90.00, 6000.0);
      WsfGeoPoint p42 = WsfGeoPoint.Construct(44.8, -89.00, 6000.0);
      WsfGeoPoint p43 = WsfGeoPoint.Construct(45.2, -91.00, 6000.0);
      WsfGeoPoint p44 = WsfGeoPoint.Construct(45.0, -90.00, 4999.0);
      WsfGeoPoint p45 = WsfGeoPoint.Construct(45.2, -90.00, 6000.0);
      TestPenetration(c, p42, p43, true);
      TestPenetration(c, p44, p45, true);
      TestPenetration(c, p40, p41, true);
end_script

script void TestSpherical()
    WsfZone s = WsfZone.FindZone("spherical");

      WsfGeoPoint p60 = WsfGeoPoint.Construct(-1, -90, 2000.0);
      WsfGeoPoint p61 = WsfGeoPoint.Construct(1, -90, 2000.0);
      WsfGeoPoint p62 = WsfGeoPoint.Construct(0, -90, 500.0);
      WsfGeoPoint p63 = WsfGeoPoint.Construct(0, -90, 2000.0);
      WsfGeoPoint p64 = WsfGeoPoint.Construct(0, -90, 0.0);
      WsfGeoPoint p65 = WsfGeoPoint.Construct(0, -90, 20000.0);
      WsfGeoPoint p66 = WsfGeoPoint.Construct(0.0, -89.9, 20000.0);
      WsfGeoPoint p67 = WsfGeoPoint.Construct(0.0, -90.1, 20000.0);
      WsfGeoPoint p68 = WsfGeoPoint.Construct(0.0, -89.9, 18520.0);
      WsfGeoPoint p69 = WsfGeoPoint.Construct(0.0, -90.1, 18520.0);

      TestPenetration(s, p68, p69, true);
      TestPenetration(s, p66, p67, false);
      TestPenetration(s, p60, p61, true);
      TestPenetration(s, p64, p65, true);
      TestPenetration(s, p65, p64, true);
      TestPenetration(s, p62, p63, true);
end_script

zone elliptical
   elliptical
   heading 0 deg
   longitudinal_axis 20000 meters
   lateral_axis 10000 meters
   lat_lon
   position 45n 0e
   minimum_altitude 5000 meters
   maximum_altitude 10000 meters
end_zone

script void TestElliptical()
      WsfZone e = WsfZone.FindZone("elliptical");
      WsfGeoPoint p48 = WsfGeoPoint.Construct(45, -1, 6000.0);
      WsfGeoPoint p49 = WsfGeoPoint.Construct(45, 1, 6000.0);
      WsfGeoPoint p50 = WsfGeoPoint.Construct(44, 0, 6000.0);
      WsfGeoPoint p51 = WsfGeoPoint.Construct(46, 0, 6000.0);
      WsfGeoPoint p52 = WsfGeoPoint.Construct(44.2, -0.05, 6000.0);
      WsfGeoPoint p53 = WsfGeoPoint.Construct(46.2, -0.05, 6000.0);
      WsfGeoPoint p54 = WsfGeoPoint.Construct(45.0, 0.0, 4999.0);
      WsfGeoPoint p55 = WsfGeoPoint.Construct(46.0, 1.0, 6000.0);
      WsfGeoPoint p56 = WsfGeoPoint.Construct(45.0, 0.0, 4999.0);
      WsfGeoPoint p57 = WsfGeoPoint.Construct(46.0, 1.0, 6000.0);
      WsfGeoPoint p58 = WsfGeoPoint.Construct(45.04495, -1.0, 10500);
      WsfGeoPoint p59 = WsfGeoPoint.Construct(45.04495,  1.0, 6000);
      TestPenetration(e, p58, p59, true);
      TestPenetration(e, p48, p49, true);
      TestPenetration(e, p50, p51, true);
      TestPenetration(e, p52, p53, true);
      TestPenetration(e, p54, p55, true);
      TestPenetration(e, p55, p54, true);

end_script

script void TestPolygonal()
      WsfZone hz = WsfZone.FindZone("square");


      WsfGeoPoint p1 = WsfGeoPoint.Construct(-45.0, 89.1, 1500.0);
      WsfGeoPoint p2 = WsfGeoPoint.Construct(-45.0, 91.9, 2500.0);

      WsfGeoPoint p3 = WsfGeoPoint.Construct(-45.0, 89, 5000.0);
      WsfGeoPoint p4 = WsfGeoPoint.Construct(-45.0, 91, 5000.0);

      WsfGeoPoint p23 = WsfGeoPoint.Construct(-45.0, 89, 3000.0);
      WsfGeoPoint p24 = WsfGeoPoint.Construct(-45.0, 91, 3000.0);

      WsfGeoPoint p5 = WsfGeoPoint.Construct(-46, 90, 3000.0);
      WsfGeoPoint p6 = WsfGeoPoint.Construct(-44, 90, 3000.0);

      WsfGeoPoint p7 = WsfGeoPoint.Construct(-46, 90, 5000.0);
      WsfGeoPoint p8 = WsfGeoPoint.Construct(-44, 90, 5000.0);

      WsfGeoPoint p9 = WsfGeoPoint.Construct(-45, 90.01, 000.0);
      WsfGeoPoint p10 = WsfGeoPoint.Construct(-45, 90, 60000.0);

      WsfGeoPoint p11 = WsfGeoPoint.Construct(-42.9, 90, 000.0);
      WsfGeoPoint p12 = WsfGeoPoint.Construct(-42.9, 90, 6000.0);

      WsfGeoPoint p13 = WsfGeoPoint.Construct(-45.0, 89, 3001.0);
      WsfGeoPoint p14 = WsfGeoPoint.Construct(-45.0, 91, 3001.0);

      WsfGeoPoint p15 = WsfGeoPoint.Construct(-46, 89, 1000.0);
      WsfGeoPoint p16 = WsfGeoPoint.Construct(44, 91, 3000.0);

      // Near edge, vertical; result should be 2000.
      WsfGeoPoint p25 = WsfGeoPoint.Construct(-45.99, 89.01, 0.0);
      WsfGeoPoint p26 = WsfGeoPoint.Construct(-45.99, 89.01, 5000.0);


      WsfGeoPoint p30 = WsfGeoPoint.Construct(-46.01, 90.00, 3001.0);
      WsfGeoPoint p39 = WsfGeoPoint.Construct(-45, 90.00, 0.0);
      TestPenetration(hz, p26, p25, true);
      TestPenetration(hz, p2, p1, true);
      TestPenetration(hz, p1, p2, true);
      TestPenetration(hz, p3, p4, false);
      TestPenetration(hz, p4, p3, false);
      TestPenetration(hz, p23, p24, true);
      TestPenetration(hz, p5, p6, true);
      TestPenetration(hz, p11, p12, false);
      TestPenetration(hz, p30, p39, true);
      TestPenetration(hz, p10, p24, false);

      TestPenetration(hz, p9, p10, true);
      TestPenetration(hz, p10, p9, true);
      TestPenetration(hz, p7, p8, false);
      TestPenetration(hz, p13, p14, false);
      TestPenetration(hz, p15, p16, true);


      WsfZone oz = WsfZone.FindZone("octagon");
      WsfZone p = WsfZone.FindZone("polar");

      WsfGeoPoint p31 = WsfGeoPoint.Construct(-5, -3.01, 3000.0);
      WsfGeoPoint p32 = WsfGeoPoint.Construct( 5, -3.01, 3000.0);
      TestPenetration(p, p31, p32, false);  // should print a warning.
      WsfGeoPoint p70 = WsfGeoPoint.Construct(-5,  0, 15000.0);
      WsfGeoPoint p71 = WsfGeoPoint.Construct( 5,  0, 15000.0);
      TestPenetration(oz, p70, p71, false);

      WsfGeoPoint p17 = WsfGeoPoint.Construct(-5, 0, 3000.0);
      WsfGeoPoint p18 = WsfGeoPoint.Construct( 5, 0, 3000.0);
      TestPenetration(oz, p17, p18, true);
      WsfGeoPoint p19 = WsfGeoPoint.Construct(-5, -3, 3000.0);
      WsfGeoPoint p20 = WsfGeoPoint.Construct( 5, -3, 3000.0);
      TestPenetration(oz, p19, p20, true);
      WsfGeoPoint p21 = WsfGeoPoint.Construct(-5, -3.01, 3000.0);
      WsfGeoPoint p22 = WsfGeoPoint.Construct( 5, -3.01, 3000.0);
      TestPenetration(oz, p21, p22, false);

      WsfZone dl = WsfZone.FindZone("dateline");
      WsfGeoPoint p33 = WsfGeoPoint.Construct(10, 179, 2000.0);
      WsfGeoPoint p34 = WsfGeoPoint.Construct(10, 180, 2000.0);
      WsfGeoPoint p35 = WsfGeoPoint.Construct(10, -180, 2000.0);
      WsfGeoPoint p36 = WsfGeoPoint.Construct(10, -179, 2000.0);
      TestPenetration(dl, p33, p34, true);
      TestPenetration(dl, p35, p36, true);
end_script

execute at_time 1.0 sec absolute
   //TestElliptical();
   //TestCircular();
   TestPolygonal();
   TestSpherical();
end_execute

platform dummy WSF_PLATFORM
   position 0n 0e altitude 0.0 ft agl
end_platform

zone square
  polygonal
  start_angle 100 deg
  lat_lon
  sensor_modifier cloud_mod 0.1
  minimum_altitude 1000 m
  maximum_altitude 3000 m
   point 46s 89e
   point 44s 89e
   point 44s 91e
   point 46s 91e
end_zone

zone octagon
  polygonal
  lat_lon
  sensor_modifier cloud_mod 0.1
  minimum_altitude 1000 m
  maximum_altitude 3000 m
   point 3s 1w
   point 1s 3w
   point 1n 3w
   point 3n 1w
   point 3n 1e
   point 1n 3e
   point 1s 3e
   point 3s 1e
   heading 20 degrees
end_zone

zone polar
   polygonal
   reference_platform dummy
   sensor_modifier cloud_mod 0.1
   polar
   point 30 degrees 10000 meters
   point 90 degrees 10000 meters
   point 120 degrees 10000 meters
   point 180 degrees 10000 meters
   point 270 degrees 10000 meters
end_zone

zone dateline
   lat_lon
   minimum_altitude 1000 m
   maximum_altitude 3000 m
   negative
   point 10s 179w
   point 10n 179w
   point 10n 179e
   point 10s 179e
end_zone

zone circular
   circular
   minimum_radius 100 m
   sensor_modifier cloud_mod 0.1
   maximum_radius 10 km
   lat_lon
   position 45n 90w
   minimum_altitude 5000 meters
   maximum_altitude 10000 meters
end_zone

zone spherical
   spherical
   minimum_altitude 0000 m
   maximum_altitude 22000 m
   maximum_radius 18520 meters
   lat_lon
   position 0n 90w
end_zone
