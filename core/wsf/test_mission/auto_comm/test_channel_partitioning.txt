# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

#         1         2         3         4         5         6         7
#234567890123456789012345678901234567890123456789012345678901234567890123456789
###############################################################################
#
###############################################################################
/* WSF_COMM_TODO
include_once ../auto_script/test_functions.txt

script_variables

   Map< string, double > msgT1 = Map< string, double >();
   Map< string, double > msgT2 = Map< string, double >();

   Map< string, double > msgR1 = Map< string, double >();
   Map< string, double > msgR2 = Map< string, double >();

end_script_variables

script void MessageReceived(WsfPlatform aPlatformXmtr, WsfComm aXmtr,
                            WsfPlatform aPlatformRcvr, WsfComm aRcvr,
                            WsfMessage aMsg, WsfCommInteraction aResult)

   writeln(TIME_NOW, " Message Received ", aRcvr.Name(), " ", aMsg.SerialNumber());

   // The two message will only get received once in the simulation run
   if (!msgR1.Exists(aXmtr.Name()))
   {
      msgR1.Set(aXmtr.Name(), TIME_NOW);
   }
   else
   {
      msgR2.Set(aXmtr.Name(), TIME_NOW);
   }

end_script

script void MessageTransmitted(WsfPlatform aPlatform, WsfComm aXmtr, WsfMessage aMsg)
   writeln(TIME_NOW, " Message Transmitted ", aXmtr.Name(), " ", aMsg.SerialNumber());

   // The two message will only get transmitted once in the simulation run
   if (!msgT1.Exists(aXmtr.Name()))
   {
      msgT1.Set(aXmtr.Name(), TIME_NOW);
   }
   else
   {
      msgT2.Set(aXmtr.Name(), TIME_NOW);
   }
end_script

script void SimulationComplete()
   writeln("t1:",msgT1);
   writeln("r1:",msgR1);
   writeln("t2:",msgT2);
   writeln("r2:",msgR2);
   foreach (string aKey : double aTime in msgT1)
   {
      double recvTime = msgR2.Get(aKey);
      if ((aKey == "red-net-w1") || (aKey == "red-net-r1"))
      {
         double timeDiff = recvTime - aTime;
         string errStr = "Message delivery error (" + aKey + ")";
         AssertWithinToleranceMessage(4.0, timeDiff, 0.0001, errStr);
      }
      if ((aKey == "red-net-w2") || (aKey == "red-net-r2"))
      {
         double timeDiff = recvTime - aTime;
         string errStr = "Message delivery error (" + aKey + ")";
         AssertWithinToleranceMessage(2.0, timeDiff, 0.0001, errStr);
      }
   }
end_script

observer
   enable MESSAGE_RECEIVED
   enable MESSAGE_TRANSMITTED
   enable SIMULATION_COMPLETE
end_observer

# --------------------------------------------------------------
#                         Vehicle Signatures
# --------------------------------------------------------------
infrared_signature  VEHICLE_INFRARED_SIGNATURE
   constant  10 watts/steradian
end_infrared_signature

optical_signature   VEHICLE_OPTICAL_SIGNATURE
   constant  10 m^2
end_optical_signature

radar_signature     VEHICLE_RADAR_SIGNATURE
   constant  1 m^2
end_radar_signature

# --------------------------------------------------------------
#                         Comm definitions
# --------------------------------------------------------------
comm_network wired-1 WSF_COMM_NETWORK
   transfer_rate 10 bits/sec
end_comm_network

comm_network wired-2 WSF_COMM_NETWORK
   transfer_rate 10 bits/sec
end_comm_network

comm_network radio-1 WSF_COMM_NETWORK
   transfer_rate 10 bits/sec
end_comm_network

comm_network radio-2 WSF_COMM_NETWORK
   transfer_rate 10 bits/sec
end_comm_network

comm RED_COMM_WIRED_1 WSF_COMM_TRANSCEIVER
   link_protocol channel_partition_protocol
end_comm

comm RED_COMM_WIRED_2 WSF_COMM_TRANSCEIVER
   link_protocol channel_partition_protocol
   number_of_channels 2
end_comm

comm RED_COMM_RADIO_1 WSF_RADIO_TRANSCEIVER
   link_protocol channel_partition_protocol
end_comm

comm RED_COMM_RADIO_2 WSF_RADIO_TRANSCEIVER
   link_protocol channel_partition_protocol
   number_of_channels 2
end_comm

message_table
   default_comm_type
      type WSF_TRACK_MESSAGE 20 bits
end_message_table

# --------------------------------------------------------------
# --------------------------------------------------------------
platform_type RED_PLAYER WSF_PLATFORM

   side red

   infrared_signature VEHICLE_INFRARED_SIGNATURE
   optical_signature  VEHICLE_OPTICAL_SIGNATURE
   radar_signature    VEHICLE_RADAR_SIGNATURE

   comm red-net-w1 RED_COMM_WIRED_1
      network_name wired-1
   end_comm

   comm red-net-w2 RED_COMM_WIRED_2
      network_name wired-2
   end_comm

   comm red-net-r1 RED_COMM_RADIO_1
      network_name radio-1
#      transfer_rate 20 bits/sec
      transmitter
         frequency     900.0 mhz
      end_transmitter
   end_comm

   comm red-net-r2 RED_COMM_RADIO_2
      network_name radio-2
#      transfer_rate 20 bits/sec
      transmitter
         frequency     900.0 mhz
      end_transmitter
   end_comm

end_platform_type

# --------------------------------------------------------------
platform cmdr RED_PLAYER

   icon Command_Truck
   commander SELF
   position 37:29:25n 122:07:42w altitude 1 m agl

   add sensor geo1 WSF_GEOMETRIC_SENSOR
      frame_time 5 s
      reports_location
      internal_link data_mgr
   end_sensor

   add sensor geo2 WSF_GEOMETRIC_SENSOR
      frame_time 5 s
      reports_location
      internal_link data_mgr
   end_sensor

   add processor data_mgr WSF_TRACK_PROCESSOR
      report_to subordinates via red-net-w1
      report_to subordinates via red-net-w2
      report_to subordinates via red-net-r1
      report_to subordinates via red-net-r2
      report_interval 5 s
   end_processor

   execute at_time 5 s absolute

      PLATFORM.Sensor("geo1").TurnOn();
      PLATFORM.Sensor("geo2").TurnOn();

   end_execute

end_platform

platform sub1 RED_PLAYER

   icon Ground_Radar
   commander cmdr
   position 37:32:30n 122:05:00w altitude 1 m agl heading 90 deg

end_platform

platform sub2 RED_PLAYER

   icon Ground_Radar
   commander cmdr
   position 37:32:30n 122:05:00w altitude 1 m agl heading -90 deg

end_platform

end_time  10 sec
*/
