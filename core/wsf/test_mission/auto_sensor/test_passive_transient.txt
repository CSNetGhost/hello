# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

#------------------------------------------------------------------------------
# Test the passive sensor 'listener' interface, which detect things like
# transient comm and agile beam tracking radars.
#------------------------------------------------------------------------------

script_variables
   bool gPass = true;
end_script_variables

script void SimulationComplete()
   extern bool gPass;
   if (gPass)
   {
      writeln("-PASS-");
   }
   else
   {
      writeln("-FAIL-");
   }
end_script

observer
  enable SIMULATION_COMPLETE
end_observer

# -----------------------------------------------------------------------------

sensor PASSIVE_SENSOR WSF_PASSIVE_SENSOR
   frame_time                1 sec
   frequency_band            1 ghz 18 ghz

   reports_range
   reports_bearing
   reports_elevation
   reports_frequency
end_sensor

comm RADIO WSF_RADIO_TRANSCEIVER

   transfer_rate             1 kbits/sec

   transmitter
      power                  100 kw
      frequency              1.3 ghz
   end_transmitter

   receiver
      bandwidth              100 khz
      detection_threshold    12 db
   end_receiver
end_comm

platform sigint WSF_PLATFORM
   side blue
   position 0n 0e altitude 30000 ft heading 0 deg

   add processor track_proc WSF_TRACK_PROCESSOR
   end_processor

   add sensor passive_sensor PASSIVE_SENSOR
      on
      internal_link track_proc
      ignore IGNORED_BY_PASSIVE_SENSOR # See notes below
   end_sensor

   # This executes periodically to check to see that the passive sensor is reporting as expected.
   # The passive sensor sample time is one second, and the simulation is configured so the sensor
   # only attempts to check platform 'target-1'. Thus, the sensor samples are at
   # [0, 1, 2, ...] seconds. This script executes slightly behind so we can check on
   # the status at the interval.

   script void CheckTracks()
      extern bool gPass;
      int sampleTime = (int) TIME_NOW;
      if ((sampleTime >= 2) && (sampleTime <= 3))
      {
         # The first message is sent at 1.5 sec and is 1 second long.
         # so we should see it at the samples from [2..3] seconds.
         if (MasterRawTrackList().Count() != 1)
         {
            writeln("-FAIL- Expected 1 raw track at T=", sampleTime,
                    ", got ", MasterRawTrackList().Count());
            gPass = false;
         }
      }
      else if ((sampleTime >= 21) && (sampleTime <= 31))
      {
         # The second message is sent at 20.5 sec and is 10 seconds long,
         # so we should set it at the samples from [21..31] seconds.
         if (MasterRawTrackList().Count() != 1)
         {
            writeln("-FAIL- Expected 1 raw track at T=", sampleTime,
                    ", got ", MasterRawTrackList().Count());
            gPass = false;
         }
      }

      else
      {
         # We shouldn't be seeing anything
         if (MasterRawTrackList().Count() != 0)
         {
            writeln("-FAIL- Expected no tracks at T=", sampleTime,
                    ", got ", MasterRawTrackList().Count());
            gPass = false;
         }
      }
      ExecuteAtTime(TIME_NOW + 1.0, "CheckTracks");
   end_script

   #
   execute at_time 0.1 sec absolute
      CheckTracks();
   end_execute

end_platform

platform target-1 WSF_PLATFORM
   side red
   position 0n 0.05e altitude 6 ft heading 90 deg

   add comm radio RADIO
   end_comm

   execute at_time 1.5 sec absolute
      WsfMessage message = WsfMessage();
      message.SetSizeInBits(1000);     // 1 second of transmission time
      message.SetType("CONTROL");
      message.SetSubType("WAIT");
      Comm("radio").SendMessage(message, "target-2", "radio");
   end_execute

   execute at_time 20.5 sec absolute
      WsfMessage message = WsfMessage();
      message.SetSizeInBits(10000);    // 10 sec of transmission time
      message.SetType("CONTROL");
      message.SetSubType("GO");
      Comm("radio").SendMessage(message, "target-2", "radio");
   end_execute

end_platform

platform target-2 WSF_PLATFORM
   side red
   category IGNORED_BY_PASSIVE_SENSOR  # See notes in passive sensor platform
   position 0n 0.05w altitude 6 ft heading 270 deg

   add comm radio RADIO
   end_comm
end_platform

end_time 1 min
/*
event_output
   file replay.evt
   enable SENSOR_DETECTION_ATTEMPT
   enable SENSOR_TRACK_INITIATED
   enable SENSOR_TRACK_UPDATED
   enable SENSOR_TRACK_DROPPED
end_event_output
*/
