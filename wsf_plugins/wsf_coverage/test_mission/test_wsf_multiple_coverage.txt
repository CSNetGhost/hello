# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

start_date jul 1 2020
start_time 12:00:00.000
end_time 10 min

include_once utils.txt

include_once platforms/grid_template_platform.txt
include_once platforms/leo_sat.txt

platform narrow_asset LEO_SAT
   edit mover
      true_anomaly 90 deg
   end_mover
end_platform

platform wide_asset LEO_SAT
   edit mover
      true_anomaly 89 deg
   end_mover
   
   edit sensor camera
      elevation_field_of_view -90 deg -70 deg
   end_sensor
end_platform

grid test_grid WSF_LAT_LON_GRID
   altitude 1 m msl
   latitude_span 1s 1n
   longitude_span 1w 1e
   latitude_spacing 0.2 deg
   longitude_spacing 0.2 deg
   asset TEST_GRID_PLATFORM none
end_grid

coverage narrow_coverage WSF_SENSOR_COVERAGE
   grid test_grid 
   assets
      platform narrow_asset camera
   end_assets
   output_dir multiplecov
   moe sc WSF_SIMPLE_COVERAGE_MOE
      output data
      end_output
   end_moe
end_coverage

coverage wide_coverage WSF_SENSOR_COVERAGE
   grid test_grid
   assets
      platform wide_asset camera
   end_assets
   output_dir multiplecov
   moe sc WSF_SIMPLE_COVERAGE_MOE
      output data
      end_output
   end_moe
end_coverage

script_variables
   int gExpectedGridPointCount = 121;
end_script_variables

script void NarrowDataTestAction(string aLatitude,
                                 string aLongitude,
                                 string aAltitude,
                                 string aID,
                                 string aValue)
   double lat = (double)aLatitude;
   if (Math.Fabs(lat) > 0.4)
   {
      ExpectDouble((double)aValue, 0.0, 1.0e-6, "Simple coverage value high latitudes");
   }
   else
   {
      ExpectDouble((double)aValue, 1.0, 1.0e-6, "Simple coverage value low latitudes");
   }
end_script

script void WideDataTestAction(string aLatitude,
                               string aLongitude,
                               string aAltitude,
                               string aID,
                               string aValue)
   double lat = (double)aLatitude;
   if (Math.Fabs(lat) > 0.8)
   {
      ExpectDouble((double)aValue, 0.0, 1.0e-6, "Simple coverage value high latitudes");
   }
   else
   {
      ExpectDouble((double)aValue, 1.0, 1.0e-6, "Simple coverage value low latitudes");
   }
end_script

script void RunTests()
   Path path = Path.GetWorkingDirectory();
   path.Join("multiplecov");
   
   path.Join("narrow_coverage_sc_data.csv");
   CheckDataFile(path, "Narrow data", "NarrowDataTestAction", gExpectedGridPointCount);
   path.Up();
   
   path.Join("wide_coverage_sc_data.csv");
   CheckDataFile(path, "Wide data", "WideDataTestAction", gExpectedGridPointCount);
   path.Up();
   
   FinalAssessment();
   
   RemoveCoverageOutputDir(path);
end_script

observer
   enable SIMULATION_COMPLETE RunTests
end_observer