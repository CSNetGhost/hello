# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

start_date jul 1 2020
start_time 12:00:00.000
end_time 10 min

include_once utils.txt

platform test_asset WSF_PLATFORM
   position 0n 0w
   altitude 100 km
   add sensor camera WSF_GEOMETRIC_SENSOR
      on
      azimuth_field_of_view -180 deg 180 deg
      elevation_field_of_view -90 deg -80 deg
      maximum_range 150 km
      frame_time 5 s
      reports_location 
   end_sensor
end_platform

grid test_grid WSF_LAT_LON_GRID
   altitude 1 m msl
   latitude_span 1s 1n
   longitude_span 1w 1e
   latitude_spacing 5.0 deg
   longitude_spacing 5.0 deg
   origin 0n 0w
   asset WSF_PLATFORM none
end_grid

coverage test_coverage WSF_SENSOR_COVERAGE
   grid test_grid 
   assets
      platform test_asset camera
   end_assets
   output_dir totaloverlap
   raw_data_file intervals.csv
   start_time 1 min
   end_time 9 min
   moe sc WSF_SIMPLE_COVERAGE_MOE
      output data
      end_output
   end_moe
end_coverage

script_variables
   int gExpectedGridPointCount = 1;
   int gExpectedRawDataLineCount = 1;
   
   double gStartTime = 60.0;
   double gEndTime = 9 * 60.0;
end_script_variables

script void RawIntervalsTestAction(string aId,
                                   string aGridDevice,
                                   string aFreeAsset,
                                   string aFreeDevice,
                                   string aStartEpoch,
                                   string aEndEpoch,
                                   string aStartTime,
                                   string aEndTime,
                                   string aDuration)
   ExpectString(aGridDevice, "none", "Grid asset device");
   ExpectString(aFreeAsset, "test_asset", "Free asset name");
   ExpectString(aFreeDevice, "camera", "Free asset device");
   
   double t0 = (double)aStartTime;
   double t1 = (double)aEndTime;
   double dt = (double)aDuration;
   ExpectBool(t1 > t0, true, "End time greater than start time");
   ExpectDouble(t1 - t0, dt, 1.0e-10, "Duration equal to difference in times");
   ExpectDouble(t0, gStartTime, 1.0e-10, "Start time should be 1 minute");
   ExpectDouble(t1, gEndTime, 1.0e-10, "End time should be 9 minutes");
   
   Calendar e0 = Calendar.Construct(aStartEpoch);
   Calendar e1 = Calendar.Construct(aEndEpoch);
   ExpectDouble(e1.TimeSince(e0), dt, 1.0e-10, "Epoch difference matches interval");
   ExpectDouble(e0.TimeSince(WsfDateTime.StartTime()), t0, 1.0e-3, "Start epoch matches start sim time");
   ExpectDouble(e1.TimeSince(WsfDateTime.StartTime()), t1, 1.0e-3, "End epoch matches end sim time");
end_script

script void MOE_DataTestAction(string aLatitude,
                               string aLongitude,
                               string aAltitude,
                               string aID,
                               string aValue)
   ExpectDouble((double)aValue, 1.0, 1.0e-6, "Simple coverage value low latitudes");
end_script

script void RunTests()
   Path path = Path.GetWorkingDirectory();
   path.Join("totaloverlap");
   
   path.Join("intervals.csv");
   CheckDataFile(path, "Raw data file", "RawIntervalsTestAction", gExpectedRawDataLineCount); 
   path.Up();
   
   path.Join("test_coverage_sc_data.csv");
   CheckDataFile(path, "MOE data", "MOE_DataTestAction", gExpectedGridPointCount);
   path.Up();
   
   FinalAssessment();
   
   RemoveCoverageOutputDir(path);
end_script

observer
   enable SIMULATION_COMPLETE RunTests
end_observer