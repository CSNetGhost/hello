# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# Copyright (C) 2021 Stellar Science; U.S. Government has Unlimited Rights.
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# Tests that we get identical results when using identical signatures, but with one 
# attached to a platform in the standard way and one using multiresolution_infrared_signature.

end_time 600 sec

### Sensor sites ###
sensor GENERIC_IRST WSF_IRST_SENSOR
   atmospheric_attenuation     0.05 per km
   background_radiance         500 microwatts/cm^2/sr
   band                        medium
   noise_equivalent_irradiance 1.0E-11 w/cm^2
   detection_threshold         3.0

   azimuth_error_sigma         0.001 deg
   elevation_error_sigma       0.001 deg
   range_error_sigma           7.0 m
   hits_to_establish_track     1 1
   hits_to_maintain_track      1 1
   
   on
   reports_signal_to_noise
   frame_time               10 sec
   azimuth_field_of_view   -45.0 deg 45.0 deg  
   elevation_field_of_view -45.0 deg 45.0 deg  
   maximum_range            500 nm
   minimum_range            0.1 nm
   
   slew_mode                 azimuth_and_elevation
   azimuth_slew_limits     -45 deg 45 deg    
   elevation_slew_limits   -45 deg 45 deg    
   azimuth_slew_rate         5 deg/s
   elevation_slew_rate       5 deg/s 
   selection_mode            single
   ignore_same_side
end_sensor

platform_type SENSOR_SITE WSF_PLATFORM
   processor track_mgr WSF_TRACK_PROCESSOR
   end_processor
   
   processor image_proc WSF_IMAGE_PROCESSOR 
     internal_link track_mgr
   end_processor

   sensor irst GENERIC_IRST
      internal_link image_proc
   end_sensor
end_platform_type

### Fighter platform ###
infrared_signature LOW_IR_SIGNATURE
   constant 1.0 watts/steradian
end_infrared_signature

infrared_signature HIGH_IR_SIGNATURE
   constant 100 watts/steradian
end_infrared_signature

platform_type SIMPLE_FIGHTER WSF_PLATFORM
   icon f-18
   mover WSF_AIR_MOVER end_mover
   route
      position 40.2n 89.5w altitude 20000 ft heading 270 deg speed 500 kts
   end_route
end_platform_type

### Platform instantiations
platform sr_detection_site SENSOR_SITE
   icon Ground_Radar
   side red
   position 40n 90w
   heading 0 deg
end_platform

platform sr_sig_fighter SIMPLE_FIGHTER
   side blue
   infrared_signature LOW_IR_SIGNATURE
end_platform

platform mr_detection_site SENSOR_SITE
   icon Ground_Radar
   side blue
   position 40n 90w
   heading 0 deg
end_platform

platform mr_sig_fighter SIMPLE_FIGHTER
   side red
   add multiresolution_infrared_signature WSF_MULTIRESOLUTION_INFRARED_SIGNATURE
      fidelity 0.0
      model low_fidelity_sig
         fidelity_range 0.0 0.5
         infrared_signature LOW_IR_SIGNATURE  end_infrared_signature
      end_model
      model high_fidelity_sig 
         fidelity_range 0.5 1.0
         infrared_signature HIGH_IR_SIGNATURE end_infrared_signature
      end_model
   end_multiresolution_infrared_signature
end_platform

### Observer for testing ###
script_variables
   double mrSensorSNR = 0.0;
   bool mrSensorHasUpdate = false;
   double srSensorSNR = 0.0;
   bool srSensorHasUpdate = false;
end_script_variables

script void SensorTrackUpdated(WsfPlatform aPlatform, WsfSensor aSensor, WsfTrack aTrack)
   if(mrSensorHasUpdate && aTrack.TargetName() == "mr_sig_fighter") {
      writeln("-FAIL- Got two mr_sig_fighter track updates, expected an sr_sig_fighter track update");
   }
   if(srSensorHasUpdate && aTrack.TargetName() == "sr_sig_fighter") {
      writeln("-FAIL- Got two sr_sig_fighter track updates, expected an mr_sig_fighter track update");
   }
   
   if(!srSensorHasUpdate && aTrack.TargetName() == "sr_sig_fighter") {
      srSensorSNR = aTrack.SignalToNoise();
      srSensorHasUpdate = true;
   } else if(!mrSensorHasUpdate && aTrack.TargetName() == "mr_sig_fighter") {
      mrSensorSNR = aTrack.SignalToNoise();
      mrSensorHasUpdate = true;
   }
   if(mrSensorHasUpdate && srSensorHasUpdate){
      if(mrSensorSNR != srSensorSNR){
         writeln("SNRs don't match: MR: ", mrSensorSNR, ", SR: ", srSensorSNR);
         writeln("-FAIL-");
      } else {
         writeln("-PASS- MR SNR: ", mrSensorSNR, ", SR SNR: ", srSensorSNR);
      }
      mrSensorHasUpdate = false;
      srSensorHasUpdate = false;
   }
end_script

observer
   enable SENSOR_TRACK_UPDATED
end_observer