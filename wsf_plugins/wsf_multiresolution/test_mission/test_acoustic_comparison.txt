# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# Copyright (C) 2021 Stellar Science; U.S. Government has Unlimited Rights.
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# Tests that we get identical results when using identical signatures, but with one 
# attached to a platform in the standard way and one using multiresolution_acoustic_signature.

end_time 600 sec

### Sensor types ###
sensor ACOUSTIC WSF_ACOUSTIC_SENSOR
   on
   acoustic_type human
   frame_time 10 sec
   scan_mode both
   azimuth_scan_limits -180 deg 180 deg
   elevation_scan_limits 0 deg 90 deg
   detection_threshold 0.0
   reports_signal_to_noise
   ignore_same_side
end_sensor

platform_type SENSOR_SITE WSF_PLATFORM
   processor track_mgr WSF_TRACK_PROCESSOR
   end_processor

   sensor acoustic ACOUSTIC
      internal_link track_mgr
   end_sensor
end_platform_type

### Fighter platform ###
acoustic_signature LOW_ACOUSTIC_SIGNATURE
   data_reference_range 10 feet
   state default
   spectrum_data
        freq    31.5 hz   noise_pressure 1.0 dB_20uPa
        freq   6000.0 hz  noise_pressure 1.0 dB_20uPa
   end_spectrum_data
end_acoustic_signature

acoustic_signature HIGH_ACOUSTIC_SIGNATURE
   data_reference_range 10 feet
   state default
   spectrum_data
        freq    31.5 hz   noise_pressure 100.0 dB_20uPa
        freq   6000.0 hz  noise_pressure 100.0 dB_20uPa
   end_spectrum_data
end_acoustic_signature

platform_type SIMPLE_FIGHTER WSF_PLATFORM
   mover WSF_AIR_MOVER end_mover
   route
      position 40n 89.9w altitude 20 ft heading 270 deg speed 500 kts
   end_route
end_platform_type

### Platform instantiations
platform sr_detection_site SENSOR_SITE
   side red
   position 40n 90w
   heading 0 deg
end_platform

platform sr_sig_fighter SIMPLE_FIGHTER
   side blue
   acoustic_signature HIGH_ACOUSTIC_SIGNATURE
end_platform

platform mr_detection_site SENSOR_SITE
   side blue
   position 40n 90w
   heading 0 deg
end_platform

platform mr_sig_fighter SIMPLE_FIGHTER
   side red
   add multiresolution_acoustic_signature WSF_MULTIRESOLUTION_ACOUSTIC_SIGNATURE
      fidelity 0.5
      model low_fidelity_sig
         fidelity_range 0.0 0.5
         acoustic_signature LOW_ACOUSTIC_SIGNATURE  end_acoustic_signature
      end_model
      model high_fidelity_sig 
         fidelity_range 0.5 1.0
         acoustic_signature HIGH_ACOUSTIC_SIGNATURE end_acoustic_signature
      end_model
   end_multiresolution_acoustic_signature
end_platform

### Observer for testing ###
script_variables
   double mrSensorSNR = 0.0;
   bool mrSensorHasUpdate = false;
   double srSensorSNR = 0.0;
   bool srSensorHasUpdate = false;
end_script_variables

script void SensorTrackUpdated(WsfPlatform aPlatform, WsfSensor aSensor, WsfTrack aTrack)
   if(mrSensorHasUpdate && aTrack.TargetName() == "mr_sig_fighter") {
      writeln("-FAIL- Got two mr_sig_fighter track updates, expected an sr_sig_fighter track update");
   }
   if(srSensorHasUpdate && aTrack.TargetName() == "sr_sig_fighter") {
      writeln("-FAIL- Got two sr_sig_fighter track updates, expected an mr_sig_fighter track update");
   }
   
   if(!srSensorHasUpdate && aTrack.TargetName() == "sr_sig_fighter") {
      srSensorSNR = aTrack.SignalToNoise();
      srSensorHasUpdate = true;
   } else if(!mrSensorHasUpdate && aTrack.TargetName() == "mr_sig_fighter") {
      mrSensorSNR = aTrack.SignalToNoise();
      mrSensorHasUpdate = true;
   }
   if(mrSensorHasUpdate && srSensorHasUpdate){
      if(mrSensorSNR != srSensorSNR){
         writeln("SNRs don't match: MR: ", mrSensorSNR, ", SR: ", srSensorSNR);
         writeln("-FAIL-");
      } else {
         writeln("-PASS- MR SNR: ", mrSensorSNR, ", SR SNR: ", srSensorSNR);
      }
      mrSensorHasUpdate = false;
      srSensorHasUpdate = false;
   }
end_script

observer
   enable SENSOR_TRACK_UPDATED
end_observer