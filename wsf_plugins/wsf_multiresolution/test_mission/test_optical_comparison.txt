# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# Copyright (C) 2021 Stellar Science; U.S. Government has Unlimited Rights.
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# Tests that we get identical results when using identical signatures, but with one 
# attached to a platform in the standard way and one using multiresolution_optical_signature.

end_time 600 sec

### Sensor types ###
sensor GENERIC_EOIR WSF_EOIR_SENSOR
   on
   frame_time                          10 sec     # sample rate
   slew_mode                           azimuth_and_elevation
   azimuth_slew_limits                 -45 deg 45 deg    
   elevation_slew_limits               -45 deg 45 deg    
   azimuth_slew_rate                   5 deg/s
   elevation_slew_rate                 5 deg/s 
   selection_mode single
   ignore_same_side

   atmospheric_attenuation 0.005 per m
   band visual

   azimuth_field_of_view               -45.0 deg 45.0 deg  
   elevation_field_of_view             -45.0 deg 45.0 deg  
   maximum_range                       50 nm
   minimum_range                       0.1 nm
   pixel_count  1000  1000             
   detection_threshold 3   
   track_quality .5
   azimuth_error_sigma 0.45 deg
   elevation_error_sigma  0.45 deg

   reports_signal_to_noise
   reports_range
   reports_bearing
   reports_elevation
   reports_location
   reports_velocity
end_sensor

platform_type SENSOR_SITE WSF_PLATFORM
   processor track_mgr WSF_TRACK_PROCESSOR
   end_processor
   
   processor image_proc WSF_IMAGE_PROCESSOR 
     internal_link track_mgr
   end_processor

   sensor eoir GENERIC_EOIR
      internal_link image_proc
   end_sensor
end_platform_type

### Fighter platform types ###
optical_signature LOW_OPTICAL_SIGNATURE
   constant 1 m^2
end_optical_signature

optical_signature HIGH_OPTICAL_SIGNATURE WSF_COMPOSITE_OPTICAL_SIGNATURE
   surface cylinder
      length 10.0 m
      radius 0.7 m
      temperature adiabatic_wall
   end_surface
   # Jet plume
   surface plume
      temperature 700 K
      length 5 m
      radius 0.5 m
   end_surface
end_optical_signature

#optical_signature HIGH_OPTICAL_SIGNATURE
#   constant 100 m^2
#end_optical_signature

platform_type SIMPLE_FIGHTER WSF_PLATFORM
   mover WSF_AIR_MOVER end_mover
   route
      position 40.2n 89.5w altitude 20000 ft heading 270 deg speed 500 kts
   end_route
end_platform_type

### Platform instantiations
platform sr_detection_site SENSOR_SITE
   side red
   position 40n 90w
   heading 0 deg
end_platform

platform sr_sig_fighter SIMPLE_FIGHTER
   side blue
   optical_signature HIGH_OPTICAL_SIGNATURE
end_platform

platform mr_detection_site SENSOR_SITE
   side blue
   position 40n 90w
   heading 0 deg
end_platform

platform mr_sig_fighter SIMPLE_FIGHTER
   side red
   add multiresolution_optical_signature WSF_MULTIRESOLUTION_OPTICAL_SIGNATURE
      fidelity 1.0
      model low_fidelity_sig
         fidelity_range 0.0 0.5
         optical_signature LOW_OPTICAL_SIGNATURE  end_optical_signature
      end_model
      model high_fidelity_sig 
         fidelity_range 0.5 1.0
         optical_signature HIGH_OPTICAL_SIGNATURE end_optical_signature
      end_model
   end_multiresolution_optical_signature
end_platform

### Observer for testing ###
script_variables
   double mrSensorOpticalSignature = 0.0;
   bool mrSensorHasUpdate = false;
   double srSensorOpticalSignature = 0.0;
   bool srSensorHasUpdate = false;
end_script_variables

script void SensorDetectionAttempt(WsfPlatform aPlatform, WsfSensor aSensor, WsfPlatform aTarget, WsfSensorInteraction aResult) 
   if(mrSensorHasUpdate && aTarget.Name() == "mr_sig_fighter") {
      writeln("-FAIL- Got two mr_sig_fighter detection attempts, expected an sr_sig_fighter attempt");
   }
   if(srSensorHasUpdate && aTarget.Name() == "sr_sig_fighter") {
      writeln("-FAIL- Got two sr_sig_fighter detection attempts, expected an mr_sig_fighter attempts");
   }
   
   if(!srSensorHasUpdate && aTarget.Name() == "sr_sig_fighter") {
      srSensorOpticalSignature = aResult.OpticalSignature();
      srSensorHasUpdate = true;
   } else if(!mrSensorHasUpdate && aTarget.Name() == "mr_sig_fighter") {
      mrSensorOpticalSignature = aResult.OpticalSignature();
      mrSensorHasUpdate = true;
   }
   if(mrSensorHasUpdate && srSensorHasUpdate){
      if(mrSensorOpticalSignature != srSensorOpticalSignature){
         writeln("Optical signatures don't match: MR: ", mrSensorOpticalSignature, ", SR: ", srSensorOpticalSignature);
         writeln("-FAIL-");
      } else {
         writeln("-PASS- MR Optical signature: ", mrSensorOpticalSignature, ", SR Optical signature: ", srSensorOpticalSignature);
      }
      mrSensorHasUpdate = false;
      srSensorHasUpdate = false;
   }
end_script

observer
   enable SENSOR_DETECTION_ATTEMPT
end_observer
