#!/usr/bin/env python3

# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# Copyright (C) 2021 Stellar Science; U.S. Government has Unlimited Rights.
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

import argparse
import os

def read_template_file(template_filename):
  with open(template_filename, 'r') as template_file:
    template_data = template_file.read()
  return template_data

class GrammarTemplate:
  def __init__(self):
    self.root_template_data = read_template_file('root_template.ag')
    self.platform_unnamed_template_data = read_template_file('platform_unnamed_template.ag')
    self.platform_named_template_data = read_template_file('platform_named_template.ag')
    self.multiresolution_struct_template_data = read_template_file('multiresolution_struct_template.ag')
    
  def platform_template_data(self, isNamed):
    return self.platform_named_template_data if isNamed else self.platform_unnamed_template_data
    
def generate_section(component_name, component_base_type, template_data, grammar_file):
  component_type = ''.join([w.capitalize() for w in component_name.split('_')])
  output_data = template_data.replace('ComponentToReplace', component_type)
  output_data = output_data.replace('COMPONENT_TO_REPLACE', component_name.upper())
  output_data = output_data.replace('component_to_replace', component_name)
  output_data = output_data.replace('component_base_type', component_base_type)
  grammar_file.write(output_data)

def generate_grammar(grammars, grammar_template, grammar_file):
  for component_name, componentTypeAndNamed in grammars.items():
    component_base_type, is_named = componentTypeAndNamed
    generate_section(component_name, component_base_type, grammar_template.root_template_data, grammar_file)
    generate_section(component_name, component_base_type, grammar_template.platform_template_data(is_named), grammar_file)
    generate_section(component_name, component_base_type, grammar_template.multiresolution_struct_template_data, grammar_file)

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Generate multiresolution grammar file')
  parser.add_argument('--output_file', nargs=1, required=True, help='Path to output the grammar file')
  args = parser.parse_args()
  
  os.makedirs(os.path.dirname(args.output_file[0]), exist_ok=True)
  
  grammar_template = GrammarTemplate()
  with open(args.output_file[0], 'w') as grammar_file:
    # Add auto-generation warning
    grammar_file.write("# Warning: This grammar file was auto-generated by the generate_grammar.py script.\n"
                       "# Do not edit this file.\n"
                       "# To edit the grammar, use the template files wsf_multiresolution/grammar/*_template.ag and re-run generate_grammar.py\n\n")
    # Generate platform component and signature grammars
    # Format is command_name : ( 'base_grammar_type', is_named )
    grammars = {'comm' : ('commType', True), 
                'fuel' : ('fuelType', False),
                'mover' : ('moverType', False),
                'processor' : ('processorType', True),
                'sensor' : ('sensorType', True),
                'acoustic_signature' : ('acousticSignature', False),
                'infrared_signature' : ('infraredSignature', False),
                'optical_signature' : ('opticalSignature', False),
                'radar_signature' : ('radarSignature', False)};
    generate_grammar(grammars, grammar_template, grammar_file)
    