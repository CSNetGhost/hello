# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

include_once ../platforms/fa-lgt.txt
include_once ../scripts/utils.txt

end_time 1 m

script_variables 
   bool allPassed = true;
end_script_variables

platform target FA-LGT_RB6
   side red
   
   route
      position   21.325n   158.000w  altitude   20000.0 ft   speed  450.0 kts
      position   20.00n    157.98w   altitude   20000.0 ft   speed  450.0 kts
   end_route
   
   execute at_time 2 s absolute
      WsfRigidBodySixDOF_Mover mover = (WsfRigidBodySixDOF_Mover)PLATFORM.Mover();
      WsfSixDOF_RollAngleManeuver mvr = WsfSixDOF_RollAngleManeuver.Construct(60.0);
      mover.ExecuteManeuver(mvr);
   end_execute
end_platform

platform chaser FA-LGT_PM6
   side blue
   
   route
      position   21.325n   157.99w  altitude   20000.0 ft   speed  450.0 kts
      position   20.00n    157.97w  altitude   20000.0 ft   speed  450.0 kts
   end_route
   
   script_variables
      double pTestMaxKTAS  = 500.0;
      double pTestMinKTAS  = 400.0;
      double pTestMaxGLoad = 7.0;
      double pTestMinGLoad = 0.0;
      double pTestMaxMps   = 250.0;
      double pTestMinMps   = 150.0;
   end_script_variables
   
   execute at_time 10 s absolute
      WsfSixDOF_PursueManeuver mvr = WsfSixDOF_PursueManeuver.Construct("target", -200.0);
      
      mvr.SetSpeedMpsMax(pTestMaxMps);
      allPassed = ExpectDouble(mvr.GetSpeedMpsMax(), pTestMaxMps, 1.0e-6, "SpeedMpsMax incorrect") && allPassed;
      
      mvr.SetSpeedMpsMin(pTestMinMps);
      allPassed = ExpectDouble(mvr.GetSpeedMpsMin(), pTestMinMps, 1.0e-6, "SpeedMpsMin incorrect") && allPassed;
      
      mvr.SetSpeedKTAS_Max(pTestMaxKTAS);
      allPassed = ExpectDouble(mvr.GetSpeedKTAS_Max(), pTestMaxKTAS, 1.0e-6, "SpeedKTAS_Max incorrect") && allPassed;
      
      mvr.SetSpeedKTAS_Min(pTestMinKTAS);
      allPassed = ExpectDouble(mvr.GetSpeedKTAS_Min(), pTestMinKTAS, 1.0e-6, "SpeedKTAS_Min incorrect") && allPassed;
      
      mvr.SetG_LoadMax(pTestMaxGLoad);
      allPassed = ExpectDouble(mvr.GetG_LoadMax(), pTestMaxGLoad, 1.0e-6, "G_LoadMax incorrect") && allPassed;
      
      mvr.SetG_LoadMin(pTestMinGLoad);
      allPassed = ExpectDouble(mvr.GetG_LoadMin(), pTestMinGLoad, 1.0e-6, "G_LoadMin incorrect") && allPassed;
      
      WsfSixDOF_Mover mover = (WsfSixDOF_Mover)PLATFORM.Mover();
      mover.ExecuteManeuver(mvr);
   end_execute
   
   execute at_time 12 s absolute
      WsfSixDOF_Mover mover = (WsfSixDOF_Mover)PLATFORM.Mover();

      WsfSixDOF_RelativeManeuver mvr = (WsfSixDOF_RelativeManeuver)mover.GetCurrentManeuver();
      allPassed = ExpectBool(mvr.IsValid(), true, "Maneuver should be a relative maneuver") && allPassed;
      allPassed = ExpectDouble(mvr.GetSpeedKTAS_Max(), pTestMaxKTAS, 1.0e-6, "SpeedKTAS_Max incorrect") && allPassed;
      allPassed = ExpectDouble(mvr.GetSpeedKTAS_Min(), pTestMinKTAS, 1.0e-6, "SpeedKTAS_Min incorrect") && allPassed;
      allPassed = ExpectDouble(mvr.GetG_LoadMax(), pTestMaxGLoad, 1.0e-6, "G_LoadMax incorrect") && allPassed;
      allPassed = ExpectDouble(mvr.GetG_LoadMin(), pTestMinGLoad, 1.0e-6, "G_LoadMin incorrect") && allPassed;
   end_execute
end_platform

execute at_time 13 s absolute
   if (allPassed)
   {
      writeln("-PASS-");
   }
   else
   {
      writeln("-FAIL- One or more tests failed.");
   }   
end_execute  