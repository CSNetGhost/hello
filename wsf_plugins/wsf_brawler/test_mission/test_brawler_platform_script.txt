# ****************************************************************************
# CUI//REL TO USA ONLY
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

test_feature brawler

#
# Test the BRAWLER platform script interface
#

file_path .
#file_path p6dof_data/

# Brings in the P6DOF configuration
#include_once P6DOF_Environment.txt
#include_once F104_Empty.txt

# Map P6DOF object and platform types
#p6dof_object_types              # P6DOF     # platform_type
#   map_p6dof_object_to_platform F104_Empty  BRAWLER_AIRCRAFT
#end_p6dof_object_types

# A brawler agent must have the following defined:
# 1. A WSF_P6DOF_MOVER or WSF_BRAWLER_MOVER
# 2. A WSF_BRAWLER_PROCESSOR
# 3. A WSF_PERCEPTION_PROCESSOR
# 4. A WSF_THREAT_PROCESSOR
platform_type BRAWLER_AIRCRAFT WSF_PLATFORM
   icon F-18

   #mover WSF_P6DOF_MOVER
   #   p6dof_object_type  F104_Empty
   #end_mover

   mover WSF_BRAWLER_MOVER
       aero_file ../data/ACFT_BD.FXW
   end_mover

   comm datalink WSF_COMM_TRANSCEIVER
      network_name blue_net
      internal_link task_mgr
      internal_link perception
   end_comm

   processor track_mgr WSF_TRACK_PROCESSOR
      purge_interval  60 sec
   end_processor

   processor perception WSF_PERCEPTION_PROCESSOR
   end_processor

   processor task_mgr WSF_BRAWLER_PROCESSOR
      mind_file ../data/MIND.txt
   end_processor

   processor incoming_threats WSF_THREAT_PROCESSOR
   end_processor

end_platform_type

platform blue_1 BRAWLER_AIRCRAFT
   side blue

   heading 200 deg

   route
     position 00:00:00.00n 00:00:00.00w altitude 10000.00 ft
     speed 200 kts
     position 00:00:01.00n 00:00:00.00w altitude 10000.00 ft
   end_route

end_platform

execute at_time 1 sec absolute
   # TEST 1 - Cast a WsfPlatform to a WsfBrawlerPlatform
   WsfPlatform p = WsfSimulation.FindPlatform("blue_1");
   if (p.IsValid())   writeln("-PASS- T=", TIME_NOW, " Added platform ", p);
   if (! p.IsValid()) writeln("-FAIL- T=", TIME_NOW, " Could not add platform of type ", p.Type());
   # TEST 1

   # TEST 2 - Create a new brawler agent platform in script
   WsfPlatform bp = WsfSimulation.CreatePlatform("BRAWLER_AIRCRAFT");
   if (! bp.IsValid())
   {
      writeln("-FAIL- CreatePlatform BRAWLER_AIRCRAFT");
   }
   bool inputValid =
      bp.ProcessInput("side red") &&
      bp.ProcessInput("position 1n 1w heading 45 deg");
   WsfPlatform redBP = WsfSimulation.AddPlatform(bp, "red_1");    // Use a specified name
   if (redBP.IsValid())   writeln("-PASS- T=", TIME_NOW, " Added platform ", redBP);
   if (! redBP.IsValid()) writeln("-FAIL- T=", TIME_NOW, " Could not add platform of type ", bp.Type());
   # TEST 2

   # TEST 3 - Schedule a consciousness event to occur at 3 seconds
   double nextCE = ((WsfBrawlerProcessor)redBP.Processor("task_mgr")).GetNextConsciousnessEventTime();
   #writeln("T=", TIME_NOW, " platform ", redBP.Name(), " has next CE at ", nextCE);
   ((WsfBrawlerProcessor)redBP.Processor("task_mgr")).ScheduleConsciousnessEvent(3);
   nextCE = ((WsfBrawlerProcessor)redBP.Processor("task_mgr")).GetNextConsciousnessEventTime();
   if (nextCE == 3.0)
   {
      writeln("-PASS- T=", TIME_NOW, " platform ", redBP.Name(), " has next CE at ", nextCE);
   }
   else
   {
      writeln("-FAIL- T=", TIME_NOW, " platform ", redBP.Name(), " has next CE at ", nextCE, " should be 3.0");
   }
   # TEST 3

   # TEST 4 - Get the time delta between consciousness events, should be 10 sec
   double ce_dt = ((WsfBrawlerProcessor)p.Processor("task_mgr")).GetConsciousnessEventTime();
   if (ce_dt == 10.0)
   {
      writeln("-PASS- T=", TIME_NOW, " platform ", p.Name(), " has a CE dT of ", ce_dt);
   }
   else
   {
      writeln("-FAIL- T=", TIME_NOW, " platform ", p.Name(), " has a CE dT of ", ce_dt, " should be 10.0");
   }
   # TEST 4
end_execute

end_time 5 sec

/*
event_output
   file STDOUT
   enable PLATFORM_ADDED
   enable PLATFORM_DELETED
end_event_output

dis_interface
   record test_brawler_platform_script_replay.rep
end_dis_interface
*/
