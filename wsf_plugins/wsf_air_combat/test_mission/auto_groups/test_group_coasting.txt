# ****************************************************************************
# CUI//REL TO USA ONLY
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

#
# Test calling entity and group methods on coasting PIs.
# First, test on 4 entities, one of which is coasting.
# Then, test on 3 entities, all of which are coasting.
# Finally, test on only the empty coasting groups.
#
include_once ../auto_script/utility_test_functions.txt
include_once platforms/tracking_platform.txt
include_once platforms/target_platform.txt

end_time 70 sec

script_variables
   bool allTestsPassed = true; // any failure turns it false
end_script_variables

platform red-1 TARGET_PLATFORM

   route
      position 0:50:0n 0:05:0w
      altitude 35000 ft
      speed     450 kts
      heading     0 deg
   end_route
   
   execute at_time 57 sec absolute
      PLATFORM.DeletePlatform();
   end_execute

end_platform

platform red-2 TARGET_PLATFORM

   route
      position 0:50:0n 0:05:10w
      altitude 45000 ft
      speed     450 kts
      heading     0 deg
   end_route
   
   execute at_time 57 sec absolute
      PLATFORM.DeletePlatform();
   end_execute

end_platform

platform red-3 TARGET_PLATFORM

   route
      position 0:50:0n 0:05:0e
      altitude 30000 ft
      speed     450 kts
      heading     0 deg
   end_route
   
   execute at_time 52 sec absolute
      PLATFORM.DeletePlatform();
   end_execute

end_platform

platform red-4 TARGET_PLATFORM

   route
      position 0:50:0n 0:05:10e
      altitude 40000 ft
      speed     450 kts
      heading     0 deg
   end_route
   
   execute at_time 57 sec absolute
      PLATFORM.DeletePlatform();
   end_execute

end_platform

# This platform uses defaults for all SA processor update intervals
platform blue-1 TEST_PLATFORM

   route
      position 0:0:0n 0:0:0w
      altitude 35000 ft
      speed     450 kts
      heading     0 deg
   end_route
   
   edit processor sa-proc
      bandit_coast_time 5 sec
      
      include scripts/threat_target_scoring.txt
      
   end_processor
   
   execute at_time 55 s absolute
      WsfSA_Processor proc = (WsfSA_Processor)PLATFORM.Processor("sa-proc");
      string testNum = " (test 1)";
      if (proc.IsValid())
      {
         Array<WsfSA_Group> groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(4, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups.Size(), "Groups list is the wrong size." + testNum);
         
         // The entity called "red-3" is coasting.
         Array<WsfSA_EntityPerception> entities = proc.PerceivedBandits();
         WsfSA_EntityPerception red3;
         foreach (WsfSA_EntityPerception bandit in entities)
         {
            if (bandit.PerceivedName() == "red-3")
            {
               red3 = bandit;
            }
         }
         WsfTrack track = red3.Track();
         allTestsPassed = allTestsPassed && AssertTrueMessage(track.IsNull(), "Track on a coasting bandit is not null.");
         
         // From here, these are mostly the same tests from test_group_script_functions.
         string g0name = groups[0].GroupName();
         string g1name = groups[1].GroupName();
         allTestsPassed = allTestsPassed && AssertFalseMessage(proc.RenameGroup(groups[0], g1name), "Multiple groups now have the same name." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(groups[0].GetFocus(), "Group is unfocused." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetFocusProtection(), "Group is focus protected when it shouldn't be." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetElementProtection(), "Group is element protected when it shouldn't be." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.SetFocus(groups[0], false), "SetFocus failed on groups[0]." + testNum);
         // This next call prints a warning; that's supposed to happen, because this tests a failure state.
         allTestsPassed = allTestsPassed && AssertFalseMessage(proc.MergeGroups(groups).IsValid(), "Merge succeeded when it shouldn't have." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(3, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.SetFocus(groups[0], true), "SetFocus failed." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(4, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(groups[0].GetFocusProtection(), "Group is not focus protected when it should be." + testNum);
         WsfSA_Group temp = proc.MergeGroups(groups);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.IsValid(), "Merge failed." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.GetElementProtection(), "Group is not element protected when it should be." + testNum);
         foreach (WsfSA_Group group in groups)
         {
            allTestsPassed = allTestsPassed && AssertTrueMessage(group.IsNull(), "Old group references not nullified." + testNum);
         }
         groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(1, groups.Size(), "Groups list is the wrong size."+ testNum);
         groups = proc.SplitGroup(groups[0], 2, "maximum altitude");
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups.Size(), "Split failed." + testNum);
         foreach (WsfSA_Group group in groups)
         {
            allTestsPassed = allTestsPassed && AssertTrueMessage(group.IsValid(), "New group references nullified." + testNum);
         }
         // groups[0] should have the lower altitude aircraft.
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-3", groups[0].ElementList()[0].PerceivedName(), "red-3 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-1", groups[0].ElementList()[1].PerceivedName(), "red-1 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-4", groups[1].ElementList()[0].PerceivedName(), "red-4 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-2", groups[1].ElementList()[1].PerceivedName(), "red-2 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.DisbandGroup(groups[0]), "Could not disband groups[0]." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.DisbandGroup(groups[1]), "Could not disband groups[1]." + testNum);
         Array<WsfSA_EntityPerception> entities = proc.PerceivedBandits();
         temp = proc.CreateGroup(entities);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.IsValid(), "Could not create a group." + testNum);
         groups = proc.SplitGroup(temp, 2, "rightmost from heading");
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups.Size(), "Split failed." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-2", groups[0].ElementList()[0].PerceivedName(), "red-2 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-1", groups[0].ElementList()[1].PerceivedName(), "red-1 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-3", groups[1].ElementList()[0].PerceivedName(), "red-3 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-4", groups[1].ElementList()[1].PerceivedName(), "red-4 is not in the expected group." + testNum);
         WsfSA_EntityPerception transfer = groups[0].ElementList()[0];
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.TransferEntity(transfer, groups[1]), "Entity transfer failed." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(1, groups[0].NumElements(), "group[0] reports the wrong number of elements after transfer." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(3, groups[1].NumElements(), "group[1] reports the wrong number of elements after transfer." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.RemoveEntityFromGroup(transfer), "Entity removal failed." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(1, groups[0].NumElements(), "group[0] reports the wrong number of elements after removal." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups[1].NumElements(), "group[1] reports the wrong number of elements after removal." + testNum);
         groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(3, groups.Size(), "Degenerate group was not created for the removed entity." + testNum);
         
         foreach (WsfSA_Group g in groups)
         {
            proc.SetFocus(g, true);
            g.SetElementProtection(false);
            g.SetFocusProtection(false);
         }
      }
      else
      {
         writeln("Processor not found!");
         allTestsPassed = false;
      }
   end_execute
   
   execute at_time 60 s absolute
      WsfSA_Processor proc = (WsfSA_Processor)PLATFORM.Processor("sa-proc");
      string testNum = " (test 2)";
      if (proc.IsValid())
      {
         Array<WsfSA_Group> groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(3, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups.Size(), "Groups list is the wrong size." + testNum);
         
         string g0name = groups[0].GroupName();
         string g1name = groups[1].GroupName();
         allTestsPassed = allTestsPassed && AssertFalseMessage(proc.RenameGroup(groups[0], g1name), "Multiple groups now have the same name." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(groups[0].GetFocus(), "Group is unfocused." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetFocusProtection(), "Group is focus protected when it shouldn't be." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetElementProtection(), "Group is element protected when it shouldn't be." + testNum);
         // Cannot unfocus a group with only one element.
         allTestsPassed = allTestsPassed && AssertFalseMessage(proc.SetFocus(groups[0], false), "SetFocus succeeded on a degenerate group." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.SetFocus(groups[1], false), "SetFocus failed on groups[1]." + testNum);
         // This next call prints a warning; that's supposed to happen, because this tests a failure state.
         allTestsPassed = allTestsPassed && AssertFalseMessage(proc.MergeGroups(groups).IsValid(), "Merge succeeded when it shouldn't have." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.SetFocus(groups[1], true), "SetFocus failed." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(3, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetFocusProtection(), "Group is focus protected when it shouldn't be." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(groups[1].GetFocusProtection(), "Group is not focus protected when it should be." + testNum);
         WsfSA_Group temp = proc.MergeGroups(groups);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.IsValid(), "Merge failed." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.GetElementProtection(), "Group is not element protected when it should be." + testNum);
         foreach (WsfSA_Group group in groups)
         {
            allTestsPassed = allTestsPassed && AssertTrueMessage(group.IsNull(), "Old group references not nullified." + testNum);
         }
         groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(1, groups.Size(), "Groups list is the wrong size." + testNum);
         groups = proc.SplitGroup(groups[0], 2, "maximum altitude");
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups.Size(), "Split failed." + testNum);
         foreach (WsfSA_Group group in groups)
         {
            allTestsPassed = allTestsPassed && AssertTrueMessage(group.IsValid(), "New group references nullified." + testNum);
         }
         // groups[0] should have the lower altitude aircraft.
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-1", groups[0].ElementList()[0].PerceivedName(), "red-1 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-4", groups[1].ElementList()[0].PerceivedName(), "red-4 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-2", groups[1].ElementList()[1].PerceivedName(), "red-2 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.DisbandGroup(groups[0]), "Could not disband groups[0]." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.DisbandGroup(groups[1]), "Could not disband groups[1]." + testNum);
         Array<WsfSA_EntityPerception> entities = proc.PerceivedBandits();
         temp = proc.CreateGroup(entities);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.IsValid(), "Could not create a group." + testNum);
         groups = proc.SplitGroup(temp, 2, "rightmost from heading");
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-2", groups[0].ElementList()[0].PerceivedName(), "red-2 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-1", groups[1].ElementList()[0].PerceivedName(), "red-1 is not in the expected group." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage("red-4", groups[1].ElementList()[1].PerceivedName(), "red-4 is not in the expected group." + testNum);
         WsfSA_EntityPerception transfer = groups[0].ElementList()[0];
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.TransferEntity(transfer, groups[1]), "Entity transfer failed." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(groups[0].IsNull(), "Group still exists after having its last entity transfered away." +  testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.RemoveEntityFromGroup(transfer), "Entity removal failed." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups[1].NumElements(), "group[1] reports the wrong number of elements after removal." + testNum);
         groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups.Size(), "Degenerate group was not created for the removed entity." + testNum);
         
         foreach (WsfSA_Group g in groups)
         {
            proc.SetFocus(g, true);
            g.SetElementProtection(false);
            g.SetFocusProtection(false);
         }
      }
      else
      {
         writeln("Processor not found!");
         allTestsPassed = false;
      }
   end_execute
   
   execute at_time 65 s absolute
      WsfSA_Processor proc = (WsfSA_Processor)PLATFORM.Processor("sa-proc");
      string testNum = " (test 3)";
      if (proc.IsValid())
      {
         Array<WsfSA_Group> groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(0, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(0, groups.Size(), "Groups list is the wrong size." + testNum);
         
         // Nothing else to test.
         // AFSIM-671
         /* string g0name = groups[0].GroupName();
         string g1name = groups[1].GroupName();
         allTestsPassed = allTestsPassed && AssertFalseMessage(proc.RenameGroup(groups[0], g1name), "Multiple groups now have the same name." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(groups[0].GetFocus(), "Group is unfocused." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetFocusProtection(), "Group is focus protected when it shouldn't be." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetElementProtection(), "Group is element protected when it shouldn't be." + testNum);
         // Cannot unfocus a group with no elements.
         allTestsPassed = allTestsPassed && AssertFalseMessage(proc.SetFocus(groups[0], false), "SetFocus succeeded on group with no elements." + testNum);
         allTestsPassed = allTestsPassed && AssertEqualsMessage(0, proc.PerceivedItemCount(), "Incorrect number of PIs." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetFocusProtection(), "Group is focus protected when it shouldn't be after unfocus failure." + testNum);
         WsfSA_Group temp = proc.MergeGroups(groups);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.IsNull(), "Merge of empty groups succeeded." + testNum);
         allTestsPassed = allTestsPassed && AssertFalseMessage(groups[0].GetElementProtection(), "Group is element protected when it shouldn't be." + testNum);
         foreach (WsfSA_Group group in groups)
         {
            allTestsPassed = allTestsPassed && AssertTrueMessage(group.IsValid(), "Old group references nullified despite operations on them failing." + testNum);
         }
         allTestsPassed = allTestsPassed && AssertEqualsMessage(2, groups.Size(), "Groups list is the wrong size." + testNum);
         // Split should fail, will produce a warning.
         groups = proc.SplitGroup(groups[0], 2, "maximum altitude");
         allTestsPassed = allTestsPassed && AssertEqualsMessage(0, groups.Size(), "Split succeeded despite there being no way to split an empty group." + testNum);
         foreach (WsfSA_Group group in groups)
         {
            allTestsPassed = allTestsPassed && AssertTrueMessage(group.IsValid(), "New group references nullified despite operations on them failing.." + testNum);
         }
         // groups[0] should have the lower altitude aircraft.
         groups = proc.PerceivedGroups();
         // disbanding an empty group just deletes it altogether.
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.DisbandGroup(groups[0]), "Could not disband groups[0]." + testNum);
         allTestsPassed = allTestsPassed && AssertTrueMessage(proc.DisbandGroup(groups[1]), "Could not disband groups[1]." + testNum);
         Array<WsfSA_EntityPerception> entities = proc.PerceivedBandits();
         // should fail, will produce a warning.
         temp = proc.CreateGroup(entities);
         allTestsPassed = allTestsPassed && AssertTrueMessage(temp.IsNull(), "Created a group without any entities." + testNum);
         groups = proc.PerceivedGroups();
         allTestsPassed = allTestsPassed && AssertEqualsMessage(0, groups.Size(), "Degenerate group was not created for the removed entity." + testNum);
         
         foreach (WsfSA_Group g in groups)
         {
            g.SetElementProtection(false);
            g.SetFocusProtection(false);
         }*/
      }
      else
      {
         writeln("Processor not found!");
         allTestsPassed = false;
      }
   end_execute

end_platform

# ****************************************************************************
# Configure observers to collect/finalize test results
# ****************************************************************************

observer
    enable SIMULATION_COMPLETE
end_observer

// SIMULATION_COMPLETE observer:  Evaluate results and determine overall pass/fail
script void SimulationComplete()

   # If any tests failed, they will have already provided the '-FAIL-' output.
   if (allTestsPassed)
   {
      writePass(true);
   }
end_script
