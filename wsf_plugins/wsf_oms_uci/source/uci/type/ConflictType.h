// This file was generated  on 12/5/2018 at 1:1:45 PM by the Boeing OMS CAL generation tools
// @warning  This file was automatically generated, edit at your own risk

/**
* Unclassified               U N C L A S S I F I E D               Unclassified
*
* DEVELOPMENT:
*    This document wholly developed with USG funds.
*    For additional information, contact the AFRCO.
*
* â€’  DISTRIBUTION STATEMENT D.  Distribution authorized to the Department
*    of Defense and U.S. DoD contractors only; Critical Technology; 17 Sep 2015.
*    Other requests shall be referred to Air Force Rapid Capabilities Office,
*    Bolling AFB, Washington DC 20032-6400. 
*
* EXPORT CONTROL:
*    WARNING - ITAR CONTROLLED - US ONLY
*    This distribution contains technical data whose export is restricted by
*    the Arms Export Control Act (Title 22, U.S.C., Sec. 2751 et seq. or the
*    Export Administration Act of 1979 as amended Title 50, U.S.C., App.
*    2401-2420 et seq.), as amended. Violation of these export laws are subject
*    to severe criminal penalties.  Disseminate in accordance with provisions of DoD
*    Directive 5230.25.
*/
#ifndef Uci__Type__ConflictType_h
#define Uci__Type__ConflictType_h 1

#if !defined(Uci__Base__Accessor_h)
# include "uci/base/Accessor.h"
#endif

#if !defined(Uci__Type__ID_Type_h)
# include "uci/type/ID_Type.h"
#endif

#if !defined(Uci__Type__ConflictLocationType_h)
# include "uci/type/ConflictLocationType.h"
#endif

#if !defined(Uci__Type__DateTimeRangeType_h)
# include "uci/type/DateTimeRangeType.h"
#endif

#if !defined(Uci__Base__BoundedList_h)
# include "uci/base/BoundedList.h"
#endif

#if !defined(Uci__Type__TaskID_Type_h)
# include "uci/type/TaskID_Type.h"
#endif

//  The namespace in which all UAS C2 Initiative data types are declared
namespace uci {

   //  The namespace in which all generated data types are declared
   namespace type {

      /** This is the ConflictType sequence accessor class */
      class ConflictType : public virtual uci::base::Accessor {
      public:

         /** The destructor */
         virtual ~ConflictType()
         { }

         /** Returns this accessor's type constant, i.e. ConflictType
           *
           * @return This accessor's type constant, i.e. ConflictType
           */
         virtual uci::base::accessorType::AccessorType getAccessorType() const
            throw()
         {
            return uci::type::accessorType::conflictType;
         }


         /** Initializes the contents of this accessor by copying the contents of the specified accessor
           *
           * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor
           */
         virtual void copy(const ConflictType& accessor)
            throw(uci::base::UCIException) = 0;


         /** This is the ID of a Task which can no longer be performed due to the effect of the conflicting object. TaskIDs are
           * included if and only if they can no longer be accomplished with the current mission plans. As a result, a contingency
           * generated by a pop-up threat (or other environment change) might be handled via a simple reroute which does not
           * affect any Tasks. Alternatively, if a Capability fails, affected Tasks are more likely known and should be included
           * in this element. A Service would only list the Tasks if the Service KNOWS there is a problem with a Task. A Service
           * should not populate this value with all Tasks in a route simply because it is uncertain as to the effect of a reroute
           * on the associated Tasks. [Minimum occurrences: 0] [Maximum occurrences: 9223372036854775807]
           */
         typedef uci::base::BoundedList<uci::type::TaskID_Type, uci::type::accessorType::taskID_Type> AffectedTaskID;

         /** Returns the accessor that provides access to the complex content that is identified by the ConflictID.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictID.
           */
         virtual const uci::type::ID_Type& getConflictID() const
            throw(uci::base::UCIException) = 0;


         /** Returns the accessor that provides access to the complex content that is identified by the ConflictID.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictID.
           */
         virtual uci::type::ID_Type& getConflictID()
            throw(uci::base::UCIException) = 0;


         /** Sets the complex content that is identified by the ConflictID to the contents of the complex content that is accessed
           * by the specified accessor.
           *
           * @param value The accessor that provides access to the sequence whose contents are to be used to set the contents of
           *      the sequence identified by ConflictID
           */
         virtual void setConflictID(const uci::type::ID_Type& value)
            throw(uci::base::UCIException) = 0;


         /** Returns the accessor that provides access to the complex content that is identified by the ConflictingObjectID.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictingObjectID.
           */
         virtual const uci::type::ID_Type& getConflictingObjectID() const
            throw(uci::base::UCIException) = 0;


         /** Returns the accessor that provides access to the complex content that is identified by the ConflictingObjectID.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictingObjectID.
           */
         virtual uci::type::ID_Type& getConflictingObjectID()
            throw(uci::base::UCIException) = 0;


         /** Sets the complex content that is identified by the ConflictingObjectID to the contents of the complex content that is
           * accessed by the specified accessor.
           *
           * @param value The accessor that provides access to the sequence whose contents are to be used to set the contents of
           *      the sequence identified by ConflictingObjectID
           */
         virtual void setConflictingObjectID(const uci::type::ID_Type& value)
            throw(uci::base::UCIException) = 0;


         /** Returns whether the Element that is identified by ConflictingObjectID exists (is enabled) or not.
           *
           * @return A boolean indicating whether the Element identified by ConflictingObjectID is emabled or not
           */
         virtual bool hasConflictingObjectID() const
            throw(uci::base::UCIException) = 0;


         /** Enables the Element that is identified by ConflictingObjectID
           *
           * @param type = uci::type::accessorType::iD_Type This Accessor's accessor type
           */
         virtual void enableConflictingObjectID(uci::base::accessorType::AccessorType type = uci::type::accessorType::iD_Type)
            throw(uci::base::UCIException) = 0;


         /** Clears (disabled) the Element that is identified by ConflictingObjectID */
         virtual void clearConflictingObjectID()
            throw(uci::base::UCIException) = 0;


         /** Returns the accessor that provides access to the complex content that is identified by the ConflictLocation.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictLocation.
           */
         virtual const uci::type::ConflictLocationType& getConflictLocation() const
            throw(uci::base::UCIException) = 0;


         /** Returns the accessor that provides access to the complex content that is identified by the ConflictLocation.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictLocation.
           */
         virtual uci::type::ConflictLocationType& getConflictLocation()
            throw(uci::base::UCIException) = 0;


         /** Sets the complex content that is identified by the ConflictLocation to the contents of the complex content that is
           * accessed by the specified accessor.
           *
           * @param value The accessor that provides access to the sequence whose contents are to be used to set the contents of
           *      the sequence identified by ConflictLocation
           */
         virtual void setConflictLocation(const uci::type::ConflictLocationType& value)
            throw(uci::base::UCIException) = 0;


         /** Returns whether the Element that is identified by ConflictLocation exists (is enabled) or not.
           *
           * @return A boolean indicating whether the Element identified by ConflictLocation is emabled or not
           */
         virtual bool hasConflictLocation() const
            throw(uci::base::UCIException) = 0;


         /** Enables the Element that is identified by ConflictLocation
           *
           * @param type = uci::type::accessorType::conflictLocationType This Accessor's accessor type
           */
         virtual void enableConflictLocation(uci::base::accessorType::AccessorType type = uci::type::accessorType::conflictLocationType)
            throw(uci::base::UCIException) = 0;


         /** Clears (disabled) the Element that is identified by ConflictLocation */
         virtual void clearConflictLocation()
            throw(uci::base::UCIException) = 0;


         /** Returns the accessor that provides access to the complex content that is identified by the ConflictTime.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictTime.
           */
         virtual const uci::type::DateTimeRangeType& getConflictTime() const
            throw(uci::base::UCIException) = 0;


         /** Returns the accessor that provides access to the complex content that is identified by the ConflictTime.
           *
           * @return The acecssor that provides access to the complex content that is identified by ConflictTime.
           */
         virtual uci::type::DateTimeRangeType& getConflictTime()
            throw(uci::base::UCIException) = 0;


         /** Sets the complex content that is identified by the ConflictTime to the contents of the complex content that is
           * accessed by the specified accessor.
           *
           * @param value The accessor that provides access to the sequence whose contents are to be used to set the contents of
           *      the sequence identified by ConflictTime
           */
         virtual void setConflictTime(const uci::type::DateTimeRangeType& value)
            throw(uci::base::UCIException) = 0;


         /** Returns whether the Element that is identified by ConflictTime exists (is enabled) or not.
           *
           * @return A boolean indicating whether the Element identified by ConflictTime is emabled or not
           */
         virtual bool hasConflictTime() const
            throw(uci::base::UCIException) = 0;


         /** Enables the Element that is identified by ConflictTime
           *
           * @param type = uci::type::accessorType::dateTimeRangeType This Accessor's accessor type
           */
         virtual void enableConflictTime(uci::base::accessorType::AccessorType type = uci::type::accessorType::dateTimeRangeType)
            throw(uci::base::UCIException) = 0;


         /** Clears (disabled) the Element that is identified by ConflictTime */
         virtual void clearConflictTime()
            throw(uci::base::UCIException) = 0;


         /** Returns the bounded list that is identified by the AffectedTaskID.
           *
           * @return The bounded list identified by AffectedTaskID.
           */
         virtual const uci::type::ConflictType::AffectedTaskID& getAffectedTaskID() const
            throw(uci::base::UCIException) = 0;


         /** Returns the bounded list that is identified by the AffectedTaskID.
           *
           * @return The bounded list identified by AffectedTaskID.
           */
         virtual uci::type::ConflictType::AffectedTaskID& getAffectedTaskID()
            throw(uci::base::UCIException) = 0;


         /** Sets the bounded list that is identified by the AffectedTaskID.
           *
           * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
           *      accessor
           */
         virtual void setAffectedTaskID(const uci::type::ConflictType::AffectedTaskID& value)
            throw(uci::base::UCIException) = 0;



      protected:

         /** The constructor [only available to derived classes]. */
         ConflictType()
         { }

         /** The copy constructor [only available to derived classes]
           *
           * @param rhs The ConflictType to copy from
           */
         ConflictType(const ConflictType& rhs)
         {
            (void)rhs;
         }

         /** The assignment operator. Sets the contents of this ConflictType to the contents of the ConflictType on the right hand
           * side (rhs) of the assignment operator.ConflictType [only available to derived classes]
           *
           * @param rhs The ConflictType on the right hand side (rhs) of the assignment operator whose contents are used to set
           *      the contents of this uci::type::ConflictType
           * @return A constant reference to this ConflictType.
           */
         const ConflictType& operator=(const ConflictType& rhs)
         {
            (void)rhs;

            return *this;
         }


      }; // ConflictType


   } // Namespace: type
} // Namespace: uci

#endif // Uci__Type__ConflictType_h

