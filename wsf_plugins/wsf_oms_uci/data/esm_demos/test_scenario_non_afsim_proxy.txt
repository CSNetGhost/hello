# ****************************************************************************
# CUI//REL TO USA ONLY
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# Platform "sense" is internally moved. ESM UCI messages are received
# for platform "sense" in the other simulation.
# The ESM sensor on platfom sense is run in the other simulation.

include ./test_scenario_common.txt

dis_interface 
   application 1

   // Entity type SIMPLE_SENSE maps to SENSE type in uci-enabled app
   entity_type SIMPLE_SENSE 1:2:225:1:12:0:0   
   
   entity_id sense 1
   entity_id target_1 2
   entity_id target_2 3
   entity_id target_3 4
   
end_dis_interface

uci_interface
   service_name ship1
   service_descriptor SHIP1
end_uci_interface

platform sense SIMPLE_SENSE

   radar_signature FIGHTER_RADAR_SIGNATURE
   position 39:30n 86:31w
   altitude  1000 feet
   
   edit uci_component computer
      processor esm_command
      debug
   end_uci_component
   
   add processor esm_command WSF_SCRIPT_PROCESSOR
      internal_link computer
      on_message 
      
         type UCI_ESM_CAPABILITY_MESSAGE // esm capability message 
         script
            SuppressMessage();
            writeln_d(TIME_NOW, ": Received UCI esm capability message!!");
            
            UCI_ESM_CapabilityMessage msg = (UCI_ESM_CapabilityMessage)MESSAGE;

            if (msg.IsValid())
            {
               RequestControl(msg);
            }
            else
            {
               writeln_d("Invalid UCI_ESM_CapabilityMessage");
            }
         end_script
         
         type UCI_CONTROL_REQUEST_STATUS_MESSAGE // Control request status
         script
            SuppressMessage();
            UCI_ControlRequestStatusMessage msg = (UCI_ControlRequestStatusMessage)MESSAGE;
            if (msg.IsApproved())
            {
               writeln_d("Control request ", msg.UUID(), " has been accepted!");
            }
            else if (msg.IsRejected())
            {
               writeln_d("Control request ", msg.UUID(), " was rejected because ",
                        msg.GetRemarks());
            }
            else if (msg.IsDeleted())
            {
               writeln_d("Control request ", msg.UUID(), " was deleted because ",
                        msg.GetRemarks());
            }
            else if (msg.IsPending())
            {
               writeln_d("Control request ", msg.UUID(), " is pending.");
            }
         end_script
         
         type UCI_ESM_CAPABILITY_STATUS_MESSAGE
         script
            SuppressMessage();
            UCI_ESM_CapabilityStatusMessage msg = (UCI_ESM_CapabilityStatusMessage)MESSAGE;
            for (int i = 0; i < msg.Size(); i = i + 1)
            {
               string status;
               UCI_CapabilityStatus capStatus = msg.CapabilityStatus(i);
               if (capStatus.IsAvailable())
               {
                  status = "AVAILABLE";
               }
               else if (capStatus.IsDisabled())
               {
                   status = "DISABLED";  
               }
               else if (capStatus.IsExpended())
               {
                   status = "EXPENDED";  
               }
               else if (capStatus.IsFaulted())
               {
                   status =  "FAULTED";  
               }
               else if (capStatus.IsTemporarilyUnavailable())
               {
                   status = "TEMPORARILTY_UNAVAILABLE";  
               }
               else if (capStatus.IsUnavailable())
               {
                   status = "UNAVAILABLE";  
               }
               else
               {
                  status = "UNKNOWN";
               }
               
               writeln_d("Capability ", i, " status: ", status);
            }
         end_script
         
         default
         script
            writeln_d("Received message: ", MESSAGE.Type());
         end_script         
         
      end_on_message
      
      execute at_interval_of 10 seconds
         if (!capabilities.Empty())
         {  
            UpdateDirection();
            SendCommand();
            UpdateMode();
         }
      end_execute
      
   end_processor
   
end_platform

platform target_1 TARGET
   side red
   position 39:31n 86:31w altitude 1000 ft
   heading 180 deg
end_platform

platform target_2 TARGET
   side red
   position 39:30n 86:30w altitude 2500 ft
   heading -90 deg
   
end_platform

platform target_3 TARGET
   side red
   position 39:30n 86:32w altitude 4000 ft
   heading 90 deg
end_platform

realtime
