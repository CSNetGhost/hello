# ****************************************************************************
# CUI//REL TO USA ONLY
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

// test of architecture for oms / uci messaging

include_once sensor_definitions.txt

platform_type SIMPLE_SENSE WSF_PLATFORM
   side blue
   icon f-18
   uci_component computer COMPUTER

   end_uci_component

   script_variables 
      Set<string> systemIds = {};
      Map<string, UCI_CapabilityId> controlRequests = {};
      Array<UCI_CapabilityId> capabilities = {};
      bool enable = true;
      double currentAz = 0;
      double currentEl = 0;
      int currentMode = 0;
      int count = 0;
   end_script_variables

   script void SendSettingsCommand()
      WsfProcessor sp = PLATFORM.Processor("irst_command");

      UCI_CapabilityState state = UCI_CapabilityState.ENABLE();
      if (!enable)
      {
         state = UCI_CapabilityState.DISABLE();
      }

      UCI_CapabilityId id = capabilities[currentMode];
      UCI_POST_SettingsCommandMessage scMsg = UCI_POST_SettingsCommandMessage.Construct(id,
                                                                                        state);
      sp.SendMessage(scMsg);
   end_script

   script void RequestControl(UCI_POST_CapabilityMessage aMsg)
      WsfProcessor sp = PLATFORM.Processor("irst_command");
      string systemID = aMsg.Header().SystemId().UUID();
      if (!systemIds.Exists(systemID))
      {
         int size = aMsg.Size();
         for(int i = 0; i < size; i = i +1)
         {
            UCI_CapabilityId capabilityId = aMsg.Capability(i).CapabilityId();
            string uuid = capabilityId.UUID();
            string description = capabilityId.Descriptor();
            writeln_d(i, " : ", uuid, " : ", description);

            // send a post control request message
            UCI_Control controlType = UCI_Control.CAPABILITY_PRIMARY();
            UCI_ControlRequest requestType = UCI_ControlRequest.ACQUIRE();
            UCI_ControlRequestMessage crm = UCI_ControlRequestMessage.Construct(controlType,
                                                                                requestType,
                                                                                aMsg.Header().SystemId(),
                                                                                capabilityId);

            controlRequests.Set(crm.UUID(), capabilityId);
            sp.SendMessage(crm);   
            systemIds.Insert(systemID); 
            capabilities.PushBack(capabilityId);

            //initialize all modes to the desired state
            int initialMode = currentMode;
            for (int i = 0; i < capabilities.Size(); i +=1)
            {
               currentMode = i;
               SendSettingsCommand();
            }
            currentMode = initialMode;
         }
      }
   end_script

   script void UpdateDirection()
      count = MATH.Mod(count + 1, 5);

      if (count == 0)
      {
         currentAz = 0;
         currentEl = 0;
      }
      else if (count == 1)
      {
         currentAz = -MATH.PI_OVER_2();
         currentEl = 0;
      }
      else if (count == 2)
      {
         currentAz = 0;
         currentEl = MATH.PI_OVER_2();
      }
      else if (count == 3)
      {
         currentAz = MATH.PI_OVER_2();
         currentEl = 0;
      }
      else if (count == 4)
      {
         currentAz = 0;
         currentEl = -MATH.PI_OVER_2();
      }

   end_script

   script void SendCommand()
      WsfProcessor sp = PLATFORM.Processor("irst_command");
      UCI_CapabilityId id = capabilities[currentMode];
      UCI_POST_CapabilityCommand capCommand = UCI_POST_CapabilityCommand.Construct(id);
      UCI_Pointing pointing = UCI_Pointing.Construct(UCI_LOS_Reference.BODY(),
                                                     currentAz,
                                                     currentEl);
      capCommand.SetPointing(pointing);
      UCI_POST_Command postCommand = UCI_POST_Command.Construct(capCommand);
      UCI_POST_CommandMessage pcm = UCI_POST_CommandMessage.Construct(postCommand);
      
      string enableStr = "enabled";
      if (!enable)
      {
         enableStr = "disabled";
      }
      writeln_d("Sending command:");
      writeln_d("   Az: ", currentAz);
      writeln_d("   El: ", currentEl);
      writeln_d("   Status: ", enableStr);
      writeln_d("   Mode: ", currentMode);
      sp.SendMessage(pcm);
   end_script
   
   script void UpdateMode()
      //Select the next mode
      if (count == 0)
      {
         currentMode = MATH.Mod(currentMode+1, capabilities.Size());
         if (currentMode == 0)
         {
            enable = !enable;
         }
         SendSettingsCommand();
      }
   end_script

   mover WSF_AIR_MOVER
   end_mover

end_platform_type

platform_type SENSE WSF_PLATFORM    
   side blue
   icon f-18
   
   uci_component irst_uci_component IRST
      sensor irst
      mode_uuid first_mode 8BEDF810-EC9D-40E4-8F4A-000000000000
      mode_uuid second_mode 8BEDF810-EC9D-40E4-8F4A-000000000001
      update_message_interval 5 seconds
      debug
      internal_link computer
   end_uci_component

   uci_component computer COMPUTER
      internal_link irst_uci_component
   end_uci_component
   
   sensor irst IRST
   end_sensor
   
   mover WSF_AIR_MOVER 
   end_mover   
end_platform_type

platform_type TARGET WSF_PLATFORM 
   icon target
   side red
end_platform_type

dis_interface 
   exercise 1
   site 1
   autostart
   
   connections 
      broadcast 255.255.255.255 port 3000
   end_connections
   
   entity_type TARGET 1:2:222:1:19:11:0
   
end_dis_interface

start_time_now
end_time 1 hour
