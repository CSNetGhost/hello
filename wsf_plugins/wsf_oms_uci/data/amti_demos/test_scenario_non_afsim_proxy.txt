# ****************************************************************************
# CUI//REL TO USA ONLY
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# UCI AMTI Test Scenario (non-AFSIM simulation proxy)
# Run this scenario concurrently in Warlock with amti_test_scenario_afsim.txt
# platform "sense" is internally moved.  AMTI (AMTI) UCI messages are received
# for platform "sense" in the other simulation.
# the AMTI sensor on platfom sense is run in the other simulation

include ./test_scenario_common.txt

dis_interface 
   application 1

   // Entity type SIMPLE_SENSE maps to SENSE type in uci-enabled app
   entity_type SIMPLE_SENSE 1:2:225:1:12:0:0   
   
   entity_id sense 1
   entity_id target_1 2
   entity_id target_2 3
   entity_id target_3 4
end_dis_interface

platform sense SIMPLE_SENSE
   radar_signature FIGHTER_RADAR_SIGNATURE
   position 39:30n 86:31w
   altitude  1000 feet
   
   edit uci_component computer
      processor amti_command
   end_uci_component

   add processor amti_command WSF_SCRIPT_PROCESSOR
      internal_link computer
      
      on_message 
         type UCI_AMTI_CAPABILITY_MESSAGE // amti capability message 
         script
            SuppressMessage();
            writeln_d(TIME_NOW, ": Received UCI AMTI Capability Message");
            
            UCI_AMTI_CapabilityMessage msg = (UCI_AMTI_CapabilityMessage)MESSAGE;

            if (msg.IsValid())
            {
               RequestControl(msg);               
            }
            else
            {
               writeln_d("Received invalid UCI AMTI Capability Message");
            }
         end_script
         
         type UCI_CONTROL_REQUEST_STATUS_MESSAGE
         script
            SuppressMessage();
            UCI_ControlRequestStatusMessage msg = (UCI_ControlRequestStatusMessage)MESSAGE;
            if (msg.IsApproved())
            {
               writeln_d("Control request ", msg.UUID(), " has been accepted!");
            }
            else if (msg.IsRejected())
            {
               writeln_d("Control request ", msg.UUID(), " was rejected because ",
                        msg.GetRemarks());
            }
            else if (msg.IsDeleted())
            {
               writeln_d("Control request ", msg.UUID(), " was deleted because ",
                        msg.GetRemarks());
            }
            else if (msg.IsPending())
            {
               writeln_d("Control request ", msg.UUID(), " is pending.");
            }
         end_script

         default
         script
            SuppressMessage();
            writeln_d("Received message ", MESSAGE.Type());
         end_script
                
      end_on_message

      execute at_interval_of 10 seconds
         if (!capabilities.Empty())
         {
            UpdateDirection();
            SendCommand();
            UpdateMode();
         }
         else
         {
            writeln_d("No capabilities");
         }

      end_execute
   end_processor

end_platform

platform target_1 TARGET
   radar_signature FIGHTER_RADAR_SIGNATURE
   side red
   position 39:31n 86:31w altitude 1000 ft
   heading 180 deg
   sensor esm
   end_sensor
end_platform

platform target_2 TARGET
   radar_signature FIGHTER_RADAR_SIGNATURE
   side red
   position 39:30n 86:30w altitude 3000 ft
   heading -90 deg
   sensor esm
   end_sensor
end_platform

platform target_3 TARGET
   radar_signature FIGHTER_RADAR_SIGNATURE
   side red
   position 39:30n 86:31:45w altitude 4500 ft
   heading 90 deg
   sensor esm
   end_sensor
end_platform

realtime
