// ****************************************************************************
// CUI
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Copyright (C) 2022 Stellar Science; U.S. Government has Unlimited Rights.
//
// The use, dissemination or disclosure of data in this file is subject to
// limitation or restriction. See accompanying README and LICENSE for details.
// ****************************************************************************

#include <gtest/gtest.h>

#include "AfperfSummarizerInterface.hpp"
#include "V1Parser.hpp"

namespace
{
class AccumulationSummarizer : public artificer::AfperfSummarizerInterface
{
public:
   virtual void Summarize(const artificer::AfperfRecord& record) { mParseResults.push_back(record); }

   const std::vector<artificer::AfperfRecord>& GetResults() const { return mParseResults; }

private:
   std::vector<artificer::AfperfRecord> mParseResults;
};

template<class PARSER>
void testContentParsesTo(const std::string& content, const std::vector<artificer::AfperfRecord>& expectedResults)
{
   PARSER                 parser;
   AccumulationSummarizer summarizer;

   std::stringstream contentStream(content);
   parser.Parse(contentStream, summarizer);
   EXPECT_EQ(summarizer.GetResults(), expectedResults);
}
} // namespace


TEST(artificer, basicCsv)
{
   using TestCase         = std::pair<std::string, std::vector<artificer::AfperfRecord>>;
   const TestCase cases[] = {{"1", {{"1"}}},
                             {"1\r", {{"1\r"}}}, // \r is not a separator unless followed by \n
                             {"1\r2", {{"1\r2"}}},
                             {"1\n", {{"1"}}},
                             {"1\r\n", {{"1"}}},
                             {"1,\r\n", {{"1", ""}}},
                             {",1\r\n", {{"", "1"}}},
                             {"1\n2,3,4", {{"1"}, {"2", "3", "4"}}},
                             {"1\r\n2,3,4", {{"1"}, {"2", "3", "4"}}},
                             {"1,2,3\n4,5,6\n7,8,9\n", {{"1", "2", "3"}, {"4", "5", "6"}, {"7", "8", "9"}}},
                             {"1,2,3\r\n4,5,6\r\n7,8,9\r\n", {{"1", "2", "3"}, {"4", "5", "6"}, {"7", "8", "9"}}},
                             {"1,2,3\r\n4,5,6\n7,8,9\r\n", {{"1", "2", "3"}, {"4", "5", "6"}, {"7", "8", "9"}}},
                             {"multi char,values\r\nmulti,char values\n",
                              {{"multi char", "values"}, {"multi", "char values"}}}};

   for (const auto& curCase : cases)
   {
      testContentParsesTo<artificer::V1Parser>(curCase.first, curCase.second);
   }
}

TEST(artificer, generatedContent)
{
   // Some actual content generated by a different unit test.  Test that we parse what we expect.
   const std::string                          content(R"(8,69213659993400,ns,2022-01-11 06:33:54,0,mission,2.9.0,
1,69213659993400,0,0,Timestamp,ns,std::chrono::steady_clock,Monotonic clock used for all timestamps
1,69213659993400,1,0,Count,,Count,Number of times something happens
11,69213662626300,0,0,Section1,
5,69213662732600,0,0,demoFunction1,
5,69213662825000,0,0,inner1 demoFunction1,
5,69213662909300,0,0,demoFunction2,
6,69213662996400,0
6,69213663055700,0
5,69213663123100,0,0,inner2 demoFunction1,
5,69213663213600,0,0,demoFunction2,
6,69213663297100,0
6,69213663585300,0
6,69213663638500,0
10,69213663676800,69213662732100,0,0,total,0,944700,1,1
11,69213663759800,0,1,Section2,
11,69213663824500,0,2,Section2,
5,69213663878200,0,0,demoFunction1,
5,69213663933000,0,0,inner1 demoFunction1,
5,69213663991100,0,0,demoFunction2,
6,69213664047100,0
6,69213664073900,0
5,69213664102500,0,0,inner2 demoFunction1,
5,69213664178300,0,0,demoFunction2,
6,69213664246800,0
6,69213664301000,0
6,69213664350400,0
5,69213664387000,0,0,demoFunction1,
5,69213664449900,0,0,inner1 demoFunction1,
5,69213664506800,0,0,demoFunction2,
6,69213664546800,0
6,69213664581300,0
5,69213664619000,0,0,inner2 demoFunction1,
5,69213664673900,0,0,demoFunction2,
6,69213664726200,0
6,69213664761800,0
6,69213664796800,0
10,69213664830100,69213664386300,2,0,total,0,443800,1,1
10,69213664831000,69213664830900,1,0,total,0,508800,1,3
)");
   const std::vector<artificer::AfperfRecord> expectedResult = {
      {"8", "69213659993400", "ns", "2022-01-11 06:33:54", "0", "mission", "2.9.0", ""},
      {"1", "69213659993400", "0", "0", "Timestamp", "ns", "std::chrono::steady_clock", "Monotonic clock used for all timestamps"},
      {"1", "69213659993400", "1", "0", "Count", "", "Count", "Number of times something happens"},
      {"11", "69213662626300", "0", "0", "Section1", ""},
      {"5", "69213662732600", "0", "0", "demoFunction1", ""},
      {"5", "69213662825000", "0", "0", "inner1 demoFunction1", ""},
      {"5", "69213662909300", "0", "0", "demoFunction2", ""},
      {"6", "69213662996400", "0"},
      {"6", "69213663055700", "0"},
      {"5", "69213663123100", "0", "0", "inner2 demoFunction1", ""},
      {"5", "69213663213600", "0", "0", "demoFunction2", ""},
      {"6", "69213663297100", "0"},
      {"6", "69213663585300", "0"},
      {"6", "69213663638500", "0"},
      {"10", "69213663676800", "69213662732100", "0", "0", "total", "0", "944700", "1", "1"},
      {"11", "69213663759800", "0", "1", "Section2", ""},
      {"11", "69213663824500", "0", "2", "Section2", ""},
      {"5", "69213663878200", "0", "0", "demoFunction1", ""},
      {"5", "69213663933000", "0", "0", "inner1 demoFunction1", ""},
      {"5", "69213663991100", "0", "0", "demoFunction2", ""},
      {"6", "69213664047100", "0"},
      {"6", "69213664073900", "0"},
      {"5", "69213664102500", "0", "0", "inner2 demoFunction1", ""},
      {"5", "69213664178300", "0", "0", "demoFunction2", ""},
      {"6", "69213664246800", "0"},
      {"6", "69213664301000", "0"},
      {"6", "69213664350400", "0"},
      {"5", "69213664387000", "0", "0", "demoFunction1", ""},
      {"5", "69213664449900", "0", "0", "inner1 demoFunction1", ""},
      {"5", "69213664506800", "0", "0", "demoFunction2", ""},
      {"6", "69213664546800", "0"},
      {"6", "69213664581300", "0"},
      {"5", "69213664619000", "0", "0", "inner2 demoFunction1", ""},
      {"5", "69213664673900", "0", "0", "demoFunction2", ""},
      {"6", "69213664726200", "0"},
      {"6", "69213664761800", "0"},
      {"6", "69213664796800", "0"},
      {"10", "69213664830100", "69213664386300", "2", "0", "total", "0", "443800", "1", "1"},
      {"10", "69213664831000", "69213664830900", "1", "0", "total", "0", "508800", "1", "3"}};

   testContentParsesTo<artificer::V1Parser>(content, expectedResult);
}

TEST(artificer, csvWithQuotesEscapesComments)
{
   using TestCase         = std::pair<std::string, std::vector<artificer::AfperfRecord>>;
   const TestCase cases[] = {
      {"\"1\"", {{"1"}}},
      {"\"1\r\"", {{"1\r"}}},
      {"\"1\r\n\"", {{"1\r\n"}}},
      {"\"1\r\n2\",3,4", {{"1\r\n2", "3", "4"}}},
      {"1\r\n\"2,3\",4", {{"1"}, {"2,3", "4"}}},
      {"\"1,2\",3\n4,\"5\"\",6\"\n7,\"8,9\"\n", {{"1,2", "3"}, {"4", "5\",6"}, {"7", "8,9"}}},
      {"1\r\n#2,3\n4", {{"1"}, {"4"}}},
      {"#comment\r\n2,3\n4", {{"2", "3"}, {"4"}}},
      {"\r\n2,3\n4", {{"2", "3"}, {"4"}}},
   };
   for (const auto& curCase : cases)
   {
      testContentParsesTo<artificer::V1Parser>(curCase.first, curCase.second);
   }
}
