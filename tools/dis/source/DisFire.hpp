// ****************************************************************************
// CUI
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Copyright 2003-2015 The Boeing Company. All rights reserved.
//
// The use, dissemination or disclosure of data in this file is subject to
// limitation or restriction. See accompanying README and LICENSE for details.
// ****************************************************************************
// ****************************************************************************
// Updated by Infoscitex, a DCS Company.
// ****************************************************************************

#ifndef DISFIRE_HPP
#define DISFIRE_HPP

#include "dis_export.h"

#include <iostream>

#include "DisEntityId.hpp"
#include "DisEntityType.hpp"
#include "DisEventId.hpp"
#include "DisPdu.hpp"
#include "UtEllipsoidalEarth.hpp"
#include "UtMath.hpp"

class GenI;
class GenO;

/*!
 * Encapsulates data for the firing of a weapon or expendable
 */
class DIS_EXPORT DisFire : public DisPdu
{
public:
   DisFire();
   DisFire(DisPdu& aPdu, GenI& aGenI);
   DisFire(GenI& aGenI);
   ~DisFire() override = default;

   DisPdu* Clone() const override;

   int                GetClass() const override;
   const DisEntityId& GetOriginatingEntity() const override;

   // Accessors

   const DisEntityId&   GetFiringEntity() const;
   const DisEntityId&   GetTargetEntity() const;
   const DisEntityId&   GetWeaponEntity() const;
   const DisEventId&    GetEvent() const;
   DisUint32            GetFireMissionIndex() const;
   void                 GetLocation(DisFloat64& aLocationX, DisFloat64& aLocationY, DisFloat64& aLocationZ) const;
   const DisEntityType& GetWeaponType() const;
   DisEnum16            GetWarhead() const;
   DisEnum16            GetFuse() const;
   DisUint16            GetQuantity() const;
   DisUint16            GetRate() const;
   void                 GetVelocity(DisFloat32& aVelocityX, DisFloat32& aVelocityY, DisFloat32& aVelocityZ) const;
   DisFloat32           GetRange() const;

   // Mutators

   void SetFiringEntity(const DisEntityId& aFiringEntity);
   void SetTargetEntity(const DisEntityId& aTargetEntity);
   void SetWeaponEntity(const DisEntityId& aWeaponEntity);
   void SetEvent(const DisEventId& aEvent);
   void SetFireMissionIndex(DisUint32 aFireMissionIndex);
   void SetLocation(DisFloat64 aLocationX, DisFloat64 aLocationY, DisFloat64 aLocationZ);
   void SetWeaponType(const DisEntityType& aWeaponType);
   void SetWarhead(DisEnum16 aWarhead);
   void SetFuse(DisEnum16 aFuse);
   void SetQuantity(DisUint16 aQuantity);
   void SetRate(DisUint16 aRate);
   void SetVelocity(DisFloat32 aVelocityX, DisFloat32 aVelocityY, DisFloat32 aVelocityZ);
   void SetRange(DisFloat32 aRange);

   // Input/Output

   void Get(GenI& aGenI) override;
   void Put(GenO& aGenO) override;

   //! Data Validation
   bool IsValid() const override;

   void        Stream(std::ostream& aStream) const;
   std::string ToString() const;

private:
   void GetMemberData(GenI& aGenI);

   /*!
    * Identifies the firing entity
    */
   DisEntityId mFiringEntity;
   /*!
    * Identifies the target entity
    */
   DisEntityId mTargetEntity;
   /*!
    * Specifies the entity identification of the fired munition or expendable
    */
   DisEntityId mWeaponEntity;
   /*!
    * Contains the event id generated by the firing entity to associate related firing and detonation events
    */
   DisEventId mEvent;
   /*!
    * Identifies the fire mission
    */
   DisUint32 mFireMissionIndex;
   /*!
    * Specifies the location that the munition was launched and is represented in world coordinates.
    */
   DisFloat64 mLocation[3];
   // The following fields are necessary for describing the types of munitions avaliable for firing
   /*!
    * Specifies the type of weapon
    */
   DisEntityType mWeaponType;
   /*!
    * Specifies the type of warhead
    */
   DisEnum16 mWarhead;
   /*!
    * Specifies the fusing
    */
   DisEnum16 mFuse;
   /*!
    * Represents the number of rounds fired in the burst or the number of munitions simultaneously launched
    */
   DisUint16 mQuantity;
   /*!
    * Indicates the rate of fire such as rounds per minute for a munition.
    * If the quantity field is equal to one then the rate should be equal to zero.
    */
   DisUint16 mRate;
   /*!
    * Specifies the velocity of the fired munition at the point when the issuing simulation
    * application intends the externally visible effects of the launch (such as exhaust plume
    * muzzle blast) to be visible. The velocity is represented in world coordinates.
    */
   DisFloat32 mVelocity[3];
   /*!
    * Specifies the range that an entity's fire control systme as assumed in computing the fire control solution.
    * If the range is unknown or unavaliable then this field should be zero.
    */
   DisFloat32 mRange;
};

// Accessors

inline const DisEntityId& DisFire::GetFiringEntity() const
{
   return mFiringEntity;
}
inline const DisEntityId& DisFire::GetTargetEntity() const
{
   return mTargetEntity;
}
inline const DisEntityId& DisFire::GetWeaponEntity() const
{
   return mWeaponEntity;
}
inline const DisEventId& DisFire::GetEvent() const
{
   return mEvent;
}
inline DisUint32 DisFire::GetFireMissionIndex() const
{
   return mFireMissionIndex;
}
inline void DisFire::GetLocation(DisFloat64& aLocationX, DisFloat64& aLocationY, DisFloat64& aLocationZ) const
{
   aLocationX = mLocation[0];
   aLocationY = mLocation[1];
   aLocationZ = mLocation[2];
}
inline const DisEntityType& DisFire::GetWeaponType() const
{
   return mWeaponType;
}
inline DisEnum16 DisFire::GetWarhead() const
{
   return mWarhead;
}
inline DisEnum16 DisFire::GetFuse() const
{
   return mFuse;
}
inline DisUint16 DisFire::GetQuantity() const
{
   return mQuantity;
}
inline DisUint16 DisFire::GetRate() const
{
   return mRate;
}
inline void DisFire::GetVelocity(DisFloat32& aVelocityX, DisFloat32& aVelocityY, DisFloat32& aVelocityZ) const
{
   aVelocityX = mVelocity[0];
   aVelocityY = mVelocity[1];
   aVelocityZ = mVelocity[2];
}
inline DisFloat32 DisFire::GetRange() const
{
   return mRange;
}

// Mutators

inline void DisFire::SetFiringEntity(const DisEntityId& aFiringEntity)
{
   mFiringEntity = aFiringEntity;
}
inline void DisFire::SetTargetEntity(const DisEntityId& aTargetEntity)
{
   mTargetEntity = aTargetEntity;
}
inline void DisFire::SetWeaponEntity(const DisEntityId& aWeaponEntity)
{
   mWeaponEntity = aWeaponEntity;
}
inline void DisFire::SetEvent(const DisEventId& aEvent)
{
   mEvent = aEvent;
}
inline void DisFire::SetFireMissionIndex(DisUint32 aFireMissionIndex)
{
   mFireMissionIndex = aFireMissionIndex;
}
inline void DisFire::SetLocation(DisFloat64 aLocationX, DisFloat64 aLocationY, DisFloat64 aLocationZ)
{
   mLocation[0] = aLocationX;
   mLocation[1] = aLocationY;
   mLocation[2] = aLocationZ;
}
inline void DisFire::SetWeaponType(const DisEntityType& aWeaponType)
{
   mWeaponType = aWeaponType;
}
inline void DisFire::SetWarhead(DisEnum16 aWarhead)
{
   mWarhead = aWarhead;
}
inline void DisFire::SetFuse(DisEnum16 aFuse)
{
   mFuse = aFuse;
}
inline void DisFire::SetQuantity(DisUint16 aQuantity)
{
   mQuantity = aQuantity;
}
inline void DisFire::SetRate(DisUint16 aRate)
{
   mRate = aRate;
}
inline void DisFire::SetVelocity(DisFloat32 aVelocityX, DisFloat32 aVelocityY, DisFloat32 aVelocityZ)
{
   mVelocity[0] = aVelocityX;
   mVelocity[1] = aVelocityY;
   mVelocity[2] = aVelocityZ;
}
inline void DisFire::SetRange(DisFloat32 aRange)
{
   mRange = aRange;
}

#endif
