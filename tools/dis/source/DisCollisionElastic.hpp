// *****************************************************************************
// CUI
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Copyright 2021 Infoscitex, a DCS Company. All rights reserved
//
// The use, dissemination or disclosure of data in this file is subject to
// limitation or restriction. See accompanying README and LICENSE for details.
// ****************************************************************************

#ifndef DISCOLLISIONELASTIC_HPP
#define DISCOLLISIONELASTIC_HPP

#include "dis_export.h"

#include <array>
#include <string>

#include "DisEntityId.hpp"
#include "DisEventId.hpp"
#include "DisPdu.hpp"
#include "DisPduEnums.hpp"
#include "UtVec3.hpp"

class GenI;
class GenO;

/**!
 * Collision-Elastic PDU is used to communicate information about an elastic collision between two
 * simulated entities that accounts for:
 * a) Linear and rotational momentum transfer
 * b) Variable elasticity
 * c) Momentum transfer that is dependent on surface orientation
 */
class DIS_EXPORT DisCollisionElastic : public DisPdu
{
public:
   DisCollisionElastic();
   DisCollisionElastic(const DisCollisionElastic& aSrc);
   DisCollisionElastic(const DisPdu& aPdu, GenI& aGenI);
   explicit DisCollisionElastic(GenI& aGenI);
   ~DisCollisionElastic() = default;

   DisCollisionElastic* Clone() const override;
   int                  GetClass() const override;
   int                  GetFamily() const override;

   // Accessors
   const DisEntityId& GetOriginatingEntity() const override;
   const DisEntityId& GetIssuingEntityId() const;
   const DisEntityId& GetCollidingEntityId() const;
   const DisEventId&  GetEventId() const;
   void               GetContactVelocity(DisFloat32& aVelocityX, DisFloat32& aVelocityY, DisFloat32& aVelocityZ) const;
   DisFloat32         GetMass() const;
   void               GetImpactLocation(DisFloat32& aLocationX, DisFloat32& aLocationY, DisFloat32& aLocationZ) const;
   DisFloat32         GetCollisionIntResultXX() const;
   DisFloat32         GetCollisionIntResultXY() const;
   DisFloat32         GetCollisionIntResultXZ() const;
   DisFloat32         GetCollisionIntResultYY() const;
   DisFloat32         GetCollisionIntResultYZ() const;
   DisFloat32         GetCollisionIntResultZZ() const;
   void               GetSurfaceNormal(DisFloat32& aX, DisFloat32& aY, DisFloat32& aZ) const;
   DisFloat32         GetRestitutionCoefficient() const;

   // Mutators
   void SetIssuingEntityId(const DisEntityId& aEntityId);
   void SetCollidingEntityId(const DisEntityId& aEntityId);
   void SetEventId(const DisEventId& aEventId);
   void SetContactVelocity(DisFloat32 aVelocityX, DisFloat32 aVelocityY, DisFloat32 aVelocityZ);
   void SetMass(DisFloat32 aMass);
   void SetImpactLocation(DisFloat32 aLocationX, DisFloat32 aLocationY, DisFloat32 aLocationZ);
   void SetCollisionIntResultXX(DisFloat32 aResult);
   void SetCollisionIntResultXY(DisFloat32 aResult);
   void SetCollisionIntResultXZ(DisFloat32 aResult);
   void SetCollisionIntResultYY(DisFloat32 aResult);
   void SetCollisionIntResultYZ(DisFloat32 aResult);
   void SetCollisionIntResultZZ(DisFloat32 aResult);
   void SetSurfaceNormal(DisFloat32 aX, DisFloat32 aY, DisFloat32 aZ);
   void SetRestitutionCoefficient(DisFloat32 aCoefficient);

   // LOGGING
   std::string         GetStringId() const override;
   virtual std::string ToString() const override;

   // Input/Output
   void      Get(GenI& aGenI) override;
   DisUint16 GetLength() override;
   void      Put(GenO& aGenO) override;

   // Data Validation
   bool IsValid() const override;

private:
   void GetMemberData(GenI& aGenI);

   //! The entity that is issuing the PDU
   DisEntityId mIssuingEntityId;

   //! The entity that has collided with the issuing entity
   DisEntityId mCollidingEntityId;

   /**!
    * Identification generated by the issuing simulation application to
    * associate related collision events
    */
   DisEventId mEventId;

   DisUint16 mPadding = 0;

   /**!
    * The velocity at the simulation time the collision is detected
    * at the point the collision is detected
    */
   UtVec3<DisFloat32> mContactVelocity;

   //! The mass of the issuing entity
   DisFloat32 mMass = 0;

   /**!
    * The location of the collision with respect to the entity
    * with which the issuing entity collided
    */
   UtVec3<DisFloat32> mImpactLocation;

   /**!
    * These six records represent the six independent components of a
    * positive semidefinite matrix formed by premultiplying and postmultiplying
    * the tensor of inertia, by the antisymmetric matrix generated by the moment arm
    */
   std::array<DisFloat32, 6> mCollisionIntermediateResults;

   //! The normal vector to the surface at the point of collision detection.
   UtVec3<DisFloat32> mSurfaceNormal;

   //! The degree to which energy is conserved in a collision
   DisFloat32 mRestitutionCoefficient = 0;

   /**!
    * Specifies the smallest length (in octets) of this PDU (without header or any additional records).
    */
   static const DisUint16 cPDU_MIN_LENGTH_OCTETS = 88;
};

inline DisCollisionElastic* DisCollisionElastic::Clone() const
{
   return new DisCollisionElastic(*this);
}

inline int DisCollisionElastic::GetClass() const
{
   return static_cast<int>(DisEnum::Pdu::Type::CollisionElastic);
}

inline int DisCollisionElastic::GetFamily() const
{
   return static_cast<int>(DisEnum::Pdu::Family::EntityInformationInteraction);
}

inline const DisEntityId& DisCollisionElastic::GetOriginatingEntity() const
{
   return mIssuingEntityId;
}

// Accessors
inline const DisEntityId& DisCollisionElastic::GetIssuingEntityId() const
{
   return mIssuingEntityId;
}
inline const DisEntityId& DisCollisionElastic::GetCollidingEntityId() const
{
   return mCollidingEntityId;
}
inline const DisEventId& DisCollisionElastic::GetEventId() const
{
   return mEventId;
}
inline void DisCollisionElastic::GetContactVelocity(DisFloat32& aVelocityX, DisFloat32& aVelocityY, DisFloat32& aVelocityZ) const
{
   aVelocityX = mContactVelocity[0];
   aVelocityY = mContactVelocity[1];
   aVelocityZ = mContactVelocity[2];
}
inline DisFloat32 DisCollisionElastic::GetMass() const
{
   return mMass;
}
inline void DisCollisionElastic::GetImpactLocation(DisFloat32& aLocationX, DisFloat32& aLocationY, DisFloat32& aLocationZ) const
{
   aLocationX = mImpactLocation[0];
   aLocationY = mImpactLocation[1];
   aLocationZ = mImpactLocation[2];
}

inline DisFloat32 DisCollisionElastic::GetCollisionIntResultXX() const
{
   return mCollisionIntermediateResults[0];
}

inline DisFloat32 DisCollisionElastic::GetCollisionIntResultXY() const
{
   return mCollisionIntermediateResults[1];
}

inline DisFloat32 DisCollisionElastic::GetCollisionIntResultXZ() const
{
   return mCollisionIntermediateResults[2];
}

inline DisFloat32 DisCollisionElastic::GetCollisionIntResultYY() const
{
   return mCollisionIntermediateResults[3];
}

inline DisFloat32 DisCollisionElastic::GetCollisionIntResultYZ() const
{
   return mCollisionIntermediateResults[4];
}

inline DisFloat32 DisCollisionElastic::GetCollisionIntResultZZ() const
{
   return mCollisionIntermediateResults[5];
}

inline void DisCollisionElastic::GetSurfaceNormal(DisFloat32& aX, DisFloat32& aY, DisFloat32& aZ) const
{
   aX = mSurfaceNormal[0];
   aY = mSurfaceNormal[1];
   aZ = mSurfaceNormal[2];
}

inline DisFloat32 DisCollisionElastic::GetRestitutionCoefficient() const
{
   return mRestitutionCoefficient;
}

// Mutators

inline void DisCollisionElastic::SetIssuingEntityId(const DisEntityId& aEntityId)
{
   mIssuingEntityId = aEntityId;
}
inline void DisCollisionElastic::SetCollidingEntityId(const DisEntityId& aEntityId)
{
   mCollidingEntityId = aEntityId;
}
inline void DisCollisionElastic::SetEventId(const DisEventId& aEventId)
{
   mEventId = aEventId;
}

inline void DisCollisionElastic::SetContactVelocity(DisFloat32 aVelocityX, DisFloat32 aVelocityY, DisFloat32 aVelocityZ)
{
   mContactVelocity[0] = aVelocityX;
   mContactVelocity[1] = aVelocityY;
   mContactVelocity[2] = aVelocityZ;
}

inline void DisCollisionElastic::SetMass(DisFloat32 aMass)
{
   mMass = aMass;
}
inline void DisCollisionElastic::SetImpactLocation(DisFloat32 aLocationX, DisFloat32 aLocationY, DisFloat32 aLocationZ)
{
   mImpactLocation[0] = aLocationX;
   mImpactLocation[1] = aLocationY;
   mImpactLocation[2] = aLocationZ;
}
inline void DisCollisionElastic::SetCollisionIntResultXX(DisFloat32 aResult)
{
   mCollisionIntermediateResults[0] = aResult;
}
inline void DisCollisionElastic::SetCollisionIntResultXY(DisFloat32 aResult)
{
   mCollisionIntermediateResults[1] = aResult;
}
inline void DisCollisionElastic::SetCollisionIntResultXZ(DisFloat32 aResult)
{
   mCollisionIntermediateResults[2] = aResult;
}

inline void DisCollisionElastic::SetCollisionIntResultYY(DisFloat32 aResult)
{
   mCollisionIntermediateResults[3] = aResult;
}

inline void DisCollisionElastic::SetCollisionIntResultYZ(DisFloat32 aResult)
{
   mCollisionIntermediateResults[4] = aResult;
}

inline void DisCollisionElastic::SetCollisionIntResultZZ(DisFloat32 aResult)
{
   mCollisionIntermediateResults[5] = aResult;
}

inline void DisCollisionElastic::SetSurfaceNormal(DisFloat32 aX, DisFloat32 aY, DisFloat32 aZ)
{
   mSurfaceNormal[0] = aX;
   mSurfaceNormal[1] = aY;
   mSurfaceNormal[2] = aZ;
}

inline void DisCollisionElastic::SetRestitutionCoefficient(DisFloat32 aCoefficient)
{
   mRestitutionCoefficient = aCoefficient;
}

inline std::string DisCollisionElastic::GetStringId() const
{
   return "COLLISION-ELASTIC";
}
#endif
