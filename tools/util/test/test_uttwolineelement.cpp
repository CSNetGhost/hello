// ****************************************************************************
// CUI
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Copyright 2018 Infoscitex, a DCS Company. All rights reserved.
//
// The use, dissemination or disclosure of data in this file is subject to
// limitation or restriction. See accompanying README and LICENSE for details.
// ****************************************************************************

#include <iostream>
#include <sstream>

#include <gtest/gtest.h>

#include "UtTwoLineElement.hpp"

TEST(UtTwoLineElement, InsertionOperator)
{
   UtTwoLineElement testElement;
   // Orbital elements require a SemiMajorAxis to be set in order to
   // output.
   testElement.SetSemiMajorAxis(7000000.0);
   std::stringstream out;
   out << testElement;
   auto        observed_output = out.str();
   std::string expected_output = "1 00000U 00001A   03152.50000000  .00000000 +00000-0 +00000-0 9 00009\n"
                                 "2 00000 000.0000 000.0000 0000000 000.0000 000.0000 14.82366876000003\n";
   ASSERT_EQ(expected_output, observed_output);
}

TEST(UtTwoLineElement, TLEChecksum)
{
   std::vector<std::string> testStrings = {// Tests based on the checksum spec
                                           {"1                                                                   1"},
                                           {"2                                                                   2"},
                                           {"1 -                                                                 2"},
                                           {"1 9                                                                 0"},
                                           {"1 0000000000000000000000000000000000000000000000000000000000000000001"},
                                           {"2 0000000000000000000000000000000000000000000000000000000000000000002"},
                                           {"1 3456789012345678901234567890123456789012345678901234567890123456784"},
                                           // Tests with real world data, externally calculated checksum, validate that
                                           // calculation matches
                                           {"1     5U 58002B   18010.25107094 +.00000202 +00000-0 +24443-3 0  9992"},
                                           {"2     5 034.2571 087.2824 1847742 311.2754 034.2505 10.84781171108686"},
                                           {"1     5U 58002B   18011.26422791 +.00000198 +00000-0 +24098-3 0  9998"},
                                           {"2     5 034.2564 084.1620 1847685 315.8322 030.8460 10.84781535108793"},
                                           {"1     5U 58002B   18012.27740011 +.00000195 +00000-0 +23930-3 0  9999"},
                                           {"2     5 034.2556 081.0413 1847621 320.3896 027.5022 10.84781899108900"},
                                           {"1     5U 58002B   18014.30378346 +.00000199 +00000-0 +24873-3 0  9994"},
                                           {"2     5 034.2543 074.7995 1847500 329.5050 020.9708 10.84782679109129"},
                                           {"1 00005U 58002B   18002.60700932  .00000198  00000-0  22778-3 0  9995"},
                                           {"2 00005  34.2599 110.8215 1847890 276.9054  62.5885 10.84778369107945"},
                                           {"1 00005U 58002B   18005.36976481  .00000207  00000-0  24157-3 0  9999"},
                                           {"2 00005  34.2596 102.3142 1847890 289.3260  51.7193 10.84779368108240"},
                                           {"1 00005U 58002B   18008.31691066  .00000208  00000-0  24847-3 0  9997"},
                                           {"2 00005  34.2583  93.2389 1847819 302.5774  40.9427 10.84780466108562"},
                                           {"1 39008U 12065A   18003.88345269 -.00000291 +00000-0 +00000-0 0  9994"},
                                           {"2 39008 000.0239 037.9584 0002053 254.8031 067.2168 01.00268625018688"},
                                           {"1 39008U 12065A   18004.88069828 -.00000293  00000-0  00000+0 0  9990"},
                                           {"2 39008   0.0172  40.2427 0002001 254.3373  65.3828  1.00271403 18875"},
                                           {"1 39008U 12065A   18005.87799734 -.00000293 +00000-0 +00000-0 0  9997"},
                                           {"2 39008 000.0233 038.3558 0001886 260.6801 060.9452 01.00270312018717"},
                                           {"1 39008U 12065A   18005.87799256 -.00000293 +00000-0 +00000-0 0  9996"},
                                           {"2 39008 000.0237 041.8671 0001921 257.5992 060.5146 01.00268993018710"},
                                           {"1 39008U 12065A   18006.87526034 -.00000293  00000-0  00000+0 0  9998"},
                                           {"2 39008   0.0236  36.7739 0001989 262.1790  61.0272  1.00271366 18892"},
                                           {"1 39008U 12065A   18006.87525965 -.00000293 +00000-0 +00000-0 0  9991"},
                                           {"2 39008 000.0235 038.2741 0001853 261.7136 059.9939 01.00269926018727"},
                                           {"1 39008U 12065A   18007.87250993 -.00000292  00000-0  00000+0 0  9996"},
                                           {"2 39008   0.0177  39.6491 0001849 259.5738  60.7390  1.00272117 18904"},
                                           {"1 39008U 12065A   18007.87250946 -.00000292 +00000-0 +00000-0 0  9995"},
                                           {"2 39008 000.0180 036.9971 0001861 262.4304 060.5344 01.00272031018730"},
                                           {"1 39008U 12065A   18008.86977960 -.00000290 +00000-0 +00000-0 0  9995"},
                                           {"2 39008 000.0167 044.3408 0001854 252.9534 062.6676 01.00271602018749"}};

   for (const auto& s : testStrings)
   {
      int expected = s.back() - '0';
      int result   = UtTwoLineElement::GetChecksum(s.substr(0, s.length() - 1));
      EXPECT_EQ(result, expected);
   }
}

TEST(UtTwoLineElement, TLEChecksumBadInput)
{
   // Invalid strings, should return negative result
   std::vector<std::string> testStrings = {// Too short
                                           {""},
                                           {"1"},
                                           {"1 "},
                                           {"1 12345"},
                                           // Too long
                                           {"1 39008U 12065A   18009.86705749 -.00000288  00000-0  00000+0 0  9990"},
                                           // Incorrect line prefix
                                           {"0"},
                                           {"0 12345"},
                                           {"1x"},
                                           // Invalid characters
                                           {"1                                            =======                 "}};

   for (const auto& s : testStrings)
   {
      int result = UtTwoLineElement::GetChecksum(s);
      EXPECT_LT(result, 0);
   }
}
