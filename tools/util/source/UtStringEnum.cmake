# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************
# ****************************************************************************
# Updated by Infoscitex, a DCS Company.
# ****************************************************************************
# make a class that can be called to register strings
macro(UT_STRING_ENUM_CLASS IN_NAME OUT_NAME)
   file(STRINGS "${IN_NAME}" STRLIST)
   set(HDR "${UT_STRING_ENUM_INCLUDE_PATH}/${OUT_NAME}.hpp")
   list(REMOVE_DUPLICATES STRLIST)
   list(SORT STRLIST)
   file(WRITE ${HDR} "#ifndef ${OUT_NAME}_HPP\n#define ${OUT_NAME}_HPP\n// Generated by CMake (UtStringEnum.cmake)\n#include \"UtStringEnum.hpp\"\nenum ViStringEnumId {\ncSTR__null=0\n")

   set(IDX 1)
   foreach(TSTR ${STRLIST})
      UT_STRING_IDENT(${TSTR} IDENT)
      file(APPEND ${HDR} ",${IDENT}=${IDX}\n")
	  #file(APPEND ${SRC} "   UtStringEnum::RegisterString(${IDX}, \"${TSTR}\");\n")
      math(EXPR IDX "${IDX}+1")
   endforeach()
   file(APPEND ${HDR} "};\nclass ${OUT_NAME}\n{\npublic:\n   static void RegisterStrings()\n   {\n")

   set(IDX 1)
   foreach(TSTR ${STRLIST})
      file(APPEND ${HDR} "      UtStringEnum::RegisterString(${IDX}, \"${TSTR}\");\n")
      math(EXPR IDX "${IDX}+1")
   endforeach()

   file(APPEND ${HDR} "   }\n")
   file(APPEND ${HDR} "};\n")
   file(APPEND ${HDR} "\n#endif\n")
endmacro()

# Add a file containing a list of strings to the list of strings
# known by UtStringEnum at compile time
macro(UT_STRING_ENUM FILE_NAME)
   add_definitions(-DUT_GENERATED_STRING_LIST)
   file(STRINGS "${FILE_NAME}" STRLIST)
   set_property(GLOBAL APPEND PROPERTY UT_STRING_ENUM_LIST ${STRLIST})
endmacro()

# Make a C identifier out of a string
macro(UT_STRING_IDENT STR OUTVAR)
   string(REGEX REPLACE "[^a-zA-Z0-9_]" "_" TMP ${STR})
   set(${OUTVAR} "cSTR_${TMP}")
endmacro()

# Write out the UtStringEnum files defining all desired strings
macro(UT_STRING_ENUM_WRITE_HEADER)
   if (NOT DEFINED UT_STRING_ENUM_INCLUDE_PATH)
      message(ERROR "UT_STRING_ENUM_INCLUDE_PATH is not defined")
   endif()

   file(MAKE_DIRECTORY "${UT_STRING_ENUM_INCLUDE_PATH}")
   set(TMPFILE "${UT_STRING_ENUM_INCLUDE_PATH}/UtStringEnum_gen.new")
   set(HDR "${UT_STRING_ENUM_INCLUDE_PATH}/UtStringEnum_gen.hpp")
   set(HDRIMP "${UT_STRING_ENUM_INCLUDE_PATH}/UtStringEnum_gen_imp.hpp")
   get_property(UT_STRING_ENUM_LIST GLOBAL PROPERTY UT_STRING_ENUM_LIST)
   list(REMOVE_DUPLICATES UT_STRING_ENUM_LIST)
   list(SORT UT_STRING_ENUM_LIST)
   file(WRITE ${TMPFILE} "#ifndef UT_STRING_ENUM_GEN_HPP\n#define UT_STRING_ENUM_GEN_HPP\n// Generated by CMake (UtStringEnum.cmake)\nenum UtStringEnumId {\ncSTR__null=0\n")
   set(IDX 1)
   foreach(TSTR ${UT_STRING_ENUM_LIST})
      UT_STRING_IDENT(${TSTR} IDENT)
      file(APPEND ${TMPFILE} ",${IDENT}=${IDX}\n")
      math(EXPR IDX "${IDX}+1")
   endforeach()
   file(APPEND ${TMPFILE} "};\n#endif\n")
   set(NEEDS_UPDATED FALSE)
   if(EXISTS ${HDR})
      file(READ ${HDR} HDRTXT)
      file(READ ${TMPFILE} TMPTXT)
      string(COMPARE EQUAL "${TMPTXT}" "${HDRTXT}" IS_SAME)
      if (NOT IS_SAME)
         set(NEEDS_UPDATED TRUE)
      else()
         #message("Strings up to date")
      endif()
   else()
      set(NEEDS_UPDATED TRUE)
   endif()
   if(NEEDS_UPDATED)
      file(RENAME ${TMPFILE} ${HDR})
      file(WRITE ${HDRIMP} "// Generated by CMake (UtStringEnum.cmake\n")
      set(IDX 0)
      foreach(TSTR ${UT_STRING_ENUM_LIST})
         UT_STRING_IDENT(${TSTR} IDENT)
         list(GET UT_STRING_ENUM_LIST ${IDX} STRTEXT)
         file(APPEND ${HDRIMP} "   RegisterString(${IDENT}, \"${STRTEXT}\");\n")
         math(EXPR IDX "${IDX}+1")
      endforeach()
   endif()
endmacro()

