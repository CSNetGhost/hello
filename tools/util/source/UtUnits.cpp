// ****************************************************************************
// CUI
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Copyright 2003-2015 The Boeing Company. All rights reserved.
//
// The use, dissemination or disclosure of data in this file is subject to
// limitation or restriction. See accompanying README and LICENSE for details.
// ****************************************************************************
// ****************************************************************************
// Updated by Infoscitex, a DCS Company.
// ****************************************************************************

#include "UtUnits.hpp"

#include <algorithm>

#include "UtUnitTypes.hpp"

std::vector<std::unique_ptr<UtUnitType>> UtUnits::mUnitTypes;

namespace
{
//! RAII struct to create the UtUnits interfaces
struct GlobalInit
{
   GlobalInit() { UtUnits::CreateInterfaces(); }
};
GlobalInit globalInit;
} // namespace

//! A Wrapper around a unit type class to provide the UtUnitType interface
template<typename UNIT_TYPE>
class UtUnitTypeT : public UtUnitType
{
public:
   UtUnitTypeT(const std::string& aName)
      : mUnitTypeName(aName)
   {
   }

   std::string GetName() const override { return mUnitTypeName; }
   int         GetUnitTypeId() const override { return UNIT_TYPE::cUNIT_TYPE_ID; }
   int         GetStandardUnitId() const override { return UNIT_TYPE::cSTANDARD_UNIT_ID; }
   bool        IsCompoundUnit() const override { return UNIT_TYPE::cIS_COMPOUND_UNIT; }
   bool        IsMultidimensional() const override { return UNIT_TYPE::cIS_MULTIDIM; }
   double      ConvertToStandard(double aValue, int aUnit) const override
   {
      return UNIT_TYPE::ConvertToStandard(aValue, aUnit);
   }
   double ConvertFromStandard(double aValue, int aUnit) const override
   {
      return UNIT_TYPE::ConvertFromStandard(aValue, aUnit);
   }
   std::string FindUnitName(int aUnitId) const override { return UNIT_TYPE::FindUnitName(aUnitId); }
   int         ReadUnit(const std::string& aUnitName) const override { return UNIT_TYPE::ReadUnit(aUnitName); }
   bool        IsUnitValid(int aUnitId) const override { return UNIT_TYPE::IsUnitValid(aUnitId); }
   bool        IsUnitValid(const std::string& aUnitName) const override { return UNIT_TYPE::IsUnitValid(aUnitName); }
   const std::map<int, std::string>& GetUnitToString() const override { return UNIT_TYPE::mUnitToString; }
   const std::map<std::string, int>& GetStringToUnit() const override { return UNIT_TYPE::mUnitStrings; }

private:
   std::string mUnitTypeName;
};

UtUnitType* UtUnits::FindUnitType(const std::string& aUnitType)
{
   auto it = std::find_if(mUnitTypes.begin(),
                          mUnitTypes.end(),
                          [&aUnitType](const std::unique_ptr<UtUnitType>& unitType)
                          { return (unitType != nullptr) && (unitType->GetName() == aUnitType); });
   return it != mUnitTypes.end() ? it->get() : nullptr;
}

bool UtUnitsDetail::SplitUnit(const std::string& aUnits, std::string& aSubject, std::string& aPredicate, char aOperator)
{
   std::string::size_type operatorPos = aUnits.find_last_of(aOperator);
   if (operatorPos != std::string::npos)
   {
      if ((operatorPos != 0) && ((operatorPos + 1) != aUnits.size()))
      {
         aSubject   = aUnits.substr(0, operatorPos);
         aPredicate = aUnits.substr(operatorPos + 1);
         return true;
      }
   }
   return false;
}

///////////////////////////////////////////////////////////////////////////
// BEGIN GENERATED CODE
//    This code is generated by UtUnits.py.  Do not modify directly.
///////////////////////////////////////////////////////////////////////////
void UtUnits::CreateInterfaces()
{
   mUnitTypes.resize(_cUNIT_TYPE_COUNT);
   // CreateUnitTypeInterfaces{
   mUnitTypes[cLENGTH]               = ut::make_unique<UtUnitTypeT<UtUnitLength>>("LENGTH");
   mUnitTypes[cTIME]                 = ut::make_unique<UtUnitTypeT<UtUnitTime>>("TIME");
   mUnitTypes[cSPEED]                = ut::make_unique<UtUnitTypeT<UtUnitSpeed>>("SPEED");
   mUnitTypes[cDATA_SIZE]            = ut::make_unique<UtUnitTypeT<UtUnitDataSize>>("DATA_SIZE");
   mUnitTypes[cPOWER]                = ut::make_unique<UtUnitTypeT<UtUnitPower>>("POWER");
   mUnitTypes[cPOWER_DB]             = ut::make_unique<UtUnitTypeT<UtUnitPowerDB>>("POWER_DB");
   mUnitTypes[cSOLID_ANGLE]          = ut::make_unique<UtUnitTypeT<UtUnitSolidAngle>>("SOLID_ANGLE");
   mUnitTypes[cMASS]                 = ut::make_unique<UtUnitTypeT<UtUnitMass>>("MASS");
   mUnitTypes[cFORCE]                = ut::make_unique<UtUnitTypeT<UtUnitForce>>("FORCE");
   mUnitTypes[cTORQUE]               = ut::make_unique<UtUnitTypeT<UtUnitTorque>>("TORQUE");
   mUnitTypes[cAREA]                 = ut::make_unique<UtUnitTypeT<UtUnitArea>>("AREA");
   mUnitTypes[cAREA_DB]              = ut::make_unique<UtUnitTypeT<UtUnitAreaDB>>("AREA_DB");
   mUnitTypes[cVOLUME]               = ut::make_unique<UtUnitTypeT<UtUnitVolume>>("VOLUME");
   mUnitTypes[cTIME2]                = ut::make_unique<UtUnitTypeT<UtUnitTime2>>("TIME2");
   mUnitTypes[cACCELERATION]         = ut::make_unique<UtUnitTypeT<UtUnitAcceleration>>("ACCELERATION");
   mUnitTypes[cFREQUENCY]            = ut::make_unique<UtUnitTypeT<UtUnitFrequency>>("FREQUENCY");
   mUnitTypes[cANGLE]                = ut::make_unique<UtUnitTypeT<UtUnitAngle>>("ANGLE");
   mUnitTypes[cANGULAR_RATE]         = ut::make_unique<UtUnitTypeT<UtUnitAngularRate>>("ANGULAR_RATE");
   mUnitTypes[cANGULAR_ACCELERATION] = ut::make_unique<UtUnitTypeT<UtUnitAngularAcceleration>>("ANGULAR_ACCELERATION");
   mUnitTypes[cDATA_RATE]            = ut::make_unique<UtUnitTypeT<UtUnitDataRate>>("DATA_RATE");
   mUnitTypes[cMASS_DENSITY]         = ut::make_unique<UtUnitTypeT<UtUnitMassDensity>>("MASS_DENSITY");
   mUnitTypes[cMASS_TRANSFER]        = ut::make_unique<UtUnitTypeT<UtUnitMassTransfer>>("MASS_TRANSFER");
   mUnitTypes[cENERGY]               = ut::make_unique<UtUnitTypeT<UtUnitEnergy>>("ENERGY");
   mUnitTypes[cFLUENCE]              = ut::make_unique<UtUnitTypeT<UtUnitFluence>>("FLUENCE");
   mUnitTypes[cIRRADIANCE]           = ut::make_unique<UtUnitTypeT<UtUnitIrradiance>>("IRRADIANCE");
   mUnitTypes[cSPECTRAL_IRRADIANCE]  = ut::make_unique<UtUnitTypeT<UtUnitSpectralIrradiance>>("SPECTRAL_IRRADIANCE");
   mUnitTypes[cRADIANCE]             = ut::make_unique<UtUnitTypeT<UtUnitRadiance>>("RADIANCE");
   mUnitTypes[cSPECTRAL_RADIANCE]    = ut::make_unique<UtUnitTypeT<UtUnitSpectralRadiance>>("SPECTRAL_RADIANCE");
   mUnitTypes[cRATIO]                = ut::make_unique<UtUnitTypeT<UtUnitRatio>>("RATIO");
   mUnitTypes[cNOISE_PRESSURE]       = ut::make_unique<UtUnitTypeT<UtUnitNoisePressure>>("NOISE_PRESSURE");
   mUnitTypes[cPRESSURE]             = ut::make_unique<UtUnitTypeT<UtUnitPressure>>("PRESSURE");
   mUnitTypes[cTEMPERATURE]          = ut::make_unique<UtUnitTypeT<UtUnitTemperature>>("TEMPERATURE");
   mUnitTypes[cSPECIFIC_RANGE]       = ut::make_unique<UtUnitTypeT<UtUnitSpecificRange>>("SPECIFIC_RANGE");
   mUnitTypes[cANGULAR_INERTIA]      = ut::make_unique<UtUnitTypeT<UtUnitAngularInertia>>("ANGULAR_INERTIA");
   mUnitTypes[cVOLTAGE]              = ut::make_unique<UtUnitTypeT<UtUnitVoltage>>("VOLTAGE");
   mUnitTypes[cCURRENT]              = ut::make_unique<UtUnitTypeT<UtUnitCurrent>>("CURRENT");
   mUnitTypes[cCURRENT_DENSITY]      = ut::make_unique<UtUnitTypeT<UtUnitCurrentDensity>>("CURRENT_DENSITY");
   mUnitTypes[cRESISTANCE]           = ut::make_unique<UtUnitTypeT<UtUnitResistance>>("RESISTANCE");
   mUnitTypes[cCAPACITANCE]          = ut::make_unique<UtUnitTypeT<UtUnitCapacitance>>("CAPACITANCE");
   mUnitTypes[cIMPULSE]              = ut::make_unique<UtUnitTypeT<UtUnitImpulse>>("IMPULSE");
   mUnitTypes[cRESPONSIVITY]         = ut::make_unique<UtUnitTypeT<UtUnitResponsivity>>("RESPONSIVITY");

   // CreateUnitTypeInterfaces}
}
// UtUnitSources{

const double UtUnitLength::mBaseUnitMultiplier[UtUnitLength::cLAST_SIMPLE_UNIT + 2] = {1.0,      // cMETERS
                                                                                       1.0E3,    // cKILOMETERS
                                                                                       1.0E6,    // cMEGAMETERS
                                                                                       0.3048,   // cFEET
                                                                                       304.8,    // cKILOFEET
                                                                                       1609.344, // cMILES
                                                                                       1852.0,   // cNAUTICAL_MILES
                                                                                       1.0E-2,   // cCENTIMETERS
                                                                                       1.0E-3,   // cMILLIMETERS
                                                                                       1.0E-6,   // cMICROMETERS
                                                                                       1.0E-9,   // cNANOMETERS
                                                                                       1.0E-10,  // cANGSTROMS
                                                                                       (0.3048 / 12.0), // cINCHES
                                                                                       1.496E+11, // cASTRONOMICAL_UNIT
                                                                                       0};
const std::map<std::string, int> UtUnitLength_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["meters"]      = UtUnitLength::cMETERS;
   sm["meter"]       = UtUnitLength::cMETERS;
   sm["m"]           = UtUnitLength::cMETERS;
   sm["kilometers"]  = UtUnitLength::cKILOMETERS;
   sm["kilometer"]   = UtUnitLength::cKILOMETERS;
   sm["km"]          = UtUnitLength::cKILOMETERS;
   sm["megameters"]  = UtUnitLength::cMEGAMETERS;
   sm["megameter"]   = UtUnitLength::cMEGAMETERS;
   sm["feet"]        = UtUnitLength::cFEET;
   sm["foot"]        = UtUnitLength::cFEET;
   sm["ft"]          = UtUnitLength::cFEET;
   sm["kfeet"]       = UtUnitLength::cKILOFEET;
   sm["kft"]         = UtUnitLength::cKILOFEET;
   sm["miles"]       = UtUnitLength::cMILES;
   sm["mile"]        = UtUnitLength::cMILES;
   sm["mi"]          = UtUnitLength::cMILES;
   sm["nm"]          = UtUnitLength::cNAUTICAL_MILES;
   sm["nmi"]         = UtUnitLength::cNAUTICAL_MILES;
   sm["centimeters"] = UtUnitLength::cCENTIMETERS;
   sm["centimeter"]  = UtUnitLength::cCENTIMETERS;
   sm["cm"]          = UtUnitLength::cCENTIMETERS;
   sm["millimeters"] = UtUnitLength::cMILLIMETERS;
   sm["millimiter"]  = UtUnitLength::cMILLIMETERS;
   sm["mm"]          = UtUnitLength::cMILLIMETERS;
   sm["micrometers"] = UtUnitLength::cMICROMETERS;
   sm["micrometer"]  = UtUnitLength::cMICROMETERS;
   sm["um"]          = UtUnitLength::cMICROMETERS;
   sm["microns"]     = UtUnitLength::cMICROMETERS;
   sm["micron"]      = UtUnitLength::cMICROMETERS;
   sm["nanometers"]  = UtUnitLength::cNANOMETERS;
   sm["nanometer"]   = UtUnitLength::cNANOMETERS;
   sm["angstroms"]   = UtUnitLength::cANGSTROMS;
   sm["angstrom"]    = UtUnitLength::cANGSTROMS;
   sm["inches"]      = UtUnitLength::cINCHES;
   sm["inch"]        = UtUnitLength::cINCHES;
   sm["in"]          = UtUnitLength::cINCHES;
   sm["au"]          = UtUnitLength::cASTRONOMICAL_UNIT;
   sm["ua"]          = UtUnitLength::cASTRONOMICAL_UNIT;

   return sm;
}
const std::map<std::string, int> UtUnitLength::mUnitStrings = UtUnitLength_UnitStrings();
const std::map<int, std::string> UtUnitLength_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0]  = "meters";
   sm[1]  = "kilometers";
   sm[2]  = "megameters";
   sm[3]  = "feet";
   sm[4]  = "kfeet";
   sm[5]  = "miles";
   sm[6]  = "nm";
   sm[7]  = "centimeters";
   sm[8]  = "millimeters";
   sm[9]  = "micrometers";
   sm[10] = "nanometers";
   sm[11] = "angstroms";
   sm[12] = "inches";
   sm[13] = "au";

   return sm;
}
const std::map<int, std::string> UtUnitLength::mUnitToString = UtUnitLength_UnitToStrings();


const double                     UtUnitTime::mBaseUnitMultiplier[UtUnitTime::cLAST_SIMPLE_UNIT + 2] = {1.0,  // cSECONDS
                                                                                   60.0, // cMINUTES
                                                                                   (60.0 * 60.0), // cHOURS
                                                                                   1.0E-3, // cMILLISECONDS
                                                                                   1.0E-6, // cMICROSECONDS
                                                                                   1.0E-9, // cNANOSECONDS
                                                                                   (60.0 * 60.0 * 24.0), // cDAYS
                                                                                   0};
const std::map<std::string, int> UtUnitTime_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["seconds"]      = UtUnitTime::cSECONDS;
   sm["second"]       = UtUnitTime::cSECONDS;
   sm["secs"]         = UtUnitTime::cSECONDS;
   sm["sec"]          = UtUnitTime::cSECONDS;
   sm["s"]            = UtUnitTime::cSECONDS;
   sm["minutes"]      = UtUnitTime::cMINUTES;
   sm["minute"]       = UtUnitTime::cMINUTES;
   sm["mins"]         = UtUnitTime::cMINUTES;
   sm["min"]          = UtUnitTime::cMINUTES;
   sm["m"]            = UtUnitTime::cMINUTES;
   sm["hours"]        = UtUnitTime::cHOURS;
   sm["hour"]         = UtUnitTime::cHOURS;
   sm["hrs"]          = UtUnitTime::cHOURS;
   sm["hr"]           = UtUnitTime::cHOURS;
   sm["h"]            = UtUnitTime::cHOURS;
   sm["milliseconds"] = UtUnitTime::cMILLISECONDS;
   sm["millisecond"]  = UtUnitTime::cMILLISECONDS;
   sm["msecs"]        = UtUnitTime::cMILLISECONDS;
   sm["msec"]         = UtUnitTime::cMILLISECONDS;
   sm["ms"]           = UtUnitTime::cMILLISECONDS;
   sm["microseconds"] = UtUnitTime::cMICROSECONDS;
   sm["microsecond"]  = UtUnitTime::cMICROSECONDS;
   sm["usecs"]        = UtUnitTime::cMICROSECONDS;
   sm["usec"]         = UtUnitTime::cMICROSECONDS;
   sm["us"]           = UtUnitTime::cMICROSECONDS;
   sm["nanoseconds"]  = UtUnitTime::cNANOSECONDS;
   sm["nanosecond"]   = UtUnitTime::cNANOSECONDS;
   sm["nsecs"]        = UtUnitTime::cNANOSECONDS;
   sm["nsec"]         = UtUnitTime::cNANOSECONDS;
   sm["ns"]           = UtUnitTime::cNANOSECONDS;
   sm["days"]         = UtUnitTime::cDAYS;
   sm["day"]          = UtUnitTime::cDAYS;

   return sm;
}
const std::map<std::string, int> UtUnitTime::mUnitStrings = UtUnitTime_UnitStrings();
const std::map<int, std::string> UtUnitTime_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "seconds";
   sm[1] = "minutes";
   sm[2] = "hours";
   sm[3] = "milliseconds";
   sm[4] = "microseconds";
   sm[5] = "nanoseconds";
   sm[6] = "days";

   return sm;
}
const std::map<int, std::string> UtUnitTime::mUnitToString = UtUnitTime_UnitToStrings();


const double                     UtUnitSpeed::mBaseUnitMultiplier[UtUnitSpeed::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitSpeed_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["m/s"]   = UtUnitSpeed::cMETERS_PER_SECOND;
   sm["km/h"]  = UtUnitSpeed::cKILOMETERS_PER_HOUR;
   sm["kmh"]   = UtUnitSpeed::cKILOMETERS_PER_HOUR;
   sm["ft/s"]  = UtUnitSpeed::cFEET_PER_SECOND;
   sm["fps"]   = UtUnitSpeed::cFEET_PER_SECOND;
   sm["ft/m"]  = UtUnitSpeed::cFEET_PER_MINUTE;
   sm["fpm"]   = UtUnitSpeed::cFEET_PER_MINUTE;
   sm["mi/h"]  = UtUnitSpeed::cMILES_PER_HOUR;
   sm["mph"]   = UtUnitSpeed::cMILES_PER_HOUR;
   sm["nm/h"]  = UtUnitSpeed::cKNOTS;
   sm["knots"] = UtUnitSpeed::cKNOTS;
   sm["kts"]   = UtUnitSpeed::cKNOTS;

   return sm;
}
const std::map<std::string, int> UtUnitSpeed::mUnitStrings = UtUnitSpeed_UnitStrings();
const std::map<int, std::string> UtUnitSpeed_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0]   = "m/s";
   sm[20]  = "km/h";
   sm[48]  = "ft/s";
   sm[50]  = "ft/m";
   sm[84]  = "mi/h";
   sm[100] = "nm/h";

   return sm;
}
const std::map<int, std::string> UtUnitSpeed::mUnitToString = UtUnitSpeed_UnitToStrings();


const double UtUnitDataSize::mBaseUnitMultiplier[UtUnitDataSize::cLAST_SIMPLE_UNIT + 2] = {1.0,   // cBITS
                                                                                           1.0E3, // cKBITS
                                                                                           1.0E6, // cMBITS
                                                                                           1.0E9, // cGBITS
                                                                                           8.0,   // cBYTES
                                                                                           8.0E3, // cKBYTES
                                                                                           8.0E6, // cMBYTES
                                                                                           8.0E9, // cGBYTES
                                                                                           0};
const std::map<std::string, int> UtUnitDataSize_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["bits"]   = UtUnitDataSize::cBITS;
   sm["bit"]    = UtUnitDataSize::cBITS;
   sm["kbits"]  = UtUnitDataSize::cKBITS;
   sm["kbit"]   = UtUnitDataSize::cKBITS;
   sm["mbits"]  = UtUnitDataSize::cMBITS;
   sm["mbit"]   = UtUnitDataSize::cMBITS;
   sm["gbits"]  = UtUnitDataSize::cGBITS;
   sm["gbit"]   = UtUnitDataSize::cGBITS;
   sm["bytes"]  = UtUnitDataSize::cBYTES;
   sm["byte"]   = UtUnitDataSize::cBYTES;
   sm["kbytes"] = UtUnitDataSize::cKBYTES;
   sm["kbyte"]  = UtUnitDataSize::cKBYTES;
   sm["mbytes"] = UtUnitDataSize::cMBYTES;
   sm["mbyte"]  = UtUnitDataSize::cMBYTES;
   sm["gbytes"] = UtUnitDataSize::cGBYTES;
   sm["gbyte"]  = UtUnitDataSize::cGBYTES;

   return sm;
}
const std::map<std::string, int> UtUnitDataSize::mUnitStrings = UtUnitDataSize_UnitStrings();
const std::map<int, std::string> UtUnitDataSize_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "bits";
   sm[1] = "kbits";
   sm[2] = "mbits";
   sm[3] = "gbits";
   sm[4] = "bytes";
   sm[5] = "kbytes";
   sm[6] = "mbytes";
   sm[7] = "gbytes";

   return sm;
}
const std::map<int, std::string> UtUnitDataSize::mUnitToString = UtUnitDataSize_UnitToStrings();


const double                     UtUnitPower::mBaseUnitMultiplier[UtUnitPower::cLAST_SIMPLE_UNIT + 2] = {1.0, // cWATTS
                                                                                     1.0E3, // cKILOWATTS
                                                                                     1.0E6, // cMEGAWATTS
                                                                                     1.0E9, // cGIGAWATTS
                                                                                     1.0E-3, // cMILLIWATTS
                                                                                     1.0E-6, // cMICROWATTS
                                                                                     0};
const std::map<std::string, int> UtUnitPower_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["watts"]      = UtUnitPower::cWATTS;
   sm["w"]          = UtUnitPower::cWATTS;
   sm["kilowatts"]  = UtUnitPower::cKILOWATTS;
   sm["kw"]         = UtUnitPower::cKILOWATTS;
   sm["megawatts"]  = UtUnitPower::cMEGAWATTS;
   sm["mw"]         = UtUnitPower::cMEGAWATTS;
   sm["gigawatts"]  = UtUnitPower::cGIGAWATTS;
   sm["gw"]         = UtUnitPower::cGIGAWATTS;
   sm["milliwatts"] = UtUnitPower::cMILLIWATTS;
   sm["microwatts"] = UtUnitPower::cMICROWATTS;

   return sm;
}
const std::map<std::string, int> UtUnitPower::mUnitStrings = UtUnitPower_UnitStrings();
const std::map<int, std::string> UtUnitPower_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "watts";
   sm[1] = "kilowatts";
   sm[2] = "megawatts";
   sm[3] = "gigawatts";
   sm[4] = "milliwatts";
   sm[5] = "microwatts";

   return sm;
}
const std::map<int, std::string> UtUnitPower::mUnitToString = UtUnitPower_UnitToStrings();


const double UtUnitPowerDB::mBaseUnitMultiplier[UtUnitPowerDB::cLAST_SIMPLE_UNIT + 2] = {1.0,    // cWATTS
                                                                                         1.0E3,  // cKILOWATTS
                                                                                         1.0E6,  // cMEGAWATTS
                                                                                         1.0E9,  // cGIGAWATTS
                                                                                         1.0E-3, // cMILLIWATTS
                                                                                         1.0E-6, // cMICROWATTS
                                                                                         0,      // cDBW
                                                                                         0,      // cDBM
                                                                                         0};
const std::map<std::string, int> UtUnitPowerDB_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["watts"]      = UtUnitPowerDB::cWATTS;
   sm["w"]          = UtUnitPowerDB::cWATTS;
   sm["kilowatts"]  = UtUnitPowerDB::cKILOWATTS;
   sm["kw"]         = UtUnitPowerDB::cKILOWATTS;
   sm["megawatts"]  = UtUnitPowerDB::cMEGAWATTS;
   sm["mw"]         = UtUnitPowerDB::cMEGAWATTS;
   sm["gigawatts"]  = UtUnitPowerDB::cGIGAWATTS;
   sm["gw"]         = UtUnitPowerDB::cGIGAWATTS;
   sm["milliwatts"] = UtUnitPowerDB::cMILLIWATTS;
   sm["microwatts"] = UtUnitPowerDB::cMICROWATTS;
   sm["dbw"]        = UtUnitPowerDB::cDBW;
   sm["dbm"]        = UtUnitPowerDB::cDBM;

   return sm;
}
const std::map<std::string, int> UtUnitPowerDB::mUnitStrings = UtUnitPowerDB_UnitStrings();
const std::map<int, std::string> UtUnitPowerDB_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "watts";
   sm[1] = "kilowatts";
   sm[2] = "megawatts";
   sm[3] = "gigawatts";
   sm[4] = "milliwatts";
   sm[5] = "microwatts";
   sm[6] = "dbw";
   sm[7] = "dbm";

   return sm;
}
const std::map<int, std::string> UtUnitPowerDB::mUnitToString = UtUnitPowerDB_UnitToStrings();


const double UtUnitSolidAngle::mBaseUnitMultiplier[UtUnitSolidAngle::cLAST_SIMPLE_UNIT + 2] = {1.0, // cSTERADIANS
                                                                                               0};
const std::map<std::string, int> UtUnitSolidAngle_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["steradians"] = UtUnitSolidAngle::cSTERADIANS;
   sm["steradian"]  = UtUnitSolidAngle::cSTERADIANS;
   sm["sr"]         = UtUnitSolidAngle::cSTERADIANS;

   return sm;
}
const std::map<std::string, int> UtUnitSolidAngle::mUnitStrings = UtUnitSolidAngle_UnitStrings();
const std::map<int, std::string> UtUnitSolidAngle_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "steradians";

   return sm;
}
const std::map<int, std::string> UtUnitSolidAngle::mUnitToString = UtUnitSolidAngle_UnitToStrings();


const double UtUnitMass::mBaseUnitMultiplier[UtUnitMass::cLAST_SIMPLE_UNIT + 2] = {1.0,                 // cKILOGRAMS
                                                                                   1.0E-3,              // cGRAMS
                                                                                   (1.0 / 2.2046226),   // cPOUNDS
                                                                                   (1.0E3 / 2.2046226), // cKLB
                                                                                   (2.0E3 / 2.2046226), // cTONS
                                                                                   (2204.6226 / 2.2046226), // cTONNES
                                                                                   14.5939029,              // cSLUGS
                                                                                   0};
const std::map<std::string, int> UtUnitMass_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["kilograms"] = UtUnitMass::cKILOGRAMS;
   sm["kg"]        = UtUnitMass::cKILOGRAMS;
   sm["kilo"]      = UtUnitMass::cKILOGRAMS;
   sm["kilogram"]  = UtUnitMass::cKILOGRAMS;
   sm["grams"]     = UtUnitMass::cGRAMS;
   sm["gram"]      = UtUnitMass::cGRAMS;
   sm["g"]         = UtUnitMass::cGRAMS;
   sm["pounds"]    = UtUnitMass::cPOUNDS;
   sm["pound"]     = UtUnitMass::cPOUNDS;
   sm["lbs"]       = UtUnitMass::cPOUNDS;
   sm["lbm"]       = UtUnitMass::cPOUNDS;
   sm["lb"]        = UtUnitMass::cPOUNDS;
   sm["klb"]       = UtUnitMass::cKLB;
   sm["tons"]      = UtUnitMass::cTONS;
   sm["ton"]       = UtUnitMass::cTONS;
   sm["tonnes"]    = UtUnitMass::cTONNES;
   sm["tonne"]     = UtUnitMass::cTONNES;
   sm["slugs"]     = UtUnitMass::cSLUGS;
   sm["slug"]      = UtUnitMass::cSLUGS;

   return sm;
}
const std::map<std::string, int> UtUnitMass::mUnitStrings = UtUnitMass_UnitStrings();
const std::map<int, std::string> UtUnitMass_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "kilograms";
   sm[1] = "grams";
   sm[2] = "pounds";
   sm[3] = "klb";
   sm[4] = "tons";
   sm[5] = "tonnes";
   sm[6] = "slugs";

   return sm;
}
const std::map<int, std::string> UtUnitMass::mUnitToString = UtUnitMass_UnitToStrings();


const double UtUnitForce::mBaseUnitMultiplier[UtUnitForce::cLAST_SIMPLE_UNIT + 2] = {1.0,                // cNEWTONS
                                                                                     9.80665,            // cKGF
                                                                                     (1.0 / 0.22480894), // cLBF
                                                                                     0};
const std::map<std::string, int> UtUnitForce_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["newtons"] = UtUnitForce::cNEWTONS;
   sm["newton"]  = UtUnitForce::cNEWTONS;
   sm["nt"]      = UtUnitForce::cNEWTONS;
   sm["kgf"]     = UtUnitForce::cKGF;
   sm["lbf"]     = UtUnitForce::cLBF;
   sm["lbsf"]    = UtUnitForce::cLBF;

   return sm;
}
const std::map<std::string, int> UtUnitForce::mUnitStrings = UtUnitForce_UnitStrings();
const std::map<int, std::string> UtUnitForce_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "newtons";
   sm[1] = "kgf";
   sm[2] = "lbf";

   return sm;
}
const std::map<int, std::string> UtUnitForce::mUnitToString = UtUnitForce_UnitToStrings();


const double                     UtUnitTorque::mBaseUnitMultiplier[UtUnitTorque::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitTorque_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["newtons*meters"] = UtUnitTorque::cNEWTON_METERS;

   return sm;
}
const std::map<std::string, int> UtUnitTorque::mUnitStrings = UtUnitTorque_UnitStrings();
const std::map<int, std::string> UtUnitTorque_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "newtons*meters";

   return sm;
}
const std::map<int, std::string> UtUnitTorque::mUnitToString = UtUnitTorque_UnitToStrings();


const double                     UtUnitArea::mBaseUnitMultiplier[UtUnitArea::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitArea_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["m2"]  = UtUnitArea::cMETERS2;
   sm["ft2"] = UtUnitArea::cFEET2;
   sm["in2"] = UtUnitArea::cINCHES2;

   return sm;
}
const std::map<std::string, int> UtUnitArea::mUnitStrings = UtUnitArea_UnitStrings();
const std::map<int, std::string> UtUnitArea_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0]  = "m2";
   sm[3]  = "ft2";
   sm[12] = "in2";

   return sm;
}
const std::map<int, std::string> UtUnitArea::mUnitToString = UtUnitArea_UnitToStrings();


const double                     UtUnitAreaDB::mBaseUnitMultiplier[UtUnitAreaDB::cLAST_SIMPLE_UNIT + 2] = {0, // cDBSM
                                                                                       0};
const std::map<std::string, int> UtUnitAreaDB_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["m2"]   = UtUnitAreaDB::cMETERS2;
   sm["dbsm"] = UtUnitAreaDB::cDBSM;

   return sm;
}
const std::map<std::string, int> UtUnitAreaDB::mUnitStrings = UtUnitAreaDB_UnitStrings();
const std::map<int, std::string> UtUnitAreaDB_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0]  = "m2";
   sm[-2] = "dbsm";

   return sm;
}
const std::map<int, std::string> UtUnitAreaDB::mUnitToString = UtUnitAreaDB_UnitToStrings();


const double                     UtUnitVolume::mBaseUnitMultiplier[UtUnitVolume::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitVolume_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["m3"]       = UtUnitVolume::cMETERS3;
   sm["meters^3"] = UtUnitVolume::cMETERS3;

   return sm;
}
const std::map<std::string, int> UtUnitVolume::mUnitStrings = UtUnitVolume_UnitStrings();
const std::map<int, std::string> UtUnitVolume_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "m3";

   return sm;
}
const std::map<int, std::string> UtUnitVolume::mUnitToString = UtUnitVolume_UnitToStrings();


const double                     UtUnitTime2::mBaseUnitMultiplier[UtUnitTime2::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitTime2_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["s2"]        = UtUnitTime2::cSECONDS2;
   sm["seconds^2"] = UtUnitTime2::cSECONDS2;

   return sm;
}
const std::map<std::string, int> UtUnitTime2::mUnitStrings = UtUnitTime2_UnitStrings();
const std::map<int, std::string> UtUnitTime2_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "s2";

   return sm;
}
const std::map<int, std::string> UtUnitTime2::mUnitToString = UtUnitTime2_UnitToStrings();


const double UtUnitAcceleration::mBaseUnitMultiplier[UtUnitAcceleration::cLAST_SIMPLE_UNIT + 2] = {0,       // unused
                                                                                                   9.80665, // cG
                                                                                                   0};
const std::map<std::string, int> UtUnitAcceleration_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["m/s2"]  = UtUnitAcceleration::cMETERS_PER_SECOND2;
   sm["ft/s2"] = UtUnitAcceleration::cFEET_PER_SECOND2;
   sm["g"]     = UtUnitAcceleration::cG;

   return sm;
}
const std::map<std::string, int> UtUnitAcceleration::mUnitStrings = UtUnitAcceleration_UnitStrings();
const std::map<int, std::string> UtUnitAcceleration_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0]  = "m/s2";
   sm[96] = "ft/s2";
   sm[1]  = "g";

   return sm;
}
const std::map<int, std::string> UtUnitAcceleration::mUnitToString = UtUnitAcceleration_UnitToStrings();


const double UtUnitFrequency::mBaseUnitMultiplier[UtUnitFrequency::cLAST_SIMPLE_UNIT + 2] = {1.0,   // cHZ
                                                                                             1.0E3, // cKHZ
                                                                                             1.0E6, // cMHZ
                                                                                             1.0E9, // cGHZ
                                                                                             0};
const std::map<std::string, int> UtUnitFrequency_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["hz"]  = UtUnitFrequency::cHZ;
   sm["khz"] = UtUnitFrequency::cKHZ;
   sm["mhz"] = UtUnitFrequency::cMHZ;
   sm["ghz"] = UtUnitFrequency::cGHZ;

   return sm;
}
const std::map<std::string, int> UtUnitFrequency::mUnitStrings = UtUnitFrequency_UnitStrings();
const std::map<int, std::string> UtUnitFrequency_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "hz";
   sm[1] = "khz";
   sm[2] = "mhz";
   sm[3] = "ghz";

   return sm;
}
const std::map<int, std::string> UtUnitFrequency::mUnitToString = UtUnitFrequency_UnitToStrings();


const double UtUnitAngle::mBaseUnitMultiplier[UtUnitAngle::cLAST_SIMPLE_UNIT + 2] = {1.0, // cRADIANS
                                                                                     0.01745329251994329576923, // cDEGREES
                                                                                     6.283185307179586476920 / 6400.0, // cMILS
                                                                                     4.84813681109535993589914E-6, // cARCSECONDS
                                                                                     0};
const std::map<std::string, int> UtUnitAngle_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["radians"]    = UtUnitAngle::cRADIANS;
   sm["radian"]     = UtUnitAngle::cRADIANS;
   sm["rad"]        = UtUnitAngle::cRADIANS;
   sm["degrees"]    = UtUnitAngle::cDEGREES;
   sm["degree"]     = UtUnitAngle::cDEGREES;
   sm["deg"]        = UtUnitAngle::cDEGREES;
   sm["mils"]       = UtUnitAngle::cMILS;
   sm["mil"]        = UtUnitAngle::cMILS;
   sm["arcseconds"] = UtUnitAngle::cARCSECONDS;
   sm["arcsecond"]  = UtUnitAngle::cARCSECONDS;

   return sm;
}
const std::map<std::string, int> UtUnitAngle::mUnitStrings = UtUnitAngle_UnitStrings();
const std::map<int, std::string> UtUnitAngle_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "radians";
   sm[1] = "degrees";
   sm[2] = "mils";
   sm[3] = "arcseconds";

   return sm;
}
const std::map<int, std::string> UtUnitAngle::mUnitToString = UtUnitAngle_UnitToStrings();


const double UtUnitAngularRate::mBaseUnitMultiplier[UtUnitAngularRate::cLAST_SIMPLE_UNIT + 2] = {0, // unused
                                                                                                 6.283185307179586476920 /
                                                                                                    60.0, // cRPM
                                                                                                 0};
const std::map<std::string, int> UtUnitAngularRate_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["rad/s"] = UtUnitAngularRate::cRADIANS_PER_SECOND;
   sm["deg/s"] = UtUnitAngularRate::cDEGREES_PER_SECOND;
   sm["rpm"]   = UtUnitAngularRate::cRPM;

   return sm;
}
const std::map<std::string, int> UtUnitAngularRate::mUnitStrings = UtUnitAngularRate_UnitStrings();
const std::map<int, std::string> UtUnitAngularRate_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0]  = "rad/s";
   sm[32] = "deg/s";
   sm[1]  = "rpm";

   return sm;
}
const std::map<int, std::string> UtUnitAngularRate::mUnitToString = UtUnitAngularRate_UnitToStrings();


const double UtUnitAngularAcceleration::mBaseUnitMultiplier[UtUnitAngularAcceleration::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitAngularAcceleration_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["rad/s2"] = UtUnitAngularAcceleration::cRADIANS_PER_SECOND2;
   sm["deg/s2"] = UtUnitAngularAcceleration::cDEGREES_PER_SECOND2;

   return sm;
}
const std::map<std::string, int> UtUnitAngularAcceleration::mUnitStrings = UtUnitAngularAcceleration_UnitStrings();
const std::map<int, std::string> UtUnitAngularAcceleration_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0]  = "rad/s2";
   sm[16] = "deg/s2";

   return sm;
}
const std::map<int, std::string> UtUnitAngularAcceleration::mUnitToString = UtUnitAngularAcceleration_UnitToStrings();


const double                     UtUnitDataRate::mBaseUnitMultiplier[UtUnitDataRate::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitDataRate_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["bit/s"] = UtUnitDataRate::cBIT_PER_SECOND;

   return sm;
}
const std::map<std::string, int> UtUnitDataRate::mUnitStrings = UtUnitDataRate_UnitStrings();
const std::map<int, std::string> UtUnitDataRate_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "bit/s";

   return sm;
}
const std::map<int, std::string> UtUnitDataRate::mUnitToString = UtUnitDataRate_UnitToStrings();


const double                     UtUnitMassDensity::mBaseUnitMultiplier[UtUnitMassDensity::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitMassDensity_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["kg/m3"] = UtUnitMassDensity::cKILOGRAMS_PER_METER3;

   return sm;
}
const std::map<std::string, int> UtUnitMassDensity::mUnitStrings = UtUnitMassDensity_UnitStrings();
const std::map<int, std::string> UtUnitMassDensity_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "kg/m3";

   return sm;
}
const std::map<int, std::string> UtUnitMassDensity::mUnitToString = UtUnitMassDensity_UnitToStrings();


const double UtUnitMassTransfer::mBaseUnitMultiplier[UtUnitMassTransfer::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitMassTransfer_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["kg/s"] = UtUnitMassTransfer::cKILOGRAMS_PER_SECOND;

   return sm;
}
const std::map<std::string, int> UtUnitMassTransfer::mUnitStrings = UtUnitMassTransfer_UnitStrings();
const std::map<int, std::string> UtUnitMassTransfer_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "kg/s";

   return sm;
}
const std::map<int, std::string> UtUnitMassTransfer::mUnitToString = UtUnitMassTransfer_UnitToStrings();


const double UtUnitEnergy::mBaseUnitMultiplier[UtUnitEnergy::cLAST_SIMPLE_UNIT + 2] = {1.0,   // cJOULES
                                                                                       1.0E3, // cKILOJOULES
                                                                                       0};
const std::map<std::string, int> UtUnitEnergy_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["joules"]     = UtUnitEnergy::cJOULES;
   sm["j"]          = UtUnitEnergy::cJOULES;
   sm["kilojoules"] = UtUnitEnergy::cKILOJOULES;
   sm["kj"]         = UtUnitEnergy::cKILOJOULES;

   return sm;
}
const std::map<std::string, int> UtUnitEnergy::mUnitStrings = UtUnitEnergy_UnitStrings();
const std::map<int, std::string> UtUnitEnergy_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "joules";
   sm[1] = "kilojoules";

   return sm;
}
const std::map<int, std::string> UtUnitEnergy::mUnitToString = UtUnitEnergy_UnitToStrings();


const double                     UtUnitFluence::mBaseUnitMultiplier[UtUnitFluence::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitFluence_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["j/m2"] = UtUnitFluence::cJOULES_PER_METER2;

   return sm;
}
const std::map<std::string, int> UtUnitFluence::mUnitStrings = UtUnitFluence_UnitStrings();
const std::map<int, std::string> UtUnitFluence_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "j/m2";

   return sm;
}
const std::map<int, std::string> UtUnitFluence::mUnitToString = UtUnitFluence_UnitToStrings();


const double                     UtUnitIrradiance::mBaseUnitMultiplier[UtUnitIrradiance::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitIrradiance_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["w/m2"] = UtUnitIrradiance::cWATTS_PER_METER2;

   return sm;
}
const std::map<std::string, int> UtUnitIrradiance::mUnitStrings = UtUnitIrradiance_UnitStrings();
const std::map<int, std::string> UtUnitIrradiance_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "w/m2";

   return sm;
}
const std::map<int, std::string> UtUnitIrradiance::mUnitToString = UtUnitIrradiance_UnitToStrings();


const double UtUnitSpectralIrradiance::mBaseUnitMultiplier[UtUnitSpectralIrradiance::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitSpectralIrradiance_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["w/m2/m"] = UtUnitSpectralIrradiance::cWATTS_PER_METER2_PER_METER;

   return sm;
}
const std::map<std::string, int> UtUnitSpectralIrradiance::mUnitStrings = UtUnitSpectralIrradiance_UnitStrings();
const std::map<int, std::string> UtUnitSpectralIrradiance_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "w/m2/m";

   return sm;
}
const std::map<int, std::string> UtUnitSpectralIrradiance::mUnitToString = UtUnitSpectralIrradiance_UnitToStrings();


const double                     UtUnitRadiance::mBaseUnitMultiplier[UtUnitRadiance::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitRadiance_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["w/m2/sr"] = UtUnitRadiance::cWATTS_PER_METER2_PER_STERADIAN;

   return sm;
}
const std::map<std::string, int> UtUnitRadiance::mUnitStrings = UtUnitRadiance_UnitStrings();
const std::map<int, std::string> UtUnitRadiance_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "w/m2/sr";

   return sm;
}
const std::map<int, std::string> UtUnitRadiance::mUnitToString = UtUnitRadiance_UnitToStrings();


const double UtUnitSpectralRadiance::mBaseUnitMultiplier[UtUnitSpectralRadiance::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitSpectralRadiance_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["w/m2/sr/m"] = UtUnitSpectralRadiance::cWATTS_PER_METER2_PER_STERADIAN_PER_METER;

   return sm;
}
const std::map<std::string, int> UtUnitSpectralRadiance::mUnitStrings = UtUnitSpectralRadiance_UnitStrings();
const std::map<int, std::string> UtUnitSpectralRadiance_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "w/m2/sr/m";

   return sm;
}
const std::map<int, std::string> UtUnitSpectralRadiance::mUnitToString = UtUnitSpectralRadiance_UnitToStrings();


const double UtUnitRatio::mBaseUnitMultiplier[UtUnitRatio::cLAST_SIMPLE_UNIT + 2] = {1.0, // cABSOLUTE
                                                                                     0,   // cDB
                                                                                     0};
const std::map<std::string, int> UtUnitRatio_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["absolute"] = UtUnitRatio::cABSOLUTE;
   sm["db"]       = UtUnitRatio::cDB;

   return sm;
}
const std::map<std::string, int> UtUnitRatio::mUnitStrings = UtUnitRatio_UnitStrings();
const std::map<int, std::string> UtUnitRatio_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "absolute";
   sm[1] = "db";

   return sm;
}
const std::map<int, std::string> UtUnitRatio::mUnitToString = UtUnitRatio_UnitToStrings();


const double UtUnitNoisePressure::mBaseUnitMultiplier[UtUnitNoisePressure::cLAST_SIMPLE_UNIT + 2] = {1.0, // cABSOLUTE
                                                                                                     0,   // cDB_20UPA
                                                                                                     0};
const std::map<std::string, int> UtUnitNoisePressure_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["absolute"] = UtUnitNoisePressure::cABSOLUTE;
   sm["db_20upa"] = UtUnitNoisePressure::cDB_20UPA;

   return sm;
}
const std::map<std::string, int> UtUnitNoisePressure::mUnitStrings = UtUnitNoisePressure_UnitStrings();
const std::map<int, std::string> UtUnitNoisePressure_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "absolute";
   sm[1] = "db_20upa";

   return sm;
}
const std::map<int, std::string> UtUnitNoisePressure::mUnitToString = UtUnitNoisePressure_UnitToStrings();


const double UtUnitPressure::mBaseUnitMultiplier[UtUnitPressure::cLAST_SIMPLE_UNIT + 2] = {1.0,        // cPASCAL
                                                                                           1.0E3,      // cKILOPASCALS
                                                                                           1.0E-6,     // cMICROPASCALS
                                                                                           1.0E-9,     // cNANOPASCALS
                                                                                           6894.75729, // cPSI
                                                                                           6894.75729 / 144.0, // cPSF
                                                                                           0,                  // cDBPA
                                                                                           0,                  // cDBUPA
                                                                                           0};
const std::map<std::string, int> UtUnitPressure_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["pascal"]       = UtUnitPressure::cPASCAL;
   sm["pa"]           = UtUnitPressure::cPASCAL;
   sm["kilopascals"]  = UtUnitPressure::cKILOPASCALS;
   sm["kilopascal"]   = UtUnitPressure::cKILOPASCALS;
   sm["kpa"]          = UtUnitPressure::cKILOPASCALS;
   sm["micropascals"] = UtUnitPressure::cMICROPASCALS;
   sm["micropascal"]  = UtUnitPressure::cMICROPASCALS;
   sm["upa"]          = UtUnitPressure::cMICROPASCALS;
   sm["nanopascal"]   = UtUnitPressure::cNANOPASCALS;
   sm["nanopascals"]  = UtUnitPressure::cNANOPASCALS;
   sm["psi"]          = UtUnitPressure::cPSI;
   sm["psf"]          = UtUnitPressure::cPSF;
   sm["dbpa"]         = UtUnitPressure::cDBPA;
   sm["dbupa"]        = UtUnitPressure::cDBUPA;

   return sm;
}
const std::map<std::string, int> UtUnitPressure::mUnitStrings = UtUnitPressure_UnitStrings();
const std::map<int, std::string> UtUnitPressure_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "pascal";
   sm[1] = "kilopascals";
   sm[2] = "micropascals";
   sm[3] = "nanopascal";
   sm[4] = "psi";
   sm[5] = "psf";
   sm[6] = "dbpa";
   sm[7] = "dbupa";

   return sm;
}
const std::map<int, std::string> UtUnitPressure::mUnitToString = UtUnitPressure_UnitToStrings();


const double UtUnitTemperature::mBaseUnitMultiplier[UtUnitTemperature::cLAST_SIMPLE_UNIT + 2] = {1.0, // cKELVIN
                                                                                                 0,   // cCELSIUS
                                                                                                 0,   // cFAHRENHEIT
                                                                                                 0};
const std::map<std::string, int> UtUnitTemperature_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["kelvin"]     = UtUnitTemperature::cKELVIN;
   sm["k"]          = UtUnitTemperature::cKELVIN;
   sm["celsius"]    = UtUnitTemperature::cCELSIUS;
   sm["c"]          = UtUnitTemperature::cCELSIUS;
   sm["fahrenheit"] = UtUnitTemperature::cFAHRENHEIT;
   sm["f"]          = UtUnitTemperature::cFAHRENHEIT;

   return sm;
}
const std::map<std::string, int> UtUnitTemperature::mUnitStrings = UtUnitTemperature_UnitStrings();
const std::map<int, std::string> UtUnitTemperature_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "kelvin";
   sm[1] = "celsius";
   sm[2] = "fahrenheit";

   return sm;
}
const std::map<int, std::string> UtUnitTemperature::mUnitToString = UtUnitTemperature_UnitToStrings();


const double UtUnitSpecificRange::mBaseUnitMultiplier[UtUnitSpecificRange::cLAST_SIMPLE_UNIT + 2] = {
   1.0,                           // cMETERS_PER_KILOGRAM
   1609.344 * 2.2046226,          // cMILES_PER_POUND
   1609.344 * 2.2046226 / 1000.0, // cMILES_PER_KILOPOUND
   1852.0 * 2.2046226,            // cNAUTICAL_MILES_PER_POUND
   1852.0 * 2.2046226 / 1000.0,   // cNAUTICAL_MILES_PER_KILOPOUND
   0};
const std::map<std::string, int> UtUnitSpecificRange_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["m/kg"]    = UtUnitSpecificRange::cMETERS_PER_KILOGRAM;
   sm["mi/lb"]   = UtUnitSpecificRange::cMILES_PER_POUND;
   sm["mi/klb"]  = UtUnitSpecificRange::cMILES_PER_KILOPOUND;
   sm["nmi/lb"]  = UtUnitSpecificRange::cNAUTICAL_MILES_PER_POUND;
   sm["nmi/klb"] = UtUnitSpecificRange::cNAUTICAL_MILES_PER_KILOPOUND;

   return sm;
}
const std::map<std::string, int> UtUnitSpecificRange::mUnitStrings = UtUnitSpecificRange_UnitStrings();
const std::map<int, std::string> UtUnitSpecificRange_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "m/kg";
   sm[1] = "mi/lb";
   sm[2] = "mi/klb";
   sm[3] = "nmi/lb";
   sm[4] = "nmi/klb";

   return sm;
}
const std::map<int, std::string> UtUnitSpecificRange::mUnitToString = UtUnitSpecificRange_UnitToStrings();


const double UtUnitAngularInertia::mBaseUnitMultiplier[UtUnitAngularInertia::cLAST_SIMPLE_UNIT + 2] = {
   0,                  // unused
   1.0,                // cKILOGRAMS_METERS2
   1.355817961893,     // cSLUG_FEET2
   0.0002926396534292, // cLBM_INCHES2
   0};
const std::map<std::string, int> UtUnitAngularInertia_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["kg*m2"]    = UtUnitAngularInertia::cKILOGRAMS_METERS2;
   sm["slug*ft2"] = UtUnitAngularInertia::cSLUG_FEET2;
   sm["lbm*in2"]  = UtUnitAngularInertia::cLBM_INCHES2;

   return sm;
}
const std::map<std::string, int> UtUnitAngularInertia::mUnitStrings = UtUnitAngularInertia_UnitStrings();
const std::map<int, std::string> UtUnitAngularInertia_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[1] = "kg*m2";
   sm[2] = "slug*ft2";
   sm[3] = "lbm*in2";

   return sm;
}
const std::map<int, std::string> UtUnitAngularInertia::mUnitToString = UtUnitAngularInertia_UnitToStrings();


const double UtUnitVoltage::mBaseUnitMultiplier[UtUnitVoltage::cLAST_SIMPLE_UNIT + 2] = {1.0,    // cVOLTS
                                                                                         1.0E-3, // cMILLIVOLTS
                                                                                         1.0E-6, // cMICROVOLTS
                                                                                         1.0E3,  // cKILOVOLTS
                                                                                         1.0E6,  // cMEGAVOLTS
                                                                                         0};
const std::map<std::string, int> UtUnitVoltage_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["volts"]      = UtUnitVoltage::cVOLTS;
   sm["volt"]       = UtUnitVoltage::cVOLTS;
   sm["v"]          = UtUnitVoltage::cVOLTS;
   sm["millivolts"] = UtUnitVoltage::cMILLIVOLTS;
   sm["millivolt"]  = UtUnitVoltage::cMILLIVOLTS;
   sm["microvolts"] = UtUnitVoltage::cMICROVOLTS;
   sm["microvolt"]  = UtUnitVoltage::cMICROVOLTS;
   sm["kilovolts"]  = UtUnitVoltage::cKILOVOLTS;
   sm["kilovolt"]   = UtUnitVoltage::cKILOVOLTS;
   sm["megavolts"]  = UtUnitVoltage::cMEGAVOLTS;
   sm["megavolt"]   = UtUnitVoltage::cMEGAVOLTS;

   return sm;
}
const std::map<std::string, int> UtUnitVoltage::mUnitStrings = UtUnitVoltage_UnitStrings();
const std::map<int, std::string> UtUnitVoltage_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "volts";
   sm[1] = "millivolts";
   sm[2] = "microvolts";
   sm[3] = "kilovolts";
   sm[4] = "megavolts";

   return sm;
}
const std::map<int, std::string> UtUnitVoltage::mUnitToString = UtUnitVoltage_UnitToStrings();


const double UtUnitCurrent::mBaseUnitMultiplier[UtUnitCurrent::cLAST_SIMPLE_UNIT + 2] = {1.0,    // cAMPS
                                                                                         1.0E-3, // cMILLIAMPS
                                                                                         1.0E-6, // cMICROAMPS
                                                                                         1.0E-9, // cNANOAMPS
                                                                                         0};
const std::map<std::string, int> UtUnitCurrent_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["amps"]      = UtUnitCurrent::cAMPS;
   sm["amp"]       = UtUnitCurrent::cAMPS;
   sm["amperes"]   = UtUnitCurrent::cAMPS;
   sm["ampere"]    = UtUnitCurrent::cAMPS;
   sm["milliamps"] = UtUnitCurrent::cMILLIAMPS;
   sm["milliamp"]  = UtUnitCurrent::cMILLIAMPS;
   sm["ma"]        = UtUnitCurrent::cMILLIAMPS;
   sm["microamps"] = UtUnitCurrent::cMICROAMPS;
   sm["microamp"]  = UtUnitCurrent::cMICROAMPS;
   sm["ua"]        = UtUnitCurrent::cMICROAMPS;
   sm["nanoamps"]  = UtUnitCurrent::cNANOAMPS;
   sm["nanoamp"]   = UtUnitCurrent::cNANOAMPS;
   sm["na"]        = UtUnitCurrent::cNANOAMPS;

   return sm;
}
const std::map<std::string, int> UtUnitCurrent::mUnitStrings = UtUnitCurrent_UnitStrings();
const std::map<int, std::string> UtUnitCurrent_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "amps";
   sm[1] = "milliamps";
   sm[2] = "microamps";
   sm[3] = "nanoamps";

   return sm;
}
const std::map<int, std::string> UtUnitCurrent::mUnitToString = UtUnitCurrent_UnitToStrings();


const double UtUnitCurrentDensity::mBaseUnitMultiplier[UtUnitCurrentDensity::cLAST_SIMPLE_UNIT + 2] = {0};
const std::map<std::string, int> UtUnitCurrentDensity_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["amps/m2"] = UtUnitCurrentDensity::cAMPS_PER_METER2;

   return sm;
}
const std::map<std::string, int> UtUnitCurrentDensity::mUnitStrings = UtUnitCurrentDensity_UnitStrings();
const std::map<int, std::string> UtUnitCurrentDensity_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "amps/m2";

   return sm;
}
const std::map<int, std::string> UtUnitCurrentDensity::mUnitToString = UtUnitCurrentDensity_UnitToStrings();


const double UtUnitResistance::mBaseUnitMultiplier[UtUnitResistance::cLAST_SIMPLE_UNIT + 2] = {1.0,    // cOHMS
                                                                                               1.0E-6, // cMICROOHMS
                                                                                               1.0E-3, // cMILLIOHMS
                                                                                               1.0E3,  // cKILOOHMS
                                                                                               1.0E6,  // cMEGAOHMS
                                                                                               1.0E9,  // cGIGAOHMS
                                                                                               0};
const std::map<std::string, int> UtUnitResistance_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["ohms"]      = UtUnitResistance::cOHMS;
   sm["ohm"]       = UtUnitResistance::cOHMS;
   sm["microohms"] = UtUnitResistance::cMICROOHMS;
   sm["microohm"]  = UtUnitResistance::cMICROOHMS;
   sm["milliohms"] = UtUnitResistance::cMILLIOHMS;
   sm["milliohm"]  = UtUnitResistance::cMILLIOHMS;
   sm["kiloohms"]  = UtUnitResistance::cKILOOHMS;
   sm["kiloohm"]   = UtUnitResistance::cKILOOHMS;
   sm["kilohms"]   = UtUnitResistance::cKILOOHMS;
   sm["kilohm"]    = UtUnitResistance::cKILOOHMS;
   sm["megaohms"]  = UtUnitResistance::cMEGAOHMS;
   sm["megaohm"]   = UtUnitResistance::cMEGAOHMS;
   sm["megohms"]   = UtUnitResistance::cMEGAOHMS;
   sm["megohm"]    = UtUnitResistance::cMEGAOHMS;
   sm["gigaohms"]  = UtUnitResistance::cGIGAOHMS;
   sm["gigaohm"]   = UtUnitResistance::cGIGAOHMS;
   sm["gigohms"]   = UtUnitResistance::cGIGAOHMS;
   sm["gigohm"]    = UtUnitResistance::cGIGAOHMS;

   return sm;
}
const std::map<std::string, int> UtUnitResistance::mUnitStrings = UtUnitResistance_UnitStrings();
const std::map<int, std::string> UtUnitResistance_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "ohms";
   sm[1] = "microohms";
   sm[2] = "milliohms";
   sm[3] = "kiloohms";
   sm[4] = "megaohms";
   sm[5] = "gigaohms";

   return sm;
}
const std::map<int, std::string> UtUnitResistance::mUnitToString = UtUnitResistance_UnitToStrings();


const double UtUnitCapacitance::mBaseUnitMultiplier[UtUnitCapacitance::cLAST_SIMPLE_UNIT + 2] = {1.0,    // cFARADS
                                                                                                 1.0E-3, // cMILLIFARADS
                                                                                                 1.0E-6, // cMICROFARADS
                                                                                                 1.0E-9, // cNANOFARADS
                                                                                                 1.0E-12, // cPICOFARADS
                                                                                                 1.0E-15, // cFEMTOFARADS
                                                                                                 0};
const std::map<std::string, int> UtUnitCapacitance_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["farads"]      = UtUnitCapacitance::cFARADS;
   sm["farad"]       = UtUnitCapacitance::cFARADS;
   sm["millifarads"] = UtUnitCapacitance::cMILLIFARADS;
   sm["millifarad"]  = UtUnitCapacitance::cMILLIFARADS;
   sm["microfarads"] = UtUnitCapacitance::cMICROFARADS;
   sm["microfarad"]  = UtUnitCapacitance::cMICROFARADS;
   sm["nanofarads"]  = UtUnitCapacitance::cNANOFARADS;
   sm["nanofarad"]   = UtUnitCapacitance::cNANOFARADS;
   sm["picofarads"]  = UtUnitCapacitance::cPICOFARADS;
   sm["picofarad"]   = UtUnitCapacitance::cPICOFARADS;
   sm["femtofarads"] = UtUnitCapacitance::cFEMTOFARADS;
   sm["femtofarad"]  = UtUnitCapacitance::cFEMTOFARADS;

   return sm;
}
const std::map<std::string, int> UtUnitCapacitance::mUnitStrings = UtUnitCapacitance_UnitStrings();
const std::map<int, std::string> UtUnitCapacitance_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[0] = "farads";
   sm[1] = "millifarads";
   sm[2] = "microfarads";
   sm[3] = "nanofarads";
   sm[4] = "picofarads";
   sm[5] = "femtofarads";

   return sm;
}
const std::map<int, std::string> UtUnitCapacitance::mUnitToString = UtUnitCapacitance_UnitToStrings();


const double UtUnitImpulse::mBaseUnitMultiplier[UtUnitImpulse::cLAST_SIMPLE_UNIT + 2] = {0,   // unused
                                                                                         1.0, // cNEWTON_SECONDS
                                                                                         0};
const std::map<std::string, int> UtUnitImpulse_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["newtons*seconds"] = UtUnitImpulse::cNEWTON_SECONDS;

   return sm;
}
const std::map<std::string, int> UtUnitImpulse::mUnitStrings = UtUnitImpulse_UnitStrings();
const std::map<int, std::string> UtUnitImpulse_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[1] = "newtons*seconds";

   return sm;
}
const std::map<int, std::string> UtUnitImpulse::mUnitToString = UtUnitImpulse_UnitToStrings();


const double UtUnitResponsivity::mBaseUnitMultiplier[UtUnitResponsivity::cLAST_SIMPLE_UNIT + 2] = {0,   // unused
                                                                                                   1.0, // cAMPS_PER_WATT
                                                                                                   0};
const std::map<std::string, int> UtUnitResponsivity_UnitStrings()
{
   std::map<std::string, int> sm;
   sm["amp/watt"] = UtUnitResponsivity::cAMPS_PER_WATT;

   return sm;
}
const std::map<std::string, int> UtUnitResponsivity::mUnitStrings = UtUnitResponsivity_UnitStrings();
const std::map<int, std::string> UtUnitResponsivity_UnitToStrings()
{
   std::map<int, std::string> sm;
   sm[1] = "amp/watt";

   return sm;
}
const std::map<int, std::string> UtUnitResponsivity::mUnitToString = UtUnitResponsivity_UnitToStrings();


// UtUnitSources}
///////////////////////////////////////////////////////////////////////////
// END GENERATED CODE
//    This code is generated by UtUnits.py.  Do not modify directly.
///////////////////////////////////////////////////////////////////////////


// These conversion functions require custom code because they do not rely on simple multipliers
double UtUnitPowerDB::ConvertToStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDBW:
      return UtMath::DB_ToLinear(aValue);
   case cDBM:
      return 0.001 * UtMath::DB_ToLinear(aValue);
   default:
      return UnitFunctions::ConvertToStandard(aValue, aUnit);
   }
}

double UtUnitPowerDB::ConvertFromStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDBW:
      return UtMath::LinearToDB(aValue);
   case cDBM:
      return UtMath::LinearToDB(aValue * 1.0E3);
   default:
      return UnitFunctions::ConvertFromStandard(aValue, aUnit);
   }
}

double UtUnitAreaDB::ConvertToStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDBSM:
      return UtMath::DB_ToLinear(aValue);
   default:
      return UnitFunctions::ConvertToStandard(aValue, aUnit);
   }
}

double UtUnitAreaDB::ConvertFromStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDBSM:
      return UtMath::LinearToDB(aValue);
   default:
      return UnitFunctions::ConvertFromStandard(aValue, aUnit);
   }
}

double UtUnitRatio::ConvertToStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDB:
      return UtMath::DB_ToLinear(aValue);
   default:
      return UnitFunctions::ConvertToStandard(aValue, aUnit);
   }
}

double UtUnitRatio::ConvertFromStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDB:
      return UtMath::LinearToDB(aValue);
   default:
      return UnitFunctions::ConvertFromStandard(aValue, aUnit);
   }
}
double UtUnitPressure::ConvertToStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDBPA:
      return UtMath::DB_ToLinear(aValue);
   case cDBUPA:
      return UtMath::DB_ToLinear(aValue) * 1.0E-6;
   default:
      return UnitFunctions::ConvertToStandard(aValue, aUnit);
   }
}

double UtUnitPressure::ConvertFromStandard(double aValue, int aUnit)
{
   switch (aUnit)
   {
   case cDBPA:
      return UtMath::LinearToDB(aValue);
   case cDBUPA:
      return UtMath::LinearToDB(aValue * 1.0E6);
   default:
      return UnitFunctions::ConvertFromStandard(aValue, aUnit);
   }
}

double UtUnitNoisePressure::ConvertToStandard(double aValue, int aUnit)
{
   if (aUnit == cDB_20UPA)
   {
      return UtMath::DB_ToLinear(aValue);
   }
   else
   {
      return UnitFunctions::ConvertToStandard(aValue, aUnit);
   }
}

double UtUnitNoisePressure::ConvertFromStandard(double aValue, int aUnit)
{
   if (aUnit == cDB_20UPA)
   {
      return UtMath::LinearToDB(aValue);
   }
   else
   {
      return UnitFunctions::ConvertFromStandard(aValue, aUnit);
   }
}

double UtUnitTemperature::ConvertToStandard(double aValue, int aUnit)
{
   if (aUnit == cFAHRENHEIT)
   {
      return (aValue - 32.0) * UtMath::cDEG_K_PER_DEG_F + UtMath::cZERO_C_IN_K;
   }
   else if (aUnit == cCELSIUS)
   {
      return (aValue + 273.15);
   }
   else
   {
      return UnitFunctions::ConvertToStandard(aValue, aUnit);
   }
}

double UtUnitTemperature::ConvertFromStandard(double aValue, int aUnit)
{
   if (aUnit == cFAHRENHEIT)
   {
      return ((aValue - UtMath::cZERO_C_IN_K) / UtMath::cDEG_K_PER_DEG_F) + 32.0;
   }
   else if (aUnit == cCELSIUS)
   {
      return (aValue - 273.15);
   }
   else
   {
      return UnitFunctions::ConvertToStandard(aValue, aUnit);
   }
}
