# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# Copyright 2003-2015 The Boeing Company. All rights reserved.
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

script string ValueToAscii(double v)
   string c;
   if (v<=0) c = "_";
   else if (v<.2) c= ".";
   else if (v<.4) c = ":"; 
   else if (v<.6) c = ";";
   else if (v<.8) c = "!";
   else if (v<1.0) c = "|";
   else if (v>=1.0) c = "X";
   return c;
end_script

script string ConvertPdMapToAscii(string pdmapFile, double aMinValue, double aMaxValue)
   FileIO io = FileIO();
   string txt;
   if (! io.Open(pdmapFile, "in")) return "";
   // ignore file header and column headers
   for (int i = 0; i < 5; i+=1) io.Readln();
   while (1)
   {
      string line = io.Readln().Strip();
      if (line.Length() == 0) break;
      Array<string> tokens = line.Split();
      tokens.EraseAt(0); // ignore row header
      foreach (string tok in tokens)
      {
         #     .:;|#
         double v = (double)tok;
         v = (v - aMinValue) / (aMaxValue - aMinValue);
         txt += ValueToAscii(v);
      }
      txt += "\n";
   }
   return txt;
end_script

script string ConvertAnalysisMapToAscii(string amapFile, double aMinValue, double aMaxValue)
   FileIO io = FileIO();
   string txt;
   if (! io.Open(amapFile, "in")) return "";
   for (int i = 0; i < 18; i+=1) io.Readln();
   while (1)
   {
      string line = io.Readln().Strip();
      if (line.Length() == 0) break;
      foreach (string tok in line.Split())
      {
         #     .:;|#
         double v = (double)tok;
         v = (v - aMinValue) / (aMaxValue - aMinValue);
         txt += ValueToAscii(v);
      }
      txt += "\n";
   }
   return txt;
end_script

script string ReadFileText(string fileName)
   string allText = FileIO.ReadAll(fileName);  
   allText = allText.Replace("\r", "");
   if (! allText.EndsWith("\n")) allText += "\n";
   return allText;
   #for (string line = io.Readln(); line.Length(); line = io.Readln())
   #{
   #   allText += line.Strip() + "\n";
   #}
   #return allText;
end_script

script void PostProcessAscii(string newAscii, string expectedAscii, double errorThreshold)
   bool fail = false;
   Map<string, double> asciiToValue = { "_" : 0.0, "." : .1, ":" : .3, ";" : .5, "!" : .7, "|" : .9, "X" : 1.0 };
   writeln("- Begin Plot ( .:;!|X) -");
   write(newAscii);
   writeln("- End Plot -");
   if (newAscii != expectedAscii)
   {
      double newTotal = 0, oldTotal = 0;
      writeln("- Difference  (.=none, ^-higher, v-lower) -");
      Array<string> newLines = newAscii.Split("\n");
      Array<string> oldLines = expectedAscii.Split("\n");
      for (int i = 0; i < newLines.Size(); i+=1)
      {
         if (oldLines.Size() <= i) { writeln("---LINE NOT EXPECTED---"); fail = true; continue; }
         string new = newLines[i].Strip();
         string old = oldLines[i].Strip();
         for (int j = 0; j < new.Length(); j+=1)
         {
            if (j > old.Length()) { writeln("*TOO MANY COLUMNS"); fail = true; break; }
            string newc = new.Substring(j, j);
            string oldc = old.Substring(j, j);
            newTotal += asciiToValue[newc];
            oldTotal += asciiToValue[oldc];
            if (newc == oldc) write(".");
            else {
               if (asciiToValue[newc] > asciiToValue[oldc])
                  write("^");
               else
                  write("v");            
            }
         }
         write("\n");
      }
      writeln("- End Difference -");
      if (oldTotal != newTotal)
      {
         double errorPct = 100.0 - 100 * newTotal / (oldTotal + .01);
         if (errorPct > errorThreshold || errorPct < -errorThreshold)
         {
            writeln("Error: Difference is not small: ", errorPct, "%");
            fail = true;
         }
      }
   }
   else
   {
      writeln("Plot exactly as expected!");
   }
   if (fail) writeln("-FAIL-");
   else writeln("-PASS- Plot Compare OK");
end_script

# 1. Converts the analysis map to ascii, and prints it to screen
# 2. Compares output to expected results to determine pass/fail
# 2.a. If there are differences, the change is displayed 
script void PostProcessAnalysisMap(string analysisMapFile,
                                   // file name of expected analysis map ascii
                                   string expectedResultsFile,
                                   // Min and max values expected.  (0.0 - 1.0 for pd)
                                   double aMinValue,
                                   double aMaxValue,
                                   // Maximum percent error in whole plot
                                   double errorThreshold)
   analysisMapFile = WsfSimulation.ExpandPathVariables(analysisMapFile);
   expectedResultsFile = WsfSimulation.ExpandPathVariables(expectedResultsFile);                                   
   
   string ascii = ConvertAnalysisMapToAscii(analysisMapFile, aMinValue, aMaxValue);
   if (!ascii.Length())
   {
      writeln("-FAIL- Can't read analysis map: ", analysisMapFile);
   }
   
   string expected = ReadFileText(expectedResultsFile);
   if (expected.Length() == 0)
   {
      writeln("Expected analysis map not found.");
   }
   PostProcessAscii(ascii, expected, errorThreshold);  
end_script

# 1. Converts the Pd map to ascii, and prints it to screen
# 2. Compares output to expected results to determine pass/fail
# 2.a. If there are differences, the change is displayed
script void PostProcessPdMap(string pdMapFile,
                             // file name of expected analysis map ascii
                             string expectedResultsFile,
                             // Min and max values expected.  (0.0 - 1.0 for pd)
                             double aMinValue,
                             double aMaxValue,
                             // Maximum percent error in whole plot
                             double errorThreshold)
   pdMapFile = WsfSimulation.ExpandPathVariables(pdMapFile);
   expectedResultsFile = WsfSimulation.ExpandPathVariables(expectedResultsFile);                                   
   
   string ascii = ConvertPdMapToAscii(pdMapFile, aMinValue, aMaxValue);
   if (!ascii.Length())
   {
      writeln("-FAIL- Can't read analysis map: ", pdMapFile);
   }
   
   string expected = ReadFileText(expectedResultsFile);
   if (expected.Length() == 0)
   {
      writeln("Expected analysis map not found.");
   }
   PostProcessAscii(ascii, expected, errorThreshold);  
end_script
